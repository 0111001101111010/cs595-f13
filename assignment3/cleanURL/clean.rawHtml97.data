   #[1]Faking Fantastic RSS Feed [2]Faking Fantastic » Concerning Yourself
   with ActiveSupport::Concern Comments Feed [3]Faking Fantastic
   [4]Doctrine – Build DB Models faster with less headaches. [5]Getting
   Comfortable Working With Rails Core [6]Before Type Cast

[7]Faking Fantastic

   Confessions of a Web Developing Phony
   Search for: ____________________ Search

[8]Concerning Yourself with ActiveSupport::Concern

   September 20th, 2010

   Picking up on our last talk about [9]working with the Rails core, I
   wanted to take some time to introduce you to the internals of Rails 3,
   in hopes to break down any fears about hacking around in Rails. We are
   going to talk today about ActiveSupport::Concern.

Preface

   For those of you new to ActiveSupport, let’s take a step back. Have you
   ever worked on a codebase and had to constantly do some utility work,
   like encoding or decoding JSON, generate a random number, or encrypt
   data? Of course, we all have, and the Rails core developers are no
   different. ActiveSupport is a library of such utilities that you are
   free to use not only in Rails, but in your own standalone Ruby project!
   I feel that ActiveSupport is the best place to start learning Rails
   core code: in core libraries, it takes multiple classes and modules to
   see a functionality come to life. Compounded by your unfamiliarity with
   the idioms that the core developers use, you may quickly find yourself
   getting lost. In ActiveSupport, most of the modules standalone, so you
   can look at the one file to find out what it’s doing (many helper
   modules are < 200 lines of code with comments). Also, it gives you
   small doses of such idioms, so you can get comfortable with core design
   patterns before diving into heavy lifting code.

::Concern

   So now that you know about ActiveSupport, you won’t be surprised to
   learn that ActiveSupport::Concern is just another helpful utility
   module. But you might not understand what it’s useful for until you
   learn a little bit about a common Rails metaprogramming design pattern.

Mixing Class and Instance methods into your classes

   Commonly in Rails, we use 3rd-party gems to add certain functionality
   to our classes; most commonly of which is ActiveRecord::Base. These
   gems usually add methods to instances of AR::Base, and to the class
   itself. For example, a tagging library might add an instance method
   @blog.tags, and a class method Blog.find_by_tags. If you’ve never
   looked under the hood to see how libraries do this, it may be look a
   little roundabout:
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
     module TagLib

       module ClassMethods
         def find_by_tags()
           # ...
         end
       end

       module InstanceMethods
         def tags()
           # ...
         end
       end

       def self.included(base)
         base.send :include, InstanceMethods
         base.send :extend, ClassMethods
       end

     end
     class ActiveRecord::Base
       include TagLib
     end

   This is a common Rails idiom that many developers are used to seeing.
   The system breaks down like this:
    1. Start on line 1, where we create a module, ours is TagLib, which
       will provide tagging functionality
    2. On line 23, we open up ActiveRecord::Base (AR::Base) and include
       our module. This will make the TagLib library available to all
       AR::Base classes. Note: this code that opens AR::Base is not inside
       of our module
    3. On line 15, we override the

       1
        self.included()
       method.

       1
        self.included()
       is a special “callback” method that gets automatically called when
       ever the module is included into something. In our case, we
       included TagLib into AR::Base, so this method will be called.
       self.included() takes a parameter, which is a reference to the
       class that included in it, in our case AR::Base. We can now take
       that reference, and use it to add methods to it. Note: we use

       1
        base.send :extend
       , instead of the basic

       1
        extend
       , to get around private method hiding.
    4. By calling self.included() in your class, it will include all of
       the instance methods of the class with the methods in the
       InstanceMethods module, giving your @blog.tags, and it will add all
       of the methods in the ClassMethods module to the class, so you can
       do Blog.find_by_tags.

   There are many reasons why this system is a little bit hacky, and more
   will become apparent when you dive deepy into the Ruby language and
   metaprogramming. A couple standouts are:
     * You are overriding the

       1
        self.included()
       method to act like an extend method
     * When you include a method into a class, the methods automatically
       become apart of all instances in the class. It is not always
       necessary to have an InstanceMethods module to include another
       module.
     * It’s not readable, people have to struggle just to figure out this
       whole bootstrapping process.

   Note: [10]Smarter people have [11]explained this way better than me

ActiveSupport::Concern to the rescue

   Looking for a way to keep the same design pattern, but abstract the
   complexities out of the code, [12]Josh Peek wrote
   ActiveSupport::Concern, which allows you to pull off our same TagLib
   module by doing something like this:
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
     module TagLib
       extend ActiveSupport::Concern
       module ClassMethods
         def find_by_tags()
           # ...
         end
       end

       module InstanceMethods
         def tags()
           # ...
         end
       end
     end
     class ActiveRecord::Base
       include TagLib
     end

   AS::Concern will look for modules named ClassMethods and
   InstanceMethods and bootstrap them as you normally would like. The
   module has some other nice benefits, for instance, sometimes you want
   to add other code in the
   1
    self.included()

   method, such as logging:
   1
   2
   3
    def self.included(base)
      logger.warn("Adding TabLib - this will make you class awesome.
    Proceed with awesomeness")
      #...

   Since AS::Concern removes the need for that call, it also provides you
   with an
   1
    included()

   method that takes a block, so now you can do:
   1
   2
   3
    included do
      logger.warn ...
    end

   Hopefully, you’ve gotten a taste of some Rails idioms, Rails core code,
   and an explanation of a core module. I assure you, there are many more
   in ActiveSupport that are equally as straightforward to follow, so get
   hacking! (check out GZip, Buffered Logger, and Message Encryptor)
     * [13]Digg
     * [14]del.icio.us
     * [15]Facebook
     * [16]Google Bookmarks
     * [17]Twitter

   [18]Comment | [19]Trackback

   Posted: [20]Uncategorized

11 Responses to “Concerning Yourself with ActiveSupport::Concern”

    1. [21]Aaron Godin Says:
       [22]April 29th, 2011 at 8:27 pm
       Thanks for the post! I’m looking at constructing my first gem to
       use with ActiveRecord, and this helps me get through the tough
       parts. Now I can go crack open my favorite gems.
    2. [23]Frank Says:
       [24]April 30th, 2011 at 4:47 am
       I’m glad it helped you out
    3. [25]Jaime Iniesta Says:
       [26]May 24th, 2011 at 9:46 am
       Thanks for the post!
       There’s a little typo (twice): “TabLib” instead of “TagLib”
    4. [27]Frank Says:
       [28]May 24th, 2011 at 9:50 am
       Glad you liked it, all fixed
    5. [29]Charles Feduke Says:
       [30]May 26th, 2011 at 10:35 am
       This is useful to know. I just wrote some code where I could have
       used ActiveSupport::Concern yesterday (in place of the old way).
       Even though you’re not losing very many LOC the purpose becomes a
       bit clearer and more readable.
    6. [31]Frank Says:
       [32]May 26th, 2011 at 10:39 am
       You’re absolutely right, Charles. The whole “Rails 3 gut” was all
       about cleaner, more compartmentalized code. Making this mixin
       process a little more auto-magic makes it clearer by standardizing
       a common bootstrap process that many have been hacking about.
    7. [33]Giang Nguyen Says:
       [34]August 29th, 2011 at 12:23 pm
       Nice article.
       Suppose I have a Tag model that corresponds to a Tags table in
       database, in Tag model I include TagLib. Also, I put some logger
       messages in include callback. I notice that every time I do
       something with a Tag instance that calls methods in TagLib, the
       logger messages show up in log.
       That means everytime a Tag instance is accessed, the TagLib gets
       included again?
       If so, is there any other efficient way to get rid of including
       TagLib methods every time Tag instance is accessed?
       Thanks,
       -Giang
    8. Mark Says:
       [35]October 10th, 2011 at 11:50 pm
       I had to debug someone else’s code today, and it was only able to
       understand it after I had read this post. Thanks!
    9. Dhiren Gupta Says:
       [36]November 22nd, 2011 at 2:59 am
       Thanks for the post !!. It’s very helpful.
   10. Kevin Triplett Says:
       [37]March 9th, 2012 at 1:37 am
       The latest Rails (3.2 I believe) is deprecating the
       InstanceMethods. As the deprecation warning explains, just include
       instance methods in the module. So the module would be:
       module TagLib
       extend ActiveSupport::Concern
       module ClassMethods
       def find_by_tags()
       # …
       end
       end
       def tags()
       # …
       end
       end
   11. apeiros Says:
       [38]May 2nd, 2012 at 2:47 am
       extend is not private, only include is.

Leave a Reply

   Name (required) ______________________ Mail (will not be published)
   (required) ______________________ Website ______________________

   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   _______________________________________________________________________
   Submit Comment

   Currently you have JavaScript disabled. In order to post comments,
   please make sure JavaScript and Cookies are enabled, and reload the
   page. [39]Click here for instructions on how to enable JavaScript in
   your browser.
     * « Older Entries
     * Newer Entries »

     *
     * [40]Twitter Updates
       Error: Twitter did not respond. Please wait a few minutes and
       refresh this page.
     *
     * People I Follow
          + [41]Aaron Paterson
          + [42]Chad Fowler
          + [43]Evan Phoenix
          + [44]Ilya Grigorik
          + [45]Rick Olson
          + [46]Yehuda Katz
     * Archives
          + [47]February 2013
          + [48]September 2011
          + [49]August 2011
          + [50]February 2011
          + [51]January 2011
          + [52]November 2010
          + [53]September 2010
          + [54]August 2010
          + [55]July 2010
          + [56]June 2010
          + [57]February 2010
          + [58]January 2010
          + [59]December 2009
          + [60]November 2009
          + [61]October 2009
          + [62]July 2009
          + [63]May 2009
          + [64]April 2009
     * Categories
          + [65]Code (16)
          + [66]Information (7)
          + [67]Lecture (9)
          + [68]Uncategorized (7)

   All of the content seen on fakingfantastic.com was produced entirely by
   Frank Lakatos unless otherwise noted. If you have any inquires about
   the work seen on this site, a future project, or just looking to talk
   about random web nonsense, don't hesitate to get in contact with me -
   I'm a pretty affable guy. Here are some quick ways you can reach me...
     * E-Mail: [69]me [at] fakingfantastic [dot] com
     * IRC: fakingfantastic (you can find me in #rubyonrails, #ruby, or
       #jquery most of the time)
     * Twitter: [70]fakingfantastic


   © 2013 fakingfantastic.com

References

   1. http://www.fakingfantastic.com/feed/
   2. http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/feed/
   3. http://www.fakingfantastic.com/
   4. http://www.fakingfantastic.com/2009/04/13/doctrine-db-models-faster-with-less-headaches/
   5. http://www.fakingfantastic.com/2010/08/15/getting-comfortable-working-with-rails-core/
   6. http://www.fakingfantastic.com/2010/11/13/before-type-cast/
   7. http://www.fakingfantastic.com/
   8. http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/
   9. http://www.fakingfantastic.com/2010/08/15/getting-comfortable-working-with-rails-core/
  10. http://www.yehudakatz.com/
  11. http://yehudakatz.com/2009/11/12/better-ruby-idioms/
  12. http://www.joshpeek.com/
  13. http://digg.com/submit?phase=2&url=http%3A%2F%2Fwww.fakingfantastic.com%2F2010%2F09%2F20%2Fconcerning-yourself-with-active-support-concern%2F&title=Concerning%20Yourself%20with%20ActiveSupport%3A%3AConcern&bodytext=Picking%20up%20on%20our%20last%20talk%20about%20working%20with%20the%20Rails%20core%2C%20I%20wanted%20to%20take%20some%20time%20to%20introduce%20you%20to%20the%20internals%20of%20Rails%203%2C%20in%20hopes%20to%20break%20down%20any%20fears%20about%20hacking%20around%20in%20Rails.%20We%20are%20going%20to%20talk%20today%20about%20ActiveSupport%3A%3ACo
  14. http://delicious.com/post?url=http%3A%2F%2Fwww.fakingfantastic.com%2F2010%2F09%2F20%2Fconcerning-yourself-with-active-support-concern%2F&title=Concerning%20Yourself%20with%20ActiveSupport%3A%3AConcern&notes=Picking%20up%20on%20our%20last%20talk%20about%20working%20with%20the%20Rails%20core%2C%20I%20wanted%20to%20take%20some%20time%20to%20introduce%20you%20to%20the%20internals%20of%20Rails%203%2C%20in%20hopes%20to%20break%20down%20any%20fears%20about%20hacking%20around%20in%20Rails.%20We%20are%20going%20to%20talk%20today%20about%20ActiveSupport%3A%3ACo
  15. http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.fakingfantastic.com%2F2010%2F09%2F20%2Fconcerning-yourself-with-active-support-concern%2F&t=Concerning%20Yourself%20with%20ActiveSupport%3A%3AConcern
  16. http://www.google.com/bookmarks/mark?op=edit&bkmk=http%3A%2F%2Fwww.fakingfantastic.com%2F2010%2F09%2F20%2Fconcerning-yourself-with-active-support-concern%2F&title=Concerning%20Yourself%20with%20ActiveSupport%3A%3AConcern&annotation=Picking%20up%20on%20our%20last%20talk%20about%20working%20with%20the%20Rails%20core%2C%20I%20wanted%20to%20take%20some%20time%20to%20introduce%20you%20to%20the%20internals%20of%20Rails%203%2C%20in%20hopes%20to%20break%20down%20any%20fears%20about%20hacking%20around%20in%20Rails.%20We%20are%20going%20to%20talk%20today%20about%20ActiveSupport%3A%3ACo
  17. http://twitter.com/home?status=Concerning%20Yourself%20with%20ActiveSupport%3A%3AConcern%20-%20http%3A%2F%2Fwww.fakingfantastic.com%2F2010%2F09%2F20%2Fconcerning-yourself-with-active-support-concern%2F
  18. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#respond
  19. http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/trackback/
  20. http://www.fakingfantastic.com/category/uncategorized/
  21. http://aarongodin.com/
  22. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-185
  23. http://www.franklakatos.com/
  24. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-186
  25. http://jaimeiniesta.com/
  26. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-187
  27. http://www.franklakatos.com/
  28. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-188
  29. http://www.deploymentzone.com/
  30. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-191
  31. http://www.franklakatos.com/
  32. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-192
  33. http://giangnd.wordpress.com/
  34. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-213
  35. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-249
  36. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-267
  37. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-332
  38. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml97.data#comment-333
  39. http://www.google.com/support/bin/answer.py?answer=23852
  40. http://twitter.com/fakingfantastic
  41. http://tenderlovemaking.com/
  42. http://www.chadfowler.com/
  43. http://blog.fallingsnow.net/
  44. http://www.igvita.com/
  45. http://techno-weenie.net/
  46. http://www.yehudakatz.com/
  47. http://www.fakingfantastic.com/2013/02/
  48. http://www.fakingfantastic.com/2011/09/
  49. http://www.fakingfantastic.com/2011/08/
  50. http://www.fakingfantastic.com/2011/02/
  51. http://www.fakingfantastic.com/2011/01/
  52. http://www.fakingfantastic.com/2010/11/
  53. http://www.fakingfantastic.com/2010/09/
  54. http://www.fakingfantastic.com/2010/08/
  55. http://www.fakingfantastic.com/2010/07/
  56. http://www.fakingfantastic.com/2010/06/
  57. http://www.fakingfantastic.com/2010/02/
  58. http://www.fakingfantastic.com/2010/01/
  59. http://www.fakingfantastic.com/2009/12/
  60. http://www.fakingfantastic.com/2009/11/
  61. http://www.fakingfantastic.com/2009/10/
  62. http://www.fakingfantastic.com/2009/07/
  63. http://www.fakingfantastic.com/2009/05/
  64. http://www.fakingfantastic.com/2009/04/
  65. http://www.fakingfantastic.com/category/code/
  66. http://www.fakingfantastic.com/category/information/
  67. http://www.fakingfantastic.com/category/lecture/
  68. http://www.fakingfantastic.com/category/uncategorized/
  69. mailto:me@franklakatos.com?subject=FakingFantastic.com
  70. http://www.twitter.com/fakingfantastic
