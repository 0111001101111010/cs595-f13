




&lt;html lang="en"&gt;


&lt;head&gt;
&lt;meta charset="UTF-8"/&gt;
&lt;meta name="viewport" content="width=device-width"/&gt;
&lt;title&gt;Gotcha — Mutable default arguments | Python Conquers The Universe&lt;/title&gt;
&lt;link rel="profile" href="http://gmpg.org/xfn/11"/&gt;
&lt;link rel="stylesheet" type="text/css" media="all" href="https://s2.wp.com/wp-content/themes/pub/twentyeleven/style.css"/&gt;
&lt;link rel="pingback" href="http://pythonconquerstheuniverse.wordpress.com/xmlrpc.php"/&gt;

&lt;meta name="google-site-verification" content="20kUf4sIlFFHFlkLSm4URLm6SsgHOj23db03npkjWnA"/&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Python Conquers The Universe » Feed" href="https://pythonconquerstheuniverse.wordpress.com/feed/"/&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Python Conquers The Universe » Comments Feed" href="https://pythonconquerstheuniverse.wordpress.com/comments/feed/"/&gt;
&lt;link rel="alternate" type="application/rss+xml" title="Python Conquers The Universe » Gotcha — Mutable default arguments Comments Feed" href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/feed/"/&gt;
&lt;script type="text/javascript"&gt;
/*  */
&lt;/script&gt;
&lt;link rel="stylesheet" id="all-css-0" href="https://s1.wp.com/_static/??-eJx1zsEOwiAMgOEXErvpjPFgfJbBKmMrlEiR7O1FPbhk8djm+9NCicpwEAwCPqtI2bqQgNyMCSaU2JtZfaa9SWkHK66J7S9ga3HgLOrORFyguMGibKLVjcipaurdA5IshBsrI/r6RcwapNTFgoRPDF+tSjTs/zVjB5ZY9/QGN39tj+fLqemaQzu9AKhfWf8=" type="text/css" media="all"/&gt;
&lt;script type="text/javascript"&gt;
/*  */
&lt;/script&gt;
&lt;script type="text/javascript" src="https://s2.wp.com/_static/??-eJyFkN0KwjAMRl/IrviDxQvxWbYuK6ltU5vWMZ/eDiYoDnaVkBxy+CLHKDSFDCFLy9JThw5EYUitqTOBYaDG8k5WDoN2pQeeQfsokKalbALCo0lthsZj+MBf1kicPTBX5cr2V4XhiTBuYhZybPVdJGB8/V3tHBkRXTEYWNbeQE8li4Gco1GO2BvIa6E0eT9/JUF00xLm5q/7o1KHs7qok30DqLN9jA=="&gt;&lt;/script&gt;
&lt;link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://pythonconquerstheuniverse.wordpress.com/xmlrpc.php?rsd"/&gt;
&lt;link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://pythonconquerstheuniverse.wordpress.com/wp-includes/wlwmanifest.xml"/&gt; 
&lt;link rel="prev" title="Backing up your email" href="https://pythonconquerstheuniverse.wordpress.com/2012/02/13/backing-up-your-email/"/&gt;
&lt;link rel="next" title="Python’s magic methods" href="https://pythonconquerstheuniverse.wordpress.com/2012/03/09/pythons-magic-methods/"/&gt;
&lt;meta name="generator" content="WordPress.com"/&gt;
&lt;link rel="canonical" href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/"/&gt;
&lt;link rel="shortlink" href="http://wp.me/pCHyo-oU"/&gt;
&lt;link rel="alternate" type="application/json+oembed" href="http://public-api.wordpress.com/oembed/1.0/?format=json&amp;amp;url=https%3A%2F%2Fpythonconquerstheuniverse.wordpress.com%2F2012%2F02%2F15%2Fmutable-default-arguments%2F&amp;amp;for=wpcom-auto-discovery"/&gt;&lt;link rel="alternate" type="application/xml+oembed" href="http://public-api.wordpress.com/oembed/1.0/?format=xml&amp;amp;url=https%3A%2F%2Fpythonconquerstheuniverse.wordpress.com%2F2012%2F02%2F15%2Fmutable-default-arguments%2F&amp;amp;for=wpcom-auto-discovery"/&gt;

&lt;meta property="og:type" content="article"/&gt;
&lt;meta property="og:title" content="Gotcha — Mutable default arguments"/&gt;
&lt;meta property="og:url" content="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/"/&gt;
&lt;meta property="og:description" content="Goto start of series Note: examples are coded in Python 2.x, but the basic point of the post applies to all versions of Python. There's a Python gotcha that bites everybody as they learn Python. In..."/&gt;
&lt;meta property="og:site_name" content="Python Conquers The Universe"/&gt;
&lt;meta name="twitter:site" content="@wordpressdotcom"/&gt;
&lt;meta name="twitter:card" content="summary"/&gt;
&lt;meta name="twitter:creator" content="@wordpressdotcom"/&gt;
&lt;meta property="fb:app_id" content="249643311490"/&gt;
&lt;meta property="article:publisher" content="https://www.facebook.com/WordPresscom"/&gt;
&lt;link rel="shortcut icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48"/&gt;
&lt;link rel="icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48"/&gt;
&lt;link rel="apple-touch-icon-precomposed" href="https://s0.wp.com/i/webclip.png"/&gt;
&lt;link rel="openid.server" href="http://pythonconquerstheuniverse.wordpress.com/?openidserver=1"/&gt;
&lt;link rel="openid.delegate" href="http://pythonconquerstheuniverse.wordpress.com/"/&gt;
&lt;link rel="search" type="application/opensearchdescription+xml" href="https://pythonconquerstheuniverse.wordpress.com/osd.xml" title="Python Conquers The Universe"/&gt;
&lt;link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com"/&gt;
		&lt;style&gt;
		/*  */
		&lt;/style&gt;
		&lt;meta name="application-name" content="Python Conquers The Universe"/&gt;&lt;meta name="msapplication-window" content="width=device-width;height=device-height"/&gt;&lt;meta name="msapplication-tooltip" content="Adventures across space and time with the Python programming language"/&gt;&lt;meta name="msapplication-task" content="name=Subscribe;action-uri=https://pythonconquerstheuniverse.wordpress.com/feed/;icon-uri=https://s2.wp.com/i/favicon.ico"/&gt;&lt;meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s2.wp.com/i/favicon.ico"/&gt;&lt;meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"/&gt;&lt;meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"/&gt;&lt;meta name="title" content="Gotcha — Mutable default arguments | Python Conquers The Universe on WordPress.com"/&gt;
&lt;meta name="description" content="Goto start of series Note: examples are coded in Python 2.x, but the basic point of the post applies to all versions of Python. There's a Python gotcha that bites everybody as they learn Python. In fact, I think it was Tim Peters who suggested that every programmer gets caught by it exactly two times.…"/&gt;

&lt;script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"&gt;
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
if ( typeof GS_googleAddAdSenseService == 'function' ) { GS_googleAddAdSenseService("ca-pub-3443918307802676"); }
if ( typeof GS_googleEnableAllServices == 'function' ) { GS_googleEnableAllServices() };
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
if ( typeof GA_googleAddSlot == 'function' ) { GA_googleAddSlot("ca-pub-3443918307802676", "wpcom_below_post_adsafe"); }
&lt;/script&gt;
&lt;script type="text/javascript"&gt;
if ( typeof GA_googleFetchAds == 'function' ) { GA_googleFetchAds(); }
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
var wpcom_ads = { bid: 9223888, pt: 'permalink', wa: 0, as: 1, domain: 'pythonconquerstheuniverse.wordpress.com', url: 'https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/', gid: '', };
&lt;/script&gt;
&lt;style id="syntaxhighlighteranchor"&gt;&lt;/style&gt;
&lt;script type="text/javascript"&gt; 
	window.google_analytics_uacct = "UA-52447-2"; 
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'wordpress.com']);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
&lt;/script&gt;
&lt;/head&gt;

&lt;body class="single single-post postid-1544 single-format-standard single-author singular two-column right-sidebar mp6 highlander-enabled highlander-light"&gt;
&lt;div id="page" class="hfeed"&gt;
	&lt;header id="branding" role="banner"&gt;
			&lt;hgroup&gt;
				&lt;h1 id="site-title"&gt;&lt;span&gt;<a href="https://pythonconquerstheuniverse.wordpress.com/" title="Python Conquers The Universe">Python Conquers The Universe</a>&lt;/span&gt;&lt;/h1&gt;
				&lt;h2 id="site-description"&gt;Adventures across space and time with the Python programming language&lt;/h2&gt;
			&lt;/hgroup&gt;

						<a href="https://pythonconquerstheuniverse.wordpress.com/">
									&lt;img src="https://pythonconquerstheuniverse.wordpress.com/wp-content/themes/pub/twentyeleven/images/headers/shore.jpg?m=1354160568g" width="1000" height="288" alt=""/&gt;
							</a>
			
								&lt;form method="get" id="searchform" action="https://pythonconquerstheuniverse.wordpress.com/"&gt;
		&lt;label for="s" class="assistive-text"&gt;Search&lt;/label&gt;
		&lt;input type="text" class="field" name="s" id="s" placeholder="Search"/&gt;
		&lt;input type="submit" class="submit" name="submit" id="searchsubmit" value="Search"/&gt;
	&lt;/form&gt;
			
			&lt;nav id="access" role="navigation"&gt;
				&lt;h3 class="assistive-text"&gt;Main menu&lt;/h3&gt;
								&lt;div class="skip-link"&gt;<a href="#content" title="Skip to primary content">Skip to primary content</a>&lt;/div&gt;
				&lt;div class="skip-link"&gt;<a href="#secondary" title="Skip to secondary content">Skip to secondary content</a>&lt;/div&gt;
								&lt;div class="menu"&gt;<ul><li><a href="https://pythonconquerstheuniverse.wordpress.com/" title="Home">Home</a></li></ul>&lt;/div&gt;
			&lt;/nav&gt;
	&lt;/header&gt;


	&lt;div id="main"&gt;

		&lt;div id="primary"&gt;
			&lt;div id="content" role="main"&gt;

				
					&lt;nav id="nav-single"&gt;
						&lt;h3 class="assistive-text"&gt;Post navigation&lt;/h3&gt;
						&lt;span class="nav-previous"&gt;<a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/13/backing-up-your-email/">&lt;span class="meta-nav"&gt;←&lt;/span&gt; Previous</a>&lt;/span&gt;
						&lt;span class="nav-next"&gt;<a href="https://pythonconquerstheuniverse.wordpress.com/2012/03/09/pythons-magic-methods/">Next &lt;span class="meta-nav"&gt;→&lt;/span&gt;</a>&lt;/span&gt;
					&lt;/nav&gt;

					
&lt;article id="post-1544" class="post-1544 post type-post status-publish format-standard hentry category-python-gotchas"&gt;
	&lt;header class="entry-header"&gt;
		&lt;h1 class="entry-title"&gt;Gotcha — Mutable default arguments&lt;/h1&gt;

				&lt;div class="entry-meta"&gt;
						&lt;span class="sep"&gt;Posted on &lt;/span&gt;<a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/" title="3:04 am">&lt;time class="entry-date" datetime="2012-02-15T03:04:24+00:00"&gt;2012/02/15&lt;/time&gt;</a>&lt;span class="by-author"&gt; &lt;span class="sep"&gt; by &lt;/span&gt; &lt;span class="author vcard"&gt;<a href="https://pythonconquerstheuniverse.wordpress.com/author/stephenferg/" title="View all posts by Steve Ferg">Steve Ferg</a>&lt;/span&gt;&lt;/span&gt;		&lt;/div&gt;
			&lt;/header&gt;

	&lt;div class="entry-content"&gt;
		&lt;p&gt;<a href="http://pythonconquerstheuniverse.wordpress.com/2008/06/04/python-gotchas/">Goto start of series</a>&lt;/p&gt;
&lt;p&gt;<em>Note: examples are coded in Python 2.x, but the basic point of the post applies to all versions of Python.</em>&lt;/p&gt;
&lt;p&gt;There’s a Python gotcha that bites everybody as they learn Python. In fact, I think it was Tim Peters who suggested that every programmer gets caught by it exactly two times. It is call the <em>mutable defaults</em> trap. Programmers are usually bit by the mutable defaults trap when coding class methods, but I’d like to begin with explaining it in functions, and then move on to talk about class methods.&lt;/p&gt;
&lt;p&gt;<strong>Mutable defaults for function arguments</strong>&lt;/p&gt;
&lt;p&gt;The gotcha occurs when you are coding default values for the arguments to a function or a method. Here is an example for a function named &lt;tt&gt;foobar&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
def foobar(arg_string = "abc", arg_list = []):
    ...
&lt;/pre&gt;
&lt;p&gt;Here’s what most beginning Python programmers believe will happen when &lt;tt&gt;foobar&lt;/tt&gt; is called without any arguments:&lt;/p&gt;
<blockquote>&lt;p&gt;A new string object containing “abc” will be created and bound to the “arg_string” variable name. A new, empty list object will be created and bound to the “arg_list” variable name. In short, if the arguments are omitted by the caller, the &lt;tt&gt;foobar&lt;/tt&gt; will always get “abc” and [] in its arguments.&lt;/p&gt;</blockquote>
&lt;p&gt;This, however, is <em>not</em> what will happen. Here’s why.&lt;/p&gt;
&lt;p&gt;The objects that provide the default values are not created at the time that &lt;tt&gt;foobar&lt;/tt&gt; is called. They are created <em>at the time that the statement that defines the function is executed</em>. (See the discussion at <a href="http://www.deadlybloodyserious.com/2008/05/default-argument-blunders/">Default arguments in Python: two easy blunders</a>: “Expressions in default arguments are calculated when the function is defined, <em>not</em> when it’s called.”)&lt;/p&gt;
&lt;p&gt;If &lt;tt&gt;foobar&lt;/tt&gt;, for example, is contained in a module named &lt;tt&gt;foo_module&lt;/tt&gt;, then the statement that defines &lt;tt&gt;foobar&lt;/tt&gt; will probably be executed at the time when &lt;tt&gt;foo_module&lt;/tt&gt; is imported.&lt;/p&gt;
&lt;p&gt;When the &lt;tt&gt;def&lt;/tt&gt; statement that creates &lt;tt&gt;foobar&lt;/tt&gt; is executed:&lt;/p&gt;
<ul>
<li>A new function object is created, bound to the name &lt;tt&gt;foobar&lt;/tt&gt;, and stored in the namespace of &lt;tt&gt;foo_module&lt;/tt&gt;.</li>
<li>Within the &lt;tt&gt;foobar&lt;/tt&gt; function object, for each argument with a default value, an object is created to hold the default object. In the case of &lt;tt&gt;foobar&lt;/tt&gt;, a string object containing “abc” is created as the default for the &lt;tt&gt;arg_string&lt;/tt&gt; argument, and an empty list object is ccreated as the default for the &lt;tt&gt;arg_list&lt;/tt&gt; argument.</li>
</ul>
&lt;p&gt;After that, whenever &lt;tt&gt;foobar&lt;/tt&gt; is called without arguments, &lt;tt&gt;arg_string&lt;/tt&gt; will be bound to the default string object, and arg_list will be bound to the default list object. In such a case, &lt;tt&gt;arg_string&lt;/tt&gt; will always be “abc”, but &lt;tt&gt;arg_list&lt;/tt&gt; may or may not be an empty list. Here’s why.&lt;/p&gt;
&lt;p&gt;There is a crucial difference between a string object and a list object. A string object is immutable, whereas a list object is mutable. That means that the default for &lt;tt&gt;arg_string&lt;/tt&gt; can never be changed, but the default for &lt;tt&gt;arg_list&lt;/tt&gt; can be changed.&lt;/p&gt;
&lt;p&gt;Let’s see how the default for arg_list can be changed. Here is a program. It invokes &lt;tt&gt;foobar&lt;/tt&gt; four times. Each time that &lt;tt&gt;foobar&lt;/tt&gt; is invoked it displays the values of the arguments that it receives, then adds something to each of the arguments.&lt;/p&gt;
&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
def foobar(arg_string="abc", arg_list = []): 
    print arg_string, arg_list 
    arg_string = arg_string + "xyz" 
    arg_list.append("F")

for i in range(4): 
    foobar()
&lt;/pre&gt;
&lt;p&gt;The output of this program is:&lt;/p&gt;
&lt;pre class="brush: plain; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
abc [] 
abc ['F'] 
abc ['F', 'F'] 
abc ['F', 'F', 'F']
&lt;/pre&gt;
&lt;p&gt;As you can see, the first time through, the argument have exactly the default that we expect. On the second and all subsequent passes, the arg_string value remains unchanged — just what we would expect from an immutable object. The line&lt;/p&gt;
&lt;pre class="brush: plain; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
arg_string = arg_string + "xyz"&lt;/pre&gt;
&lt;p&gt;creates a new object — the string “abcxyz” — and binds the name “arg_string” to that new object, but it doesn’t change the default object for the &lt;tt&gt;arg_string&lt;/tt&gt; argument.&lt;/p&gt;
&lt;p&gt;But the case is quite different with arg_list, whose value is a list — a mutable object. On each pass, we append a member to the list, and the list grows. On the fourth invocation of &lt;tt&gt;foobar&lt;/tt&gt; — that is, after three earlier invocations — &lt;tt&gt;arg_list&lt;/tt&gt; contains three members.&lt;/p&gt;
&lt;p&gt;<strong>The Solution</strong>&lt;br/&gt;
This behavior is not a wart in the Python language. It really is a feature, not a bug. There are times when you really do want to use mutable default arguments. One thing they can do (for example) is retain a list of results from previous invocations, something that might be very handy.&lt;/p&gt;
&lt;p&gt;But for most programmers — especially beginning Pythonistas — this behavior is a gotcha. So for most cases we adopt the following rules.&lt;/p&gt;
<ol>
<li>Never use a mutable object — that is: a list, a dictionary, or a class instance — as the default value of an argument.</li>
<li>Ignore rule 1 only if you really, <em>really</em>, <em>&lt;span style="text-decoration:underline;"&gt;REALLY&lt;/span&gt;</em> know what you’re doing.</li>
</ol>
&lt;p&gt;So… we plan always to follow rule #1. Now, the question is <em>how</em> to do it… how to code &lt;tt&gt;foobar&lt;/tt&gt; in order to get the behavior that we want.&lt;/p&gt;
&lt;p&gt;Fortunately, the solution is straightforward. The mutable objects used as defaults are replaced by None, and then the arguments are tested for None.&lt;/p&gt;
&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
def foobar(arg_string="abc", arg_list = None): 
    if arg_list is None: arg_list = [] 
    ...
&lt;/pre&gt;
&lt;p&gt;Another solution that you will sometimes see is this:&lt;/p&gt;
&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
def foobar(arg_string="abc", arg_list=None): 
    arg_list = arg_list or [] 
    ...
&lt;/pre&gt;
&lt;p&gt;This solution, however, is <em>not</em> equivalent to the first, and should be avoided. See <em>Learning Python</em> p. 123 for a discussion of the differences. <em>Thanks to Lloyd Kvam for pointing this out to me.</em>&lt;/p&gt;
&lt;p&gt;And of course, in some situations the best solution is simply not to supply a default for the argument.&lt;/p&gt;
&lt;p&gt;<strong>Mutable defaults for method arguments</strong>&lt;/p&gt;
&lt;p&gt;Now let’s look at how the mutable arguments gotcha presents itself when a class method is given a mutable default for one of its arguments. Here is a complete program.&lt;/p&gt;
&lt;pre class="brush: python; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
# (1) define a class for company employees 
class Employee:
    def __init__ (self, arg_name, arg_dependents=[]): 
        # an employee has two attributes: a name, and a list of his dependents 
        self.name = arg_name 
        self.dependents = arg_dependents
    
    def addDependent(self, arg_name): 
        # an employee can add a dependent by getting married or having a baby 
        self.dependents.append(arg_name)
    
    def show(self): 
        print
        print "My name is.......: ", self.name 
        print "My dependents are: ", str(self.dependents)
#--------------------------------------------------- 
#   main routine -- hire employees for the company 
#---------------------------------------------------

# (2) hire a married employee, with dependents 
joe = Employee("Joe Smith", ["Sarah Smith", "Suzy Smith"])

# (3) hire a couple of unmarried employess, without dependents 
mike = Employee("Michael Nesmith") 
barb = Employee("Barbara Bush")

# (4) mike gets married and acquires a dependent 
mike.addDependent("Nancy Nesmith")

# (5) now have our employees tell us about themselves 
joe.show() 
mike.show() 
barb.show()
&lt;/pre&gt;
&lt;p&gt;Let’s look at what happens when this program is run. &lt;/p&gt;
<ol>
<li>First, the code that defines the &lt;tt&gt;Employee&lt;/tt&gt; class is run.</li>
<li>Then we hire Joe. Joe has two dependents, so that fact is recorded at the time that the &lt;tt&gt;joe&lt;/tt&gt; object is created.</li>
<li>Next we hire Mike and Barb. </li>
<li>Then Mike acquires a dependent.</li>
<li>Finally, the last three statements of the program ask each employee to tell us about himself.</li>
</ol>
&lt;p&gt;Here is the result.&lt;/p&gt;
<blockquote>&lt;pre class="brush: plain; collapse: false; title: ; wrap-lines: false; notranslate" title=""&gt;
My name is.......:  Joe Smith 
My dependents are:  ['Sarah Smith', 'Suzy Smith']

My name is.......:  Michael Nesmith 
My dependents are:  ['Nancy Nesmith']

My name is.......:  Barbara Bush 
My dependents are:  ['Nancy Nesmith']
&lt;/pre&gt;
</blockquote>
&lt;p&gt;Joe is just fine. But somehow, when Mike acquired Nancy as his dependent, Barb <em>also</em> acquired Nancy as a dependent. This of course is wrong. And we’re now in a position to understand what is causing the program to behave this way.&lt;/p&gt;
&lt;p&gt;When the code that defines the &lt;tt&gt;Employee&lt;/tt&gt; class is run, objects for the class definition, the method definitions, and the default values for each argument are created. The constructor has an argument &lt;tt&gt;arg_dependents&lt;/tt&gt; whose default value is an empty list, so an empty list object is created and attached to the &lt;tt&gt;__init__&lt;/tt&gt; method as the default value for &lt;tt&gt;arg_dependents&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When we hire Joe, he already has a list of dependents, which is passed in to the Employee constructor — so the &lt;tt&gt;arg_dependents&lt;/tt&gt; attribute does not use the default empty list object.&lt;/p&gt;
&lt;p&gt;Next we hire Mike and Barb. Since they have no dependents, the default value for &lt;tt&gt;arg_dependents&lt;/tt&gt; is used. Remember — this is the empty list object that was created when the code that defined the &lt;tt&gt;Employee&lt;/tt&gt; class was run. So in both cases, the empty list is bound to the &lt;tt&gt;arg_dependents&lt;/tt&gt; argument, and then — again in both cases — it is bound to the &lt;tt&gt;self.dependents&lt;/tt&gt; attribute. The result is that after Mike and Barb are hired, the &lt;tt&gt;self.dependents&lt;/tt&gt; attribute of <em>both</em> Mike and Barb <em>point to the same object</em> — the default empty list object.&lt;/p&gt;
&lt;p&gt;When Michael gets married, and Nancy Nesmith is added to his &lt;tt&gt;self.dependents&lt;/tt&gt; list, Barb also acquires Nancy as a dependent, because Barb’s &lt;tt&gt;self.dependents&lt;/tt&gt; variable name is bound to the same list object as Mike’s &lt;tt&gt;self.dependents&lt;/tt&gt; variable name.&lt;/p&gt;
&lt;p&gt;So this is what happens when mutuable objects are used as defaults for arguments in class methods. If the defaults are used when the method is called, <em>different class instances end up sharing references to the same object.</em>&lt;/p&gt;
&lt;p&gt;And <em>that</em> is why you should never, <em>never</em>, <strong><em>&lt;span style="text-decoration:underline;"&gt;NEVER&lt;/span&gt;</em></strong> use a list or a dictionary as a default value for an argument to a class method. Unless, of course, you really, <em>really</em>, <strong><em>&lt;span style="text-decoration:underline;"&gt;REALLY&lt;/span&gt;</em></strong> know what you’re doing.&lt;/p&gt;

&lt;div class="wpa" style="position: relative; width:300px; text-align: center; padding: 0; margin: 10px auto; overflow: hidden; clear: both;"&gt;
<a href="http://en.wordpress.com/about-these-ads/">About these ads</a>
&lt;script type="text/javascript"&gt;
		var wpcom_adclk_hovering = false;
		var wpcom_adclk_recorded = false;
		var wpcom_adclk_theme = "Twenty Eleven";
		var wpcom_adclk_slot = "wpcom_below_post_adsafe";
		var wpcom_adclk_network = ( typeof wpcom_adclk_network === "undefined" ) ? "" : wpcom_adclk_network ;

		jQuery(document).ready( function() {
			function wpcom_adclk_hover_yes() { wpcom_adclk_hovering = true; }
			function wpcom_adclk_hover_no() { wpcom_adclk_hovering = false; }
			jQuery(".wpa").click(wpcom_adclk_click);
			jQuery(".wpa iframe").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );
			jQuery(".wpa object").hover( wpcom_adclk_hover_yes, wpcom_adclk_hover_no );

			jQuery(window).blur( function() {
				if ( wpcom_adclk_hovering ) { wpcom_adclk_click(); }
			});
		});

		function wpcom_adclk_impression() {
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&amp;x_ads_imp_theme=" + wpcom_adclk_theme;
			stat_gif += "&amp;x_ads_imp_placement="+wpcom_adclk_slot;
			stat_gif += "&amp;x_ads_imp_network=" + wpcom_adclk_network;
			stat_gif += "&amp;x_ads_imp_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;
			new Image().src = stat_gif + "&amp;baba=" + Math.random();
			return true;
		}

		function wpcom_adclk_click() {
			if (wpcom_adclk_recorded) { return true; } // no double counting
			var stat_gif = document.location.protocol + "//stats.wordpress.com/g.gif?v=wpcom-no-pv";
			stat_gif += "&amp;x_ads_click_theme=" + wpcom_adclk_theme;
			stat_gif += "&amp;x_ads_click_placement="+wpcom_adclk_slot;
			stat_gif += "&amp;x_ads_click_network=" + wpcom_adclk_network;
			stat_gif += "&amp;x_ads_click_theme_network="+wpcom_adclk_theme+"_"+wpcom_adclk_network;

			new Image().src = stat_gif + "&amp;baba=" + Math.random();
			wpcom_adclk_recorded = true;
			var now=new Date(); var end=now.getTime()+250;
			while(true){now=new Date();if(now.getTime()&gt;end){break;}}
			return true;
		}
	
if ( typeof GA_googleAddAttr == 'function' ) {
GA_googleAddAttr("AdOpt", "1");
GA_googleAddAttr("Origin", "other");
GA_googleAddAttr("LangId", "1");
GA_googleAddAttr("Domain", "pythonconquerstheuniverse.wordpress.com");
GA_googleAddAttr("BlogId", "9223888");
GA_googleAddAttr("AdSafe", "1");
GA_googleAddAttr("Autotag", "technology");
GA_googleAddAttr("Autotag", "science");
GA_googleAddAttr("Autotag", "entertainment");
GA_googleAddAttr("Tag", "python-gotchas");
GA_googleAddAttr("Partner", "AOL");
GA_googleAddAttr("theme_bg", "ffffff");
GA_googleAddAttr("theme_border", "dddddd");
GA_googleAddAttr("theme_text", "333333");
GA_googleAddAttr("theme_link", "1bafe0");
GA_googleAddAttr("theme_url", "1bafe0");
GA_googleAddAdSensePageAttr("google_page_url", "https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/");
GA_googleFillSlot("wpcom_below_post_adsafe");
}
&lt;/script&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
div.wpa&gt;div { margin-top: 1em; } #google_ads_div_wpcom_below_post_adsafe_ad_container { display: block !important; }
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
jQuery( window ).load( function() {
    if ( jQuery(".wpa script[src*='shareth.ru']").length &gt; 0 || jQuery(".wpa iframe[src*='boomvideo.tv']").length &gt; 0 || jQuery(".wpa iframe[src*='viewablemedia.net']").length &gt; 0 || jQuery(".wpa .sharethrough-placement").length &gt; 0 ) {
        jQuery( '.wpa' ).css( 'width', '400px' );
    }
setTimeout(function(){if(typeof GS_googleAddAdSenseService !== 'function'){new Image().src=document.location.protocol+"//stats.wordpress.com/g.gif?v=wpcom-no-pv&amp;x_noads=adblock&amp;baba="+Math.random()}},100);
} );
&lt;/script&gt;
&lt;div id="jp-post-flair" class="sharedaddy sd-like-enabled"&gt;&lt;div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-9223888-1544-524b87ab9453d" data-src="//widgets.wp.com/likes/#blog_id=9223888&amp;amp;post_id=1544&amp;amp;origin=pythonconquerstheuniverse.wordpress.com&amp;amp;obj_id=9223888-1544-524b87ab9453d" data-name="like-post-frame-9223888-1544-524b87ab9453d"&gt;&lt;h3 class="sd-title"&gt;Like this:&lt;/h3&gt;&lt;div class="post-likes-widget-placeholder" style="height:55px"&gt;&lt;span class="button"&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class="loading"&gt;Loading...&lt;/span&gt;&lt;/div&gt;&lt;span class="sd-text-color"&gt;&lt;/span&gt;<a></a>&lt;/div&gt;&lt;/div&gt;			&lt;/div&gt;

	&lt;footer class="entry-meta"&gt;
		This entry was posted in <a href="https://pythonconquerstheuniverse.wordpress.com/category/python-gotchas/" title="View all posts in Python gotchas">Python gotchas</a> by <a href="https://pythonconquerstheuniverse.wordpress.com/author/stephenferg/">Steve Ferg</a>. Bookmark the <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/" title="Permalink to Gotcha — Mutable default arguments">permalink</a>.		
			&lt;/footer&gt;
&lt;/article&gt;

						&lt;div id="comments"&gt;
	
	
			&lt;h2 id="comments-title"&gt;
			6 thoughts on “&lt;span&gt;Gotcha — Mutable default arguments&lt;/span&gt;”		&lt;/h2&gt;

		
		<ol>
				<li>
		&lt;article id="comment-1385" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://2.gravatar.com/avatar/e451fec41747a331360506e29bf0e321?s=68&amp;amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fmu.gif&amp;amp;r=G" class="avatar avatar-68" height="68" width="68"/&gt;&lt;span class="fn"&gt;TheBlackCat&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1385">&lt;time datetime="2012-03-18T05:08:18+00:00"&gt;2012/03/18 at 5:08 am&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;I’ve been bitten by this before.  I know my opinion is not liked by many, but I think that anything that makes it easier to do uncommon, advanced tasks while making it harder to do common, simple tasks is a bug, not a feature.  Same for something that makes life significantly harder for beginning users (and even many advanced users) while making it slightly easier for advanced users is a bug, not a feature.  &lt;/p&gt;
&lt;p&gt;Python’s object-oriented programming features already provide clear, consistent ways to handle data persistence between function calls when it is needed.  &lt;/p&gt;
&lt;p&gt;I understand the technical reasons why it is this way, but from a practical standpoint I can’t agree with it.  It makes ordinary usage of python difficult, trips up even advanced python users, and there are much better and clearer ways to accomplish what it accomplishes.  &lt;/p&gt;
&lt;p&gt;The fact that this has to be explained to new pretty much every new python user, and explained over and over again, I think is a strong argument that it is very counter-intuitive and thus shouldn’t be there.&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	</li>
	<li>
		&lt;article id="comment-1387" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://0.gravatar.com/avatar/0d235d4094b8dbf2cd9932667d828795?s=68&amp;amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fmu.gif&amp;amp;r=G" class="avatar avatar-68" height="68" width="68"/&gt;&lt;span class="fn"&gt;<a href="http://pyrseas.wordpress.com">jma</a>&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1387">&lt;time datetime="2012-03-18T12:13:09+00:00"&gt;2012/03/18 at 12:13 pm&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;The assigments in line 5 of class Employee need to be broken in two lines.&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	<ul>
	<li>
		&lt;article id="comment-1389" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://2.gravatar.com/avatar/ba3bd1b3d3ba79b1595052ca2f14eb2b?s=39&amp;amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fmu.gif&amp;amp;r=G" class="avatar avatar-39" height="39" width="39"/&gt;&lt;span class="fn"&gt;Steve Ferg&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1389">&lt;time datetime="2012-03-18T14:28:21+00:00"&gt;2012/03/18 at 2:28 pm&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;It is fixed now.  Thanks!&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	</li>
</ul>
</li>
	<li>
		&lt;article id="comment-1393" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://2.gravatar.com/avatar/8a396819f82f8370aea760d367d78a13?s=68&amp;amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fmu.gif&amp;amp;r=G" class="avatar avatar-68" height="68" width="68"/&gt;&lt;span class="fn"&gt;<a href="http://catchxxtwo.wordpress.com">whitney</a>&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1393">&lt;time datetime="2012-03-19T04:09:11+00:00"&gt;2012/03/19 at 4:09 am&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;Fortunately, I have yet to be bitten by this, but still a very interesting post. Thanks for saving me from a future “doh!” moment.&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	</li>
	<li>
		&lt;article id="comment-1414" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://2.gravatar.com/avatar/564a0584abc7ba08b616f239aea8eec8?s=68&amp;amp;d=https%3A%2F%2Fs0.wp.com%2Fi%2Fmu.gif&amp;amp;r=G" class="avatar avatar-68" height="68" width="68"/&gt;&lt;span class="fn"&gt;gregjallen&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1414">&lt;time datetime="2012-03-22T21:12:04+00:00"&gt;2012/03/22 at 9:12 pm&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;Surely the real lesson is that we’re not smart enough to remember all the little gotcha’s like this. You really need a code checker like pylint running in your IDE to nag you about this many variations.&lt;/p&gt;
&lt;p&gt;Ideally integrate it into your continuous build system and have the build fail if this gotchas are found.&lt;/p&gt;
&lt;p&gt;PS. () can be used as an default immutable empty set or dictionary in most cases if you use a little care.&lt;/p&gt;
&lt;p&gt;If you need to mutate write:&lt;/p&gt;
&lt;p&gt;def func(lookups=()):&lt;br/&gt;
  lookups = dict(lookups)&lt;/p&gt;
&lt;p&gt;and I didn’t even need a conditional statement. Conditional statements are evil – every one you write doubles the number of unit tests you need to write.&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	</li>
	<li>
		&lt;article id="comment-1625" class="comment"&gt;
			&lt;footer class="comment-meta"&gt;
				&lt;div class="comment-author vcard"&gt;
					&lt;img alt="" src="https://i0.wp.com/graph.facebook.com/606176793/picture?q=type%3Dlarge%26_md5%3D3be72fe2e04f85871e40e5a4458b82b4&amp;amp;resize=68%2C68" class="avatar avatar-68" height="68" width="68"/&gt;&lt;span class="fn"&gt;<a href="http://www.facebook.com/mentrelli">Andrea Mentrelli</a>&lt;/span&gt; on <a href="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/#comment-1625">&lt;time datetime="2012-05-25T05:37:23+00:00"&gt;2012/05/25 at 5:37 am&lt;/time&gt;</a> &lt;span class="says"&gt;said:&lt;/span&gt;
									&lt;/div&gt;

				
			&lt;/footer&gt;

			&lt;div class="comment-content"&gt;&lt;p&gt;Hi. I think that the gotcha can be easily explained just keeping in mind two things:&lt;/p&gt;
&lt;p&gt;1) As it is correctly pointed out: “The objects that provide the default values are not created at the time that foobar is called. They are created at the time that the statement that defines the function is executed.”&lt;/p&gt;
&lt;p&gt;2) The statement   ‘ arg_string = arg_string + “xyz” ‘ *is* an assignment. As such, after the assignment, the objct “abc” is still there, but arg_string refers to a different object (“abcxyz”). Next time the function is called, arg_string will refer again to the default object “abc”, and so on.&lt;br/&gt;
The statement ‘ arg_list.append(“F”) ‘, instead, *is not* an assignement, of course. It is a method call. As such, it changes the content of a (mutable) object. arg_list always refer to the same (mutable) object.&lt;/p&gt;
&lt;p&gt;In other words: arg_string refers to two different (immutable) objects before/after the assignment.&lt;br/&gt;
arg_list, instead, always refers to the same object (which changes in time).&lt;/p&gt;
&lt;p&gt;But the key point is not the fact the one object is immutable (the string) and the other is mutable (the list).&lt;br/&gt;
If you substitute the method call with an assignement (e.g. you put ” arg_list = ['F'] ” ), than the behaviour of the string and the list are the same – this proves that the mutable/immutable nature of the objects in not the key point this context. The key point is that the first statement is an assignment, and the second is not.&lt;/p&gt;
&lt;/div&gt;

			&lt;div class="reply"&gt;
							&lt;/div&gt;
		&lt;/article&gt;

	</li>
		</ol>

		
				&lt;p class="nocomments"&gt;Comments are closed.&lt;/p&gt;
		
	
									
&lt;/div&gt;

				
			&lt;/div&gt;
		&lt;/div&gt;


	&lt;/div&gt;

	&lt;footer id="colophon" role="contentinfo"&gt;

			

			&lt;div id="site-generator"&gt;
				<a href="http://theme.wordpress.com/themes/twentyeleven/" title="Learn more about this theme">The Twenty Eleven Theme</a>. &lt;span class="sep"&gt; | &lt;/span&gt;				<a href="http://wordpress.com/?ref=footer">Blog at WordPress.com</a>.
			&lt;/div&gt;
	&lt;/footer&gt;
&lt;/div&gt;


&lt;script type="text/javascript"&gt;
var _qevents = _qevents || [], wpcomQuantcastData = {"qacct":"p-18-mFEk4J448M","labels":",language.en,type.wpcom,as"};
function wpcomQuantcastPixel( labels, options ) {
	var i, defaults = wpcomQuantcastData, data = { event: 'ajax' };

	labels  = labels  || '';
	options = options || {};

	if ( typeof labels != 'string' )
		options = labels;

	for ( i in defaults ) {
		data[i] = defaults[i];
	}

	for ( i in options ) {
		data[i] = options[i];
	}

	if ( data.labels ) {
		data.labels += ',' + labels;
	} else {
		data.labels = labels;
	}

	_qevents.push( data );
};
(function() {var elem = document.createElement('script');elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";elem.async = true;elem.type = "text/javascript";var scpt = document.getElementsByTagName('script')[0];scpt.parentNode.insertBefore(elem, scpt);  })();
_qevents.push( wpcomQuantcastData );
&lt;/script&gt;
&lt;noscript&gt;&lt;div style="display: none;"&gt;&lt;img src="//pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=%2Clanguage.en%2Ctype.wpcom%2Cas" height="1" width="1" alt=""/&gt;&lt;/div&gt;&lt;/noscript&gt;

&lt;script type="text/javascript" src="//0.gravatar.com/js/gprofiles.js?ver=201340ae"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
/*  */
&lt;/script&gt;
&lt;script type="text/javascript" src="https://s2.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781g"&gt;&lt;/script&gt;

	&lt;script&gt;
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {
			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	&lt;/script&gt;

		&lt;div style="display:none"&gt;
	&lt;div class="grofile-hash-map-e451fec41747a331360506e29bf0e321"&gt;
	&lt;/div&gt;
	&lt;div class="grofile-hash-map-0d235d4094b8dbf2cd9932667d828795"&gt;
	&lt;/div&gt;
	&lt;div class="grofile-hash-map-ba3bd1b3d3ba79b1595052ca2f14eb2b"&gt;
	&lt;/div&gt;
	&lt;div class="grofile-hash-map-8a396819f82f8370aea760d367d78a13"&gt;
	&lt;/div&gt;
	&lt;div class="grofile-hash-map-564a0584abc7ba08b616f239aea8eec8"&gt;
	&lt;/div&gt;
	&lt;div class="grofile-hash-map-ea9b84556f5fbbd2e49f4586c0727ff6"&gt;
	&lt;/div&gt;
	&lt;/div&gt;

	&lt;div id="bit" class="loggedout-follow-normal"&gt;
		<a>&lt;span id="bsub-text"&gt;Follow&lt;/span&gt;</a>
		&lt;div id="bitsubscribe"&gt;

					&lt;h3&gt;&lt;label for="loggedout-follow-field"&gt;Follow “Python Conquers The Universe”&lt;/label&gt;&lt;/h3&gt;

			&lt;form action="https://subscribe.wordpress.com" method="post" accept-charset="utf-8" id="loggedout-follow"&gt;
			&lt;p&gt;Get every new post delivered to your Inbox.&lt;/p&gt;

			&lt;p id="loggedout-follow-error" style="display: none;"&gt;&lt;/p&gt;

						&lt;p class="bit-follow-count"&gt;Join 151 other followers&lt;/p&gt;
			&lt;p&gt;&lt;input type="email" name="email" style="width: 95%; padding: 1px 2px" value="Enter your email address" onfocus="this.value=(this.value=="Enter your email address") ? "" : this.value;" onblur="this.value=(this.value=="") ? "Enter email address" : this.value;" id="loggedout-follow-field"/&gt;&lt;/p&gt;

			&lt;input type="hidden" name="action" value="subscribe"/&gt;
			&lt;input type="hidden" name="blog_id" value="9223888"/&gt;
			&lt;input type="hidden" name="source" value="https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/"/&gt;
			&lt;input type="hidden" name="sub-type" value="loggedout-follow"/&gt;

			&lt;input type="hidden" id="_wpnonce" name="_wpnonce" value="0713506840"/&gt;&lt;input type="hidden" name="_wp_http_referer" value="/2012/02/15/mutable-default-arguments/"/&gt;
			&lt;p id="bsub-subscribe-button"&gt;&lt;input type="submit" value="Sign me up"/&gt;&lt;/p&gt;
			&lt;/form&gt;
					&lt;div id="bsub-credit"&gt;<a href="http://wordpress.com/signup/?ref=lof">Powered by WordPress.com</a>&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
		&lt;script type="text/javascript"&gt;
		//
		&lt;/script&gt;		&lt;iframe src="https://widgets.wp.com/likes/master.html?ver=20130620a#ver=20130620a&amp;amp;mp6=1" scrolling="no" id="likes-master" name="likes-master" style="display:none;"&gt;&lt;/iframe&gt;
		&lt;div id="likes-other-gravatars"&gt;&lt;div class="likes-text"&gt;&lt;span&gt;%d&lt;/span&gt; bloggers like this:&lt;/div&gt;<ul></ul>&lt;/div&gt;
		&lt;script type="text/javascript"&gt;
		// 0 ) {
							JetpackLikespostMessage( { event: 'adminBarEnabled' }, window.frames[ 'likes-master' ] );

							stylesData.adminBarStyles = {
								background: jQuery( '#wpadminbar .quicklinks li#wp-admin-bar-wpl-like &gt; a' ).css( 'background' )
							};
						}

						if ( !window.addEventListener )
							jQuery( '#wp-admin-bar-admin-bar-likes-widget' ).hide();

						stylesData.textStyles = {
							color: jQuery( '.sd-text-color').css( 'color' ),
							fontFamily: jQuery( '.sd-text-color' ).css( 'font-family' ),
							fontSize: jQuery( '.sd-text-color' ).css( 'font-size' ),
							direction: jQuery( '.sd-text-color' ).css( 'direction' ),
							fontWeight: jQuery( '.sd-text-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-text-color' ).css( 'font-style' ),
							textDecoration: jQuery( '.sd-text-color' ).css('text-decoration')
						};

						stylesData.linkStyles = {
							color: jQuery( '.sd-link-color' ).css('color'),
							fontFamily: jQuery( '.sd-link-color' ).css('font-family'),
							fontSize: jQuery( '.sd-link-color' ).css('font-size'),
							textDecoration: jQuery( '.sd-link-color' ).css('text-decoration'),
							fontWeight: jQuery( '.sd-link-color' ).css( 'font-weight' ),
							fontStyle: jQuery( '.sd-link-color' ).css( 'font-style' )
						};

						JetpackLikespostMessage( stylesData, window.frames[ 'likes-master' ] );

						var requests = [];
						jQuery( '.jetpack-likes-widget-wrapper' ).each( function( i ) {
							var regex = /like-(post|comment)-wrapper-(\d+)-(\d+)-(\w+)/;
							var match = regex.exec( this.id );
							if ( ! match || match.length != 5 )
								return;

							var info = {
								blog_id: match[2],
								width:   this.width
							};

							if ( 'post' == match[1] ) {
								info.post_id = match[3];
							} else if ( 'comment' == match[1] ) {
								info.comment_id = match[3];
							}

							info.obj_id = match[4];

							requests.push( info );
						});

						JetpackLikespostMessage( { event: 'initialBatch', requests: requests }, window.frames['likes-master'] );

						jQuery( document ).on( 'inview', 'div.jetpack-likes-widget-unloaded', function() {
							jetpackLikesWidgetQueue.push( this.id );
						});
					});
				}

				if ( 'showLikeWidget' == event.event ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 10 );
					jQuery( '#' + event.id + ' .post-likes-widget-placeholder'  ).fadeOut( 'fast', function() {
						jQuery( '#' + event.id + ' .post-likes-widget' ).fadeIn( 'fast', function() {
							JetpackLikespostMessage( { event: 'likeWidgetDisplayed', blog_id: event.blog_id, post_id: event.post_id, obj_id: event.obj_id }, window.frames['likes-master'] );
						});
					});
				}

				if ( 'showOtherGravatars' == event.event ) {
					var $container = jQuery( '#likes-other-gravatars' );
					var $list = $container.find( 'ul' );

					$container.hide();
					$list.html( '' );

					$container.find( '.likes-text span' ).text( event.total );

					jQuery.each( event.likers, function( i, liker ) {
						$list.append( '<li><a href="' + liker.profile_URL + '">&lt;img src="' + liker.avatar_URL + '" alt="' + liker.name + '" width="30" height="30" style="padding-right: 3px;"/&gt;</a></li>');
					} );

					var offset = jQuery( "[name='" + event.parent + "']" ).offset();

					$container.css( 'left', offset.left + event.position.left - 10 + 'px' );
					$container.css( 'top', offset.top + event.position.top - 33 + 'px' );

					var rowLength = Math.floor( event.width / 37 );
					var height = ( Math.ceil( event.likers.length / rowLength ) * 37 ) + 13;
					if ( height &gt; 204 ) {
						height = 204;
					}

					$container.css( 'height', height + 'px' );
					$container.css( 'width', rowLength * 37 - 7 + 'px' );

					$list.css( 'width', rowLength * 37 + 'px' );

					$container.fadeIn( 'slow' );

					var scrollbarWidth = $list[0].offsetWidth - $list[0].clientWidth;
					if ( scrollbarWidth &gt; 0 ) {
						$container.width( $container.width() + scrollbarWidth );
						$list.width( $list.width() + scrollbarWidth );
					}
				}
			}

			pm.bind( 'likesMessage', function(e) { JetpackLikesMessageListener(e); } );

			jQuery( document ).click( function( e ) {
				var $container = jQuery( '#likes-other-gravatars' );

				if ( $container.has( e.target ).length === 0 ) {
					$container.fadeOut( 'slow' );
				}
			});

			function JetpackLikesWidgetQueueHandler() {
				var wrapperID;
				if ( ! jetpackLikesMasterReady ) {
					setTimeout( JetpackLikesWidgetQueueHandler, 500 );
					return;
				}

				if ( jetpackLikesWidgetQueue.length &gt; 0 ) {
					// We may have a widget that needs creating now
					var found = false;
					while( jetpackLikesWidgetQueue.length &gt; 0 ) {
						// Grab the first member of the queue that isn't already loading.
						wrapperID = jetpackLikesWidgetQueue.splice( 0, 1 )[0];
						if ( jQuery( '#' + wrapperID ).hasClass( 'jetpack-likes-widget-unloaded' ) ) {
							found = true;
							break;
						}
					}
					if ( ! found ) {
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				} else if ( jQuery( 'div.jetpack-likes-widget-unloaded' ).length &gt; 0 ) {
					// Get the next unloaded widget
					wrapperID = jQuery( 'div.jetpack-likes-widget-unloaded' ).first()[0].id;
					if ( ! wrapperID ) {
						// Everything is currently loaded
						setTimeout( JetpackLikesWidgetQueueHandler, 500 );
						return;
					}
				}

				var $wrapper = jQuery( '#' + wrapperID );
				$wrapper.find( 'iframe' ).remove();

				if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "&lt;iframe class="post-likes-widget jetpack-likes-widget" name="" + $wrapper.data( " name'="" )="" +="" "'="" height="22px" width="68px" frameborder="0" scrolling="no" src="" + $wrapper.data( " src'="" )="" +="" "'=""&gt;&lt;/iframe&gt;" );
				} else {
					$wrapper.find( '.post-likes-widget-placeholder' ).after( "&lt;iframe class="post-likes-widget jetpack-likes-widget" name="" + $wrapper.data( " name'="" )="" +="" "'="" height="55px" width="100%" frameborder="0" src="" + $wrapper.data( " src'="" )="" +="" "'=""&gt;&lt;/iframe&gt;" );
				}

				$wrapper.removeClass( 'jetpack-likes-widget-unloaded' ).addClass( 'jetpack-likes-widget-loading' );

				$wrapper.find( 'iframe' ).load( function( e ) {
					var $iframe = jQuery( e.target );
					$wrapper.removeClass( 'jetpack-likes-widget-loading' ).addClass( 'jetpack-likes-widget-loaded' );

					JetpackLikespostMessage( { event: 'loadLikeWidget', name: $iframe.attr( 'name' ), width: $iframe.width() }, window.frames[ 'likes-master' ] );

					if ( $wrapper.hasClass( 'slim-likes-widget' ) ) {
						$wrapper.find( 'iframe' ).Jetpack( 'resizeable' );
					}
				});
				setTimeout( JetpackLikesWidgetQueueHandler, 250 );
			}
			JetpackLikesWidgetQueueHandler();
		//]]&gt;
		&lt;/script&gt;
&lt;script type="text/javascript" src="https://s0.wp.com/_static/??-eJzTLy/QTc7PK0nNK9EvyClNz8wr1i+uzCtJrMjITM/IAeKS1CJMEWP94uSizIISoOIM5/yiVL2sYh19yo1yKiotzgioLMnIz6OqiTmJmSAD7XNtDY3NjI0NTEwMTbIAsbxg2A=="&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.83c";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?m=1363304414g&amp;ver=3.0.83c";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
&lt;/script&gt;
&lt;script type="text/javascript" src="https://s1.wp.com/wp-content/js/devicepx.js?m=1373391538g"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://mash.network.coull.com/getaffiliatorjs?pid=8165&amp;amp;website_ref=9223888&amp;amp;ver=3.7-alpha-25157"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
// 
&lt;/script&gt;&lt;script src="https://ssl-stats.wordpress.com/w.js?21" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
st_go({'blog':'9223888','v':'wpcom','tz':'-4','user_id':'0','post':'1544','subd':'pythonconquerstheuniverse'});
ex_go({'crypt':'UE5XaGUuOTlwaD85flAmcm1mcmZsaDhkV11YdWFnNncxc1tjZG9XVXhRVz1bVXJlWWRQcV0tS0JbTXJtdFhqUz04cXpxWWt6VFhvK2hlbT1qLU1nSGhTK01tX0wuWkQ5UVM5aVFVaD1UOSV2LjYuPWx0P3BvQXx+PUJ2M1BXT0dvTEdBN109NCwvTmw0eEsyUW8lJV82ekZIPWcvOThHSiVMSFhRWCVtP3N5RXx2V0FnMXRFcUl1MytJNDQtZUowKzNyKyVfNkUrYXRqMUhRQWlnNDRrRkV6eFlpLTRKMHBMeDIrd2JQQlI0dDBabjEyRF9daXNhYXJZei9ifkN1fGdMPVhIOFtXeUR6PTlXR21yfCVlSmI2S0dpVA=='});
addLoadEvent(function(){linktracker_init('9223888',1544);});
	&lt;/script&gt;
&lt;noscript&gt;&lt;img src="https://stats.wordpress.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt=""/&gt;&lt;/noscript&gt;
&lt;script&gt;
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&amp;x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&amp;x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&amp;x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//stats.wordpress.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&amp;baba=' + Math.random();
	}
	
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;