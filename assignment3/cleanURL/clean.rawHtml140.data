   #[1]Site Home (RSS 2.0) [2]Immo Landwerth [MSFT]'s Comments (RSS 2.0)
   [3]Immo Landwerth [MSFT]'s Activities (RSS 2.0) [4]Activities of People
   Immo Landwerth [MSFT] Follows (RSS 2.0) [5]Immo Landwerth [MSFT]'s
   Groups Activities (RSS 2.0) [6].NET Blog (RSS 2.0) [7].NET Blog (Atom
   1.0) [8].NET Blog - All Comments (RSS 2.0) [9]Immutable collections
   ready for prime time - Comments for this post (RSS 2.0)

     * [10]Sign in


     * ____________________ [trans.gif]-Submit
     *

     * [11]MSDN Blogs
     * [12]Microsoft Blog Images
     * [13]More ...

   ﻿

Immutable collections ready for prime time

   [14]MSDN Blogs > [15].NET Blog > [16]Immutable collections ready for
   prime time
   [17]Server & Tools Blogs > [18]Developer Tools Blogs > .NET Framework
   Blog
     * [19]Executive Bloggers
          + [20]S. Somasegar
          + [21]Brian Harry
          + [22]Scott Guthrie
          + [23]Jason Zander
     * [24]Visual Studio
          + [25]Visual Studio
          + [26]Blend
          + [27]LightSwitch
          + [28]Line of Business Apps by Beth Massi
          + [29]Setup & Install by Heath Stewart
     * [30]Application Lifecycle Management
          + [31]Visual Studio ALM
          + [32]Team Foundation Service
     * [33]Languages
          + [34]Visual Basic
          + [35]Visual C#
          + [36]Visual C++
          + [37]Visual F#
          + [38]JavaScript
          + [39]TypeScript
     * [40].NET Framework
          + [41].NET Framework
          + [42].NET Parallel Programming
          + [43]ADO.NET (Managed Providers, DataSet & EF)
          + [44]ASP.NET by Scott Hanselman
          + [45]Base Class Library (BCL)
          + [46]Silverlight
          + [47]WCF Data Services
          + [48]Workflow
     * [49]Platform Development
          + [50]Internet Explorer
          + [51]Apps for Office and SharePoint 2013
          + [52]SharePoint
          + [53]Office
          + [54]Web
          + [55]Windows 8
          + [56]Windows Store
          + [57]Windows Azure
          + [58]Windows Phone

   [59]

.NET Framework Blog

   A first hand look from the .NET engineering teams
   [60]@dotnet [61]@aspnet
   [62]Translate this page
   Powered by [63]Microsoft® Translator
   .NET Downloads
     * [64].NET NuGet Packages
     * [65].NET SDKS and Targeting Packs
     * [66].NET Developer Center

   Upcoming .NET Meetups
   DateTime
   Event
   Group
   Retrieving list of events ...

                     [67]Next 50 .NET user group meetups

   Tags
     * [68].net compact framework
     * [69].net framework
     * [70]announcement
     * [71]asp.net
     * [72]async
     * [73]bcl
     * [74]clr
     * [75]codegen
     * [76]compatibility
     * [77]compression
     * [78]conferences
     * [79]diagnostics
     * [80]docs
     * [81]fundamentals
     * [82]httpclient
     * [83]immutable
     * [84]netcf 3.9
     * [85]nuget
     * [86]performance
     * [87]platform update
     * [88]portable class libraries
     * [89]releases
     * [90]visual studio
     * [91]windows embedded compact 2013
     * [92]windows store

   Recent Posts
     *

[93]RyuJIT: The next-generation JIT compiler for .NET
       Posted 1 day ago
       by [94]The .NET Team
        23 Comments
     *

[95]Immutable collections ready for prime time
       Posted 6 days ago
       by [96]Immo Landwerth [MSFT]
        22 Comments
     *

[97]Immutable collections are now RC
       Posted 19 days ago
       by [98]Immo Landwerth [MSFT]
        33 Comments
     *

[99]Announcing the .NET Framework 4.5.1 RC
       Posted 22 days ago
       by [100]The .NET Team
        6 Comments

     * _____________________________________________ [BUTTON Input] (not
       implemented)_____
       _____________________________________________ [BUTTON Input] (not
       implemented)_____

   (*) Search this blog ( ) Search all blogs
     * [101]Subscribe
     * [102]Comments
     * [103]Contact

   Menu
     * [104]Blog Home
     * [105]Atom

   [106]More ▼ [107]Less ▲
   Archives
   Archives
     * [108]September 2013 (5)
     * [109]August 2013 (9)
     * [110]July 2013 (4)
     * [111]June 2013 (6)
     * [112]May 2013 (3)
     * [113]April 2013 (2)
     * [114]February 2013 (1)
     * [115]January 2013 (1)
     * [116]December 2012 (2)
     * [117]November 2012 (5)
     * [118]October 2012 (5)
     * [119]September 2012 (1)
     * [120]August 2012 (3)
     * [121]July 2012 (2)
     * [122]June 2012 (2)
     * [123]May 2012 (1)
     * [124]April 2012 (2)
     * [125]March 2012 (3)
     * [126]February 2012 (1)
     * [127]October 2011 (2)
     * [128]September 2011 (2)
     * [129]June 2011 (1)
     * [130]April 2011 (1)
     * [131]November 2010 (1)
     * [132]September 2010 (1)
     * [133]June 2010 (2)
     * [134]May 2010 (2)
     * [135]April 2010 (1)
     * [136]March 2010 (3)
     * [137]February 2010 (2)
     * [138]December 2009 (2)
     * [139]November 2009 (3)
     * [140]October 2009 (4)
     * [141]September 2009 (1)
     * [142]August 2009 (5)
     * [143]July 2009 (4)
     * [144]June 2009 (8)
     * [145]May 2009 (11)
     * [146]April 2009 (2)
     * [147]March 2009 (5)
     * [148]February 2009 (4)
     * [149]January 2009 (3)

   [150]More ▼ [151]Less ▲
   Live Now on Developer Tools Blogs

Immutable collections ready for prime time

   Rate This
   [152]Immo Landwerth [MSFT]
   25 Sep 2013 6:34 PM
     * Comments [153]22

   Today I’m very happy to announce that we released the [154]stable
   version of the Microsoft.Bcl.Immutable NuGet package. We also published
   the [155]MSDN documentation on immutable collections.

Thank you!

   Nine months ago, [156]we shipped the first preview of immutable
   collections. This was one of the first BCL features that we decided to
   ship early and often by releasing out of band (that is, outside the
   core .NET Framework releases). This allowed us to have a public design
   discussion, which, in turn, gave us the ability to address your
   feedback in a faster and more direct way than ever before.

   Many of you participated and commented on our blog posts. Immutable
   collections wouldn’t be what it is now in this stable release if it
   weren’t for the great feedback and discussion we had with you. Thanks
   to everybody who participated!

What are immutable collections?

   Over time, the .NET Framework has added many features that made
   concurrent programming a lot easier. This started with the introduction
   of the thread pool, got a lot more powerful with the task-based model
   and the Task Parallel Library (TPL), and was improved even more by the
   addition of the async and await language keywords.

   While creating and running concurrently is easier than ever, one of the
   fundamental problems still exists: mutable shared state. Reading from
   multiple threads is typically very easy, but once the state needs to be
   updated, it gets a lot harder, especially in designs that require
   locking.

   An alternative to locking is making use of immutable state. Immutable
   data structures are guaranteed to never change and can thus be passed
   freely between different threads without worrying about stepping on
   somebody else’s toes.

   This design creates a new problem though: How do you manage changes in
   state without copying the entire state each time? This is especially
   tricky when collections are involved.

   This is where immutable collections come in. We created the following
   immutable collections to make it a lot easier to create immutable data
   structures:
     * [157]ImmutableList<T>
     * [158]ImmutableDictionary<TKey, TValue>
     * [159]ImmutableSortedDictionary<TKey, TValue>
     * [160]ImmutableHashSet<T>
     * [161]ImmutableSortedSet<T>
     * [162]ImmutableStack<T>
     * [163]ImmutableQueue<T>

   Let’s look at an example. You have built a billing system and you see
   that an immutable design will enable you to pass orders around without
   having to worry about data corruption when multiple threads are
   involved. For example, you could implement printing selected orders
   from a worker thread by passing a snapshot of them to the thread. This
   way you avoid blocking the UI, and allow the user to edit orders
   without affecting the snapshot passed to the worker thread.

   Your mutable design might look like this:

   class Order
   {
       public Order()
       {
           Lines = new List<OrderLine>();
       }

       public List<OrderLine> Lines { get; private set; }
   }

   class OrderLine
   {
       public int Quantity { get; set; }
       public decimal UnitPrice { get; set; }
       public float Discount { get; set; }

       public decimal Total
       {
           get
           {
               return Quantity * UnitPrice * (decimal) (1.0f - Discount);
           }
       }
   }

   Now let’s see how you would convert this to an immutable design.

   Let’s start with OrderLine. A first step would be to make the
   properties read-only and initialize them from the constructor:

   class OrderLine
   {
       public OrderLine(int quantity, decimal unitPrice, float discount)
       {
           Quantity = quantity;
           UnitPrice = unitPrice;
           Discount = discount;
       }

       public int Quantity { get; private set; }

       public decimal UnitPrice { get; private set; }

       public float Discount { get; private set; }

       public decimal Total
       {
           get
           {
               return Quantity * UnitPrice * (decimal) (1.0f - Discount);
           }
       }
   }

   This new design requires that you create a new instance of an OrderLine
   whenever any of the values changes. You can make the design a bit more
   convenient by adding WithXxx methods that let you update individual
   properties without having to explicitly call the constructor yourself:

   class OrderLine
   {
       // ...

       public OrderLine WithQuantity(int value)
       {
           return value == Quantity
                   ? this
                   : new OrderLine(value, UnitPrice, Discount);
       }

       public OrderLine WithUnitPrice(decimal value)
       {
           return value == UnitPrice
                   ? this
                   : new OrderLine(Quantity, value, Discount);
       }

       public OrderLine WithDiscount(float value)
       {
           return value == Discount
                   ? this
                   : new OrderLine(Quantity, UnitPrice, value);
       }
   }

   This makes the immutable type very easy to use:

   OrderLine apple = new OrderLine(quantity: 1, unitPrice: 2.5m, discount:
   0.0f);
   OrderLine discountedAppled = apple.WithDiscount(.3f);

   Two things are noteworthy:
     * The WithXxx methods try to avoid creating new instances if the new
       value is identical to the current value.
     * Fruits, especially apples, seem to be expensive.

   (By the way, if you dislike the amount of typing involved in creating
   an immutable type, you aren’t alone. [164]Andrew Arnott has created a
   [165]T4 template that helps you with that.)

   Now let’s see how we would implement Order in an immutable fashion. The
   Lines property is already read-only, but it refers to an object that is
   mutable. Since it’s a collection, it’s easy to convert by simply
   replacing it with ImmutableList<T>:

   class Order
   {
       public Order(IEnumerable<OrderLine> lines)
       {
           Lines = lines.ToImmutableList();
       }

       public ImmutableList<OrderLine> Lines { get; private set; }

       public Order WithLines(IEnumerable<OrderLine> value)
       {
           return Object.ReferenceEquals(Lines, value)
               ? this
               : new Order(value);
       }
   }

   This design has some interesting properties:
     * The constructor accepts IEnumerable<T>, which allows passing in any
       collection.
     * We use the ToImmutableList() extension method, which will convert
       the enumerable to an ImmutableList<OrderLine>. If the instance is
       already an immutable list, it will simply cast instead of creating
       a new collection.
     * The WithLines() method follows the convention from our OrderLine,
       which avoids creating a new instance if the new list is identical
       to the current list of lines.

   We could also add some convenience methods to make it easier to update
   the order lines:

   class Order
   {
       //...

       public Order AddLine(OrderLine value)
       {
           return WithLines(Lines.Add(value));
       }

       public Order RemoveLine(OrderLine value)
       {
           return WithLines(Lines.Remove(value));
       }

       public Order ReplaceLine(OrderLine oldValue, OrderLine newValue)
       {
           return oldValue == newValue
                   ? this
                   : WithLines(Lines.Replace(oldValue, newValue));
       }
   }

   These additions allow creating orders like this:

   OrderLine apple = new OrderLine(quantity: 1, unitPrice: 2.5m, discount:
   0.0f);
   Order order = new Order(ImmutableList.Create(apple));

   OrderLine discountedApple = apple.WithDiscount(discount);
   Order discountedOrder = order.ReplaceLine(apple, discountedApple);

   The nice thing about this design is that it avoids unnecessary object
   creation whenever possible. For example, when the value of discount is
   equal to 0.0f, i.e., when there is no discount, discountedApple and
   discountedOrder refer to the existing instances of apple and order.

   Here is why:
    1. apple.WithDiscount() will return the existing instance of apple
       because the new discount is identical to the current value of the
       Discount property.
    2. order.ReplaceLine() will return the existing instance if both
       arguments are the same.

   Other operations of our immutable collections follow this spirit of
   maximizing reuse. For example, adding an order line to an order with
   1,000 order lines will not create an entire new list with 1,001
   elements. Instead, it will reuse a large chunk of the existing list.
   This is possible because the list is internally represented as a tree
   which allows sharing nodes between different instances.

That sounds great - I’d like to learn more

   The one-stop shop for all API questions is MSDN. So your first visit
   should be the [166]MSDN documentation on immutable collections.

   Our very [167]first blog post on immutable collections is also a great
   in-depth introduction. It covers algorithmic complexities as well as
   the builder pattern, which allows for more efficient bulk updates.

   If your question is more along the lines of “why did Microsoft do it
   this way,” take a look at the entire blog post series on the [168].NET
   Blog as well as the now retired [169]BCL Blog. Many of you asked
   challenging questions and even proposed design improvements which we
   discussed in following posts.

   If you are like me, you probably prefer videos and face-to-face
   conversations over reading text. If so, you may want to watch the two
   videos we put together for Channel 9. They allow you to meet the team
   and gain more insight into the design and inner workings of immutable
   collections.

   IFRAME:
   [170]http://channel9.msdn.com/posts/Erik-Meijer-Immo-Landwerth-and-Andr
   ew-Arnott-Immutable-Collections-for-NET/player?w=512&h=288

   [171]Immutable Collections in .NET

   IFRAME:
   [172]http://channel9.msdn.com/Shows/Going+Deep/Immo-Landwerth-and-Andre
   w-Arnott-Inside-Immutable-Collections/player?w=512&h=288

   [173]Inner workings of immutable collections

Are immutable collections now done?

   No. We still plan on bringing back [174]ImmutableArray<T>, which we
   [175]decided to remove for now, due to some design issues.

   Also, our documentation team is publishing updates to MSDN every three
   weeks. Since the [176]documentation on immutable collections is all
   new, we’re very interested to get your feedback so we can make the docs
   even better!

Summary

   We’ve just shipped a stable release of [177]Microsoft.Bcl.Immutable.
   The license now allows usage in production, so they are ready for prime
   time.

   Please have a look at the [178]new documentation on MSDN and let us
   know what you think!
     * [179]22 Comments


   ______________________________
   ______________________________
   [BUTTON Input] (not implemented)______________ [BUTTON Input] (not
   implemented)____ [BUTTON Input] (not implemented)______
   [180]bcl, [181]announcement, [182]portable class libraries, [183]nuget,
   [184]immutable
   [185]Tweet
   Delicious [186]Save this on Delicious

   Leave a Comment

     * Name ____________________________________________________________
     * Comment
       ____________________
       ____________________
     * Please add 5 and 3 and type the answer here: ____________________
     * [187]Post

   [188]Comments
     * fm
       25 Sep 2013 8:48 PM
       What's the deal with the Windows-only distribution restriction in
       the license? That's super lame. Can we at least have an
       explanation, if not the removal of that clause from the license?
     * Bart
       25 Sep 2013 10:17 PM
       Everybody should avoid this package from Microsoft and work on
       creating an actual portable project with
       [189]github.com/.../ImmutableCollections.
       I'm sure you guys put a lot of effort into this project. It's
       really sad it's been ruined with license you chose for it.
     * AdamMarkson
       26 Sep 2013 12:46 AM
       Great to see, though frustrating that we will have to wait a few
       years to use it as we are still on XP :(
       Presumably this bit about getting the package via nuget in MSDN is
       no longer true:
       'In the drop-down list box in the middle pane, choose Include
       Prerelease instead of Stable Only. '
       [190]msdn.microsoft.com/.../dn385366.aspx
     * [191]James Chaldecott
       26 Sep 2013 3:11 AM
       Great news!
       I think this is going to be a real help at my day job. We've got a
       lot of code dedicated to locking of collections whilst
       reading/writing them, and it's fairly frequent that we end up
       having to fix a deadlock after someone got the locking a bit wrong.
       If we can get rid of some of the locks by using immutable
       collections it'll be a great help.
       I'm really looking forward to the return of ImmutableArray<T>, as
       well. There are places where we need to provide performant
       read-only access to large chucks of data and this could really help
       us out.
       That said, it is a shame if the library has ended up with what
       seems to be the default "Windows only" license restriction. It
       makes it essentially impossible to justify taking a dependency on
       Immutable Collections in open source libraries, even if I
       personally just want to use those libraries on Windows.
       Obviously you are aware of the issue, as Immo replied to Phil
       Haack's comment about it on an earlier post. If you could give us
       an indication of whether you are trying to get the restriction
       removed, or if you've had a firm "No" from Legal it would be
       helpful.
       Thanks, and keep up all the good work.
     * Xero
       26 Sep 2013 3:42 AM
       Thank you!
       Please someone answer:
       - Can we consume immutable collections in Windows Phone 8?
       - Can we consume immutable collections in Windows 8.1 apps?
       - Can we consume immutable collections in building Portable Class
       Library - PCL?
     * Eren
       26 Sep 2013 3:50 AM
       MSDN documentation includes a thread safety warning for all
       collection types:
       "Any public static (Shared in Visual Basic) members of this type
       are thread safe. Any instance members are not guaranteed to be
       thread safe."
       Is this a documentation error?
     * Tim
       26 Sep 2013 4:05 AM
       Wow! Jim Caviezel works for Microsoft. I didn't knew that.. :-D
     * Methew
       26 Sep 2013 6:32 AM
       @Xero, I created a project from
       [192]apps.windowsstore.com/default.htm, downloaded the source and
       installed the immutable collection nuget package and its installed
       without error. I haven't consumed it in any scenario. But I think
       it will work with Windows Phone and Windows Store. Not sure about
       PCL though.
     * [193]MgSm88
       26 Sep 2013 6:44 AM
       I know the C# team has been thinking about how to make immutable
       types easier to create- I hope they're successful, because it
       really requires a huge amount of code to do this pattern yourself.
     * [194]Immo Landwerth [MSFT]
       26 Sep 2013 7:56 AM
       @AdamMarkson: Yes, you no longer need to select "Include
       Prerelease". By the time we published this article the new version
       of the docs were staged but not yet live. Stay tuned.
       @James Chaldecott, Bart, fm: We are very much aware that this
       license restriction is an issue for the community. At this point
       the best explanation I can offer is that we neither made a
       decisions to remove it, nor to keep it. Until now, this is the
       standard EULA Microsoft teams have been using for years, so it's
       not like we specifically added this clause.
       @Xero: Immutable Collections is supported on .NET 4.5, .NET for
       Windows Store and Windows Phone 8, as well as portable class
       libraries targeting those platforms.
       @Eren: Excellent catch. I'll forward this to the documentation
       team. That's most likely part of the standard documentation that
       got incorrectly applied.
       @Tim: ahem, so does George Clooney ;-)
       @MgSm88: Indeed. The good news is that the C# team itself is now
       implementing the compilers and IDE services in C# using an
       immutable design. They are very much aware of the number of
       keystrokes involved :-)
     * Finder
       26 Sep 2013 7:58 AM
       For a high-volume HTTP server (foundation is OWIN/Katana), does it
       make sense to store cross-application state/configuration in an
       ImmutableDictionary, or ConcurrentDictionary or MemoryCache, when
       the instances will feature thousands of reads per second but
       infrequent writes/updates per hour?
       Also, when I first heard about this announcement, I went to Bing
       and searched for "msdn immutable collections 2013/09/25" and got no
       hits. Then I went to Google and searched for "msdn immutable
       collections 2013/09/25" and got this page as a top hit. So I
       submitted "blogs.msdn.com" to Bing as a "new site" in the hopes
       that they will try harder over there....
     * [195]Immo Landwerth [MSFT]
       26 Sep 2013 9:00 AM
       @Finder: The canonical answer is: it depends. It sounds to me like
       this scenario could benefit from using immutable collections but it
       always depends on how you need to handle updates. In general, you
       can use Interlocked.CompareExachange to update the reference to an
       immutable collection in an atomic fashion. You can use these to
       build somewhat higher-level operations like atomic updates (like
       the one we include in
       [196]msdn.microsoft.com/.../system.collections.immutable.immutablei
       nterlocked.aspx), at which it becomes very similar to concurrent
       collections.
     * Earlz
       26 Sep 2013 9:28 AM
       The license is so complicated you have to ask a lawyer if you can
       even use this library. I was really looking forward to this, but
       I'll be avoiding this for reasons I've put in a blog post
       [197]earlz.net/.../why-i-wont-be-using-microsoftbclimmutable-packag
       e-despite
     * Finder
       26 Sep 2013 9:40 AM
       @Immo, this is awesome. I just finished the Ch9 videos also. Great
       stuff!
       To add more detail to what I am exploring, with 20 collections
       (lower case "c" in "collections"), each with 3000+ key/value pairs,
       all collections will simultaneously serve a value based on the key
       lookup (no iteration). Read-only stuff, but the lookup and
       subsequent value serving would occur thousands of times per second.
       Every n minutes, the collections would be completely destroyed and
       a new one would replace it. The collections themselves are in a
       List<>.
       From my currently thin understanding, the new
       ImmutableDictionary<TKey, TValue> seems like a better move than
       ConcurrentDictionary<TKey, TValue>. I am trying to get some more
       "compare and contrast" ideas however before I begin blindly writing
       code and potentially taking my tests in the wrong direction.
       Thanks.
     * Rob FE
       26 Sep 2013 2:04 PM
       To anyone else who wants to see the platform limitations removed,
       please vote up at
       [198]visualstudio.uservoice.com/.../4494577-remove-the-platform-res
       triction-on-microsoft-nuget
       @Immo, I can't stress enough how important it is to review the
       platform restrictions. I'm currently building an app for multiple
       platforms (who isn't) and I'd like to be able to reuse my code. If
       I could use this library in mono on android and iOS, then I would
       use it (along with Xamarin and Visual Studio). Otherwise my options
       are to build in javascript or build a native version in each
       platform, which largely cuts visual studio out of the picture.

   Page 1 of 2 (22 items) [199]1[200]2

     * © 2013 Microsoft Corporation.
     * [201]Terms of Use
     * [202]Trademarks
     * [203]Privacy & Cookies
     * [204]Report Abuse
     * 5.6.426.415

References

   Visible links
   1. http://blogs.msdn.com/rss.aspx
   2. file://localhost/members/terrajobst_4000_web.de/comments/rss.aspx
   3. file://localhost/members/terrajobst_4000_web.de/activities/rss.aspx
   4. file://localhost/members/terrajobst_4000_web.de/activities/followersrss.aspx
   5. file://localhost/members/terrajobst_4000_web.de/activities/groupsrss.aspx
   6. http://blogs.msdn.com/b/dotnet/rss.aspx
   7. http://blogs.msdn.com/b/dotnet/atom.aspx
   8. http://blogs.msdn.com/b/dotnet/rsscomments.aspx
   9. http://blogs.msdn.com/b/dotnet/rsscomments.aspx?WeblogPostID=10452116
  10. https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=11&ct=1380681967&rver=6.0.5286.0&wp=MBI&wreply=http:%2F%2Fblogs.msdn.com%2Fb%2Fdotnet%2Farchive%2F2013%2F09%2F25%2Fimmutable-collections-ready-for-prime-time.aspx&lc=1033&id=271611
  11. file://localhost/
  12. file://localhost/Microsoft_Blog_Images/
  13. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  14. file://localhost/
  15. file://localhost/b/dotnet/
  16. file://localhost/b/dotnet/archive/2013/09/25/immutable-collections-ready-for-prime-time.aspx
  17. http://blogs.technet.com/b/serverandtools/
  18. http://blogs.msdn.com/b/developer-tools/
  19. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  20. http://blogs.msdn.com/b/somasegar/
  21. http://blogs.msdn.com/b/bharry/
  22. http://weblogs.asp.net/scottgu/
  23. http://blogs.msdn.com/b/jasonz/
  24. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  25. http://blogs.msdn.com/b/visualstudio
  26. http://blendinsider.com/
  27. http://blogs.msdn.com/b/lightswitch/
  28. http://blogs.msdn.com/b/bethmassi/archive/tags/devcenter/
  29. http://blogs.msdn.com/b/heaths/
  30. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  31. http://blogs.msdn.com/b/visualstudioalm/
  32. http://tfs.visualstudio.com/en-us/home/news/
  33. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  34. http://blogs.msdn.com/b/vbteam/
  35. http://blogs.msdn.com/b/csharpfaq/
  36. http://blogs.msdn.com/b/vcblog/
  37. http://blogs.msdn.com/b/fsharpteam/
  38. http://sxp.microsoft.com/feeds/3.0/devblogs/Languages?SourceFeedId=2427%20OR%202428%20OR%202429%20OR%202430
  39. http://blogs.msdn.com/b/typescript/
  40. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  41. http://blogs.msdn.com/b/dotnet/
  42. http://blogs.msdn.com/b/pfxteam/
  43. http://blogs.msdn.com/b/adonet/
  44. http://www.hanselman.com/blog/CategoryView.aspx?category=ASP.NET
  45. http://blogs.msdn.com/b/bclteam/
  46. http://blogs.msdn.com/b/silverlight/
  47. http://blogs.msdn.com/b/astoriateam/
  48. http://blogs.msdn.com/b/workflowteam/
  49. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
  50. http://blogs.msdn.com/b/ie/archive/tags/developers/
  51. http://blogs.msdn.com/b/officeapps/
  52. http://blogs.msdn.com/b/sharepointdev/
  53. http://blogs.msdn.com/b/vsto/
  54. http://blogs.msdn.com/b/webdevtools/
  55. http://blogs.msdn.com/b/windowsappdev/
  56. http://blogs.msdn.com/b/windowsstore/
  57. http://blogs.msdn.com/b/windowsazure/archive/tags/developer/
  58. http://windowsteamblog.com/windows_phone/b/wpdev/
  59. file://localhost/b/dotnet/
  60. https://twitter.com/dotnet
  61. https://twitter.com/aspnet
  62. http://www.microsofttranslator.com/bv.aspx?a=http%3a%2f%2fblogs.msdn.com%2f
  63. http://www.microsofttranslator.com/
  64. http://blogs.msdn.com/b/dotnet/p/nugetpackages.aspx
  65. http://go.microsoft.com/fwlink/?LinkID=229561
  66. http://msdn.com/netframework
  67. http://blogs.msdn.com/b/dotnet/p/dotnetusergroups.aspx
  68. http://blogs.msdn.com/b/dotnet/archive/tags/-net+compact+framework/
  69. http://blogs.msdn.com/b/dotnet/archive/tags/-net+framework/
  70. http://blogs.msdn.com/b/dotnet/archive/tags/announcement/
  71. http://blogs.msdn.com/b/dotnet/archive/tags/asp-net/
  72. http://blogs.msdn.com/b/dotnet/archive/tags/async/
  73. http://blogs.msdn.com/b/dotnet/archive/tags/bcl/
  74. http://blogs.msdn.com/b/dotnet/archive/tags/clr/
  75. http://blogs.msdn.com/b/dotnet/archive/tags/codegen/
  76. http://blogs.msdn.com/b/dotnet/archive/tags/compatibility/
  77. http://blogs.msdn.com/b/dotnet/archive/tags/compression/
  78. http://blogs.msdn.com/b/dotnet/archive/tags/conferences/
  79. http://blogs.msdn.com/b/dotnet/archive/tags/diagnostics/
  80. http://blogs.msdn.com/b/dotnet/archive/tags/docs/
  81. http://blogs.msdn.com/b/dotnet/archive/tags/fundamentals/
  82. http://blogs.msdn.com/b/dotnet/archive/tags/httpclient/
  83. http://blogs.msdn.com/b/dotnet/archive/tags/immutable/
  84. http://blogs.msdn.com/b/dotnet/archive/tags/netcf+3-9/
  85. http://blogs.msdn.com/b/dotnet/archive/tags/nuget/
  86. http://blogs.msdn.com/b/dotnet/archive/tags/performance/
  87. http://blogs.msdn.com/b/dotnet/archive/tags/platform+update/
  88. http://blogs.msdn.com/b/dotnet/archive/tags/portable+class+libraries/
  89. http://blogs.msdn.com/b/dotnet/archive/tags/releases/
  90. http://blogs.msdn.com/b/dotnet/archive/tags/visual+studio/
  91. http://blogs.msdn.com/b/dotnet/archive/tags/windows+embedded+compact+2013/
  92. http://blogs.msdn.com/b/dotnet/archive/tags/windows+store/
  93. file://localhost/b/dotnet/archive/2013/09/30/ryujit-the-next-generation-jit-compiler.aspx
  94. file://localhost/513875/ProfileUrlRedirect.ashx
  95. file://localhost/b/dotnet/archive/2013/09/25/immutable-collections-ready-for-prime-time.aspx
  96. file://localhost/445356/ProfileUrlRedirect.ashx
  97. file://localhost/b/dotnet/archive/2013/09/12/immutable-collections-are-now-rc.aspx
  98. file://localhost/445356/ProfileUrlRedirect.ashx
  99. file://localhost/b/dotnet/archive/2013/09/09/announcing-the-net-framework-4-5-1-rc.aspx
 100. file://localhost/513875/ProfileUrlRedirect.ashx
 101. file://localhost/b/dotnet/rss.aspx
 102. file://localhost/b/dotnet/rsscomments.aspx
 103. file://localhost/b/dotnet/contact.aspx
 104. file://localhost/b/dotnet/
 105. file://localhost/b/dotnet/atom.aspx
 106. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
 107. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
 108. file://localhost/b/dotnet/archive/2013/09.aspx
 109. file://localhost/b/dotnet/archive/2013/08.aspx
 110. file://localhost/b/dotnet/archive/2013/07.aspx
 111. file://localhost/b/dotnet/archive/2013/06.aspx
 112. file://localhost/b/dotnet/archive/2013/05.aspx
 113. file://localhost/b/dotnet/archive/2013/04.aspx
 114. file://localhost/b/dotnet/archive/2013/02.aspx
 115. file://localhost/b/dotnet/archive/2013/01.aspx
 116. file://localhost/b/dotnet/archive/2012/12.aspx
 117. file://localhost/b/dotnet/archive/2012/11.aspx
 118. file://localhost/b/dotnet/archive/2012/10.aspx
 119. file://localhost/b/dotnet/archive/2012/09.aspx
 120. file://localhost/b/dotnet/archive/2012/08.aspx
 121. file://localhost/b/dotnet/archive/2012/07.aspx
 122. file://localhost/b/dotnet/archive/2012/06.aspx
 123. file://localhost/b/dotnet/archive/2012/05.aspx
 124. file://localhost/b/dotnet/archive/2012/04.aspx
 125. file://localhost/b/dotnet/archive/2012/03.aspx
 126. file://localhost/b/dotnet/archive/2012/02.aspx
 127. file://localhost/b/dotnet/archive/2011/10.aspx
 128. file://localhost/b/dotnet/archive/2011/09.aspx
 129. file://localhost/b/dotnet/archive/2011/06.aspx
 130. file://localhost/b/dotnet/archive/2011/04.aspx
 131. file://localhost/b/dotnet/archive/2010/11.aspx
 132. file://localhost/b/dotnet/archive/2010/09.aspx
 133. file://localhost/b/dotnet/archive/2010/06.aspx
 134. file://localhost/b/dotnet/archive/2010/05.aspx
 135. file://localhost/b/dotnet/archive/2010/04.aspx
 136. file://localhost/b/dotnet/archive/2010/03.aspx
 137. file://localhost/b/dotnet/archive/2010/02.aspx
 138. file://localhost/b/dotnet/archive/2009/12.aspx
 139. file://localhost/b/dotnet/archive/2009/11.aspx
 140. file://localhost/b/dotnet/archive/2009/10.aspx
 141. file://localhost/b/dotnet/archive/2009/09.aspx
 142. file://localhost/b/dotnet/archive/2009/08.aspx
 143. file://localhost/b/dotnet/archive/2009/07.aspx
 144. file://localhost/b/dotnet/archive/2009/06.aspx
 145. file://localhost/b/dotnet/archive/2009/05.aspx
 146. file://localhost/b/dotnet/archive/2009/04.aspx
 147. file://localhost/b/dotnet/archive/2009/03.aspx
 148. file://localhost/b/dotnet/archive/2009/02.aspx
 149. file://localhost/b/dotnet/archive/2009/01.aspx
 150. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
 151. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data
 152. file://localhost/445356/ProfileUrlRedirect.ashx
 153. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml140.data#comments
 154. http://www.nuget.org/packages/Microsoft.Bcl.Immutable
 155. http://msdn.microsoft.com/en-us/library/dn385366.aspx
 156. http://blogs.msdn.com/b/bclteam/archive/2012/12/18/preview-of-immutable-collections-released-on-nuget.aspx
 157. http://msdn.microsoft.com/en-us/library/dn467185.aspx
 158. http://msdn.microsoft.com/en-us/library/dn467181.aspx
 159. http://msdn.microsoft.com/en-us/library/dn467194.aspx
 160. http://msdn.microsoft.com/en-us/library/dn467171.aspx
 161. http://msdn.microsoft.com/en-us/library/dn467193.aspx
 162. http://msdn.microsoft.com/en-us/library/dn467197.aspx
 163. http://msdn.microsoft.com/en-us/library/dn467186.aspx
 164. http://blogs.msdn.com/b/andrewarnottms/archive/2013/01/08/simple-immutable-objects.aspx
 165. http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx
 166. http://msdn.microsoft.com/en-us/library/dn385366.aspx
 167. http://blogs.msdn.com/b/bclteam/archive/2012/12/18/preview-of-immutable-collections-released-on-nuget.aspx
 168. http://blogs.msdn.com/b/dotnet/archive/tags/immutable/
 169. http://blogs.msdn.com/b/bclteam/archive/tags/immutable/
 170. http://channel9.msdn.com/posts/Erik-Meijer-Immo-Landwerth-and-Andrew-Arnott-Immutable-Collections-for-NET/player?w=512&h=288
 171. http://channel9.msdn.com/posts/Erik-Meijer-Immo-Landwerth-and-Andrew-Arnott-Immutable-Collections-for-NET
 172. http://channel9.msdn.com/Shows/Going+Deep/Immo-Landwerth-and-Andrew-Arnott-Inside-Immutable-Collections/player?w=512&h=288
 173. http://channel9.msdn.com/Shows/Going+Deep/Immo-Landwerth-and-Andrew-Arnott-Inside-Immutable-Collections
 174. http://blogs.msdn.com/b/dotnet/archive/2013/06/24/please-welcome-immutablearray.aspx
 175. http://blogs.msdn.com/b/dotnet/archive/2013/09/12/immutable-collections-are-now-rc.aspx
 176. http://msdn.microsoft.com/en-us/library/dn385366.aspx
 177. http://www.nuget.org/packages/Microsoft.Bcl.Immutable
 178. http://msdn.microsoft.com/en-us/library/dn385366.aspx
 179. file://localhost/b/dotnet/archive/2013/09/25/immutable-collections-ready-for-prime-time.aspx#comments
 180. http://blogs.msdn.com/b/dotnet/archive/tags/bcl/
 181. http://blogs.msdn.com/b/dotnet/archive/tags/announcement/
 182. http://blogs.msdn.com/b/dotnet/archive/tags/portable+class+libraries/
 183. http://blogs.msdn.com/b/dotnet/archive/tags/nuget/
 184. http://blogs.msdn.com/b/dotnet/archive/tags/immutable/
 185. https://twitter.com/share
 186. http://www.delicious.com/save
 187. javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$content$ctl00$w_144658$_a6907d$ctl00$ctl00$ctl00$ctl05$bpCommentForm$ctl05$btnSubmit", "", true, "BlogPostCommentForm-ctl00_content_ctl00_w_144658__a6907d_ctl00_ctl00", "", false, true))
 188. file://localhost/b/dotnet/rsscomments.aspx?WeblogPostID=10452116
 189. https://github.com/mono/ImmutableCollections
 190. http://msdn.microsoft.com/en-us/library/dn385366.aspx
 191. file://localhost/386636/ProfileUrlRedirect.ashx
 192. http://apps.windowsstore.com/default.htm
 193. file://localhost/447220/ProfileUrlRedirect.ashx
 194. file://localhost/445356/ProfileUrlRedirect.ashx
 195. file://localhost/445356/ProfileUrlRedirect.ashx
 196. http://msdn.microsoft.com/en-us/library/system.collections.immutable.immutableinterlocked.aspx
 197. http://earlz.net/view/2013/09/26/1618/why-i-wont-be-using-microsoftbclimmutable-package-despite
 198. http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/4494577-remove-the-platform-restriction-on-microsoft-nuget
 199. file://localhost/b/dotnet/archive/2013/09/25/immutable-collections-ready-for-prime-time.aspx?PageIndex=1#comments
 200. file://localhost/b/dotnet/archive/2013/09/25/immutable-collections-ready-for-prime-time.aspx?PageIndex=2#comments
 201. http://msdn.microsoft.com/cc300389
 202. http://www.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx
 203. http://go.microsoft.com/fwlink/?LinkId=248681
 204. javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$footer_fragment_247403536$_a6907d$ctl00$ctl00$ctl01$lnkAbuse", "", true, "", "", false, true))

   Hidden links:
 206. file://localhost/
 207. http://www.microsoft.com/visualstudio/
 208. file://localhost/513875/ProfileUrlRedirect.ashx
 209. file://localhost/445356/ProfileUrlRedirect.ashx
 210. file://localhost/445356/ProfileUrlRedirect.ashx
 211. file://localhost/513875/ProfileUrlRedirect.ashx
 212. file://localhost/445356/ProfileUrlRedirect.ashx
 213. file://localhost/386636/ProfileUrlRedirect.ashx
 214. file://localhost/447220/ProfileUrlRedirect.ashx
 215. file://localhost/445356/ProfileUrlRedirect.ashx
 216. file://localhost/445356/ProfileUrlRedirect.ashx
 217. http://www.omniture.com/
