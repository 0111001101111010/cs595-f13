   #[1]CodeProject Latest articles - All Topics [2]CodeProject Latest
   articles - MFC/C++ [3]CodeProject Latest articles - C# [4]CodeProject
   Latest articles - VB.NET [5]CodeProject Latest articles - Mobile
   [6]CodeProject Latest articles - ASP.NET [7]CodeProject Lounge Postings
   [8]CodeProject

   [9]Click here to Skip to main content

   [10]Home
            10,118,810 members (42,309 online)
            [11]Visit CodeProject.TV
            [12]Discuss CodeProject.TV
            [13]Sign in
            Email
            ____________________
            Password
            ____________________
            Sign in
              [14]Forgot your password?
              __________________________________________________________________

            Sign in using [15][facebook.png] [16][google-plus.png]
            [17][linkedin.png]



   [18]Click here to Skip to main content
     * [19]home
     * [20]articles
          + [21]Chapters and Sections>
               o loading
          + [22]Search
          + [23]Latest Articles
          + [24]Latest Tips/Tricks
          + [25]Top Articles
          + [26]Beginner Articles
          + [27]Technical Blogs
          + [28]Posting/Update Guidelines
          + [29]Article Help Forum
          + [30]Article Competition
          + [31][write-gr.png] Submit an article or tip
          + [32][write-or.png] Post your Blog
          +
     * [33]quick answers
          + [34][write-gr.png] Ask a Question about this article
          + [35][write-or.png] Ask a Question
          + [36]View Unanswered Questions
          + [37]View All Questions...
          + [38]C# questions
          + [39]ASP.NET questions
          + [40]VB.NET questions
          + [41]C#4.0 questions
          + [42]C++ questions
          +
     * [43]discussions
          + [44]All Message Boards...
          + [45]Application Lifecycle>
               o [46]Running a Business
               o [47]Sales / Marketing
               o [48]Collaboration / Beta Testing
               o [49]Work & Training Issues
          + [50]Design and Architecture
          + [51]ASP.NET
          + [52]JavaScript
          + [53]C / C++ / MFC>
               o [54]ATL / WTL / STL
               o [55]Managed C++/CLI
          + [56]Adobe Technologies
          + [57]C#
          + [58]Free Tools
          + [59]Objective-C
          + [60]Ruby On Rails
          + [61]Database
          + [62]Hardware & Devices>
               o [63]System Admin
          + [64]Hosting and Servers
          + [65]Java
          + [66].NET Framework
          + [67]Mobile
          + [68]VS 2012/2013 & .NET 4.5.1
          + [69]Sharepoint
          + [70]Silverlight / WPF
          + [71]Visual Basic
          + [72]Web Development
          + [73]Site Bugs / Suggestions
          +
     * [74]features
          + [75]CP.TV CodeProject.TV
          + [76]Component & Service Catalog
          + [77]Competitions
          + [78]News
          + [79]The Insider Newsletter
          + [80]Newsletter archive
          + [81]Surveys
          + [82]Product Showcase
          + [83]Research Library
          + [84]CodeProject Stuff
          +
     * [85]community
          + [86]The Insider News
          + [87]The Lounge
          + [88]The Weird & The Wonderful
          + [89]The Soapbox
          + [90]Press Releases
          + [91]Who's Who
          + [92]Most Valuable Professionals
          + [93]Company Listings
          + [94]Non-English Language >
               o [95]General Indian Topics
               o [96]General Chinese Topics
          +
     * [97]help
          + [98]What is 'CodeProject'?
          + [99]General FAQ
          + [100]Ask a Question
          + [101]Bugs and Suggestions
          + [102]Article Help Forum
          + [103]Site Map
          + [104]Advertise with us
          + [105]Employment Opportunities
          + [106]About Us
          +


   ____________________ [search.gif]-Submit
   Search within:
   (*) Articles
   ( ) Videos
   ( ) Quick Answers
   ( ) Messages
   ( ) Product Catalog
   [107]Articles » [108]General Programming » [109]Game Development »
   [110]Games

   [111]Next Next
   Article
   [112]Browse Code
   [113]Stats
   [114]Revisions (19)
   [115]Alternatives
   [116]Comments & Discussions (2)

Beginning the Rule of Ready Project

   By [117]Christopher Stevenson, 26 Sep 2013


   [stars-fill-lg.png]
   [stars-empty-lg.png]
                          5.00 (1 vote)

   1
     2
       3
         4 1 vote, 100.0%
           5
   5.00/5 - 1 vote
   μ 5.00, σ[a] 5.00 [[118]?]

   loading...
              [119]Sign Up to vote (*) ( ) ( ) ( ) ( ) Vote!
   Add a reason or comment to your vote: [120]x

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   Votes of 3 or less require a comment
   [121]Tweet
     * [122]Download source - 39 KB
     * [123]Download latest version of source code (external link)

Introduction

   I'm writing to show and teach a personal undertaking, a game project
   called The Rule of Ready. This is a Japanese Mahjong game written from
   scratch in C#. I'll be documenting my engineering decisions and the
   implementations, bugs and all. I hope that seeing concepts in action
   will help developers improve.

What is This Game?

   Mahjong is a Chinese four player tabletop game that has many variants
   around the world. I often describe it as a cross between gin rummy and
   poker, but played with tiles instead of cards. The tiles are shuffled
   and gathered into a wall in front of the players, much like a deck of
   cards in the middle of a table. Each player draws an initial hand of 13
   tiles, and take turns drawing a tile and discarding one from their
   hand, until one player has a winning hand--4 sets of three tiles and a
   pair, typically. Players can also--under certain conditions--claim
   another player's discard to complete one of the sets of tiles, or to
   complete the hand.

   Here's a screen shot from the Japanese Mahjong game Tenhou, from
   [124]Osamuko's Mahjong Blog:
   [10.JPG]

   For more information on Japanese Mahjong, here are some sites to visit:
     * [125]A wiki for information about Japanese Mahjong
     * [126]A through PDF detailing both the rules and the Japanese terms
       for the game, in exhaustive detail, from a player only known as
       Barticle
     * [127]ReachMahjong.com, a community site for professional players of
       the game, with translated articles from professional Japanese
       players
     * [128]A Japanese Mahjong Flash game

Problem to Solve

   Every project needs a place to start, so I'll start with a Mahjong
   tile. Japanese has a total of 136 tiles (Japanese terms are in
   itallics):
     * There are 4 copies of each tile, and 34 different designs of tiles
     * 27 of these are suit tiles (supai): 3 suits of 9 tiles each
          + the 3 suits are Dots (pinzu) , Bamboos (sozu) , and Characters
            (manzu)
          + the suits are numbered 1 to 9, and 1 and 9 are Terminals
            (rotohai)
     * 7 are Honor Tiles (jiihai)
          + 4 are Wind Tiles (kazehai), one of each direction: East (Ton),
            South (nan), West (sha), and North (Pe)
          + 3 are Dragon Tiles (sangenpai): Green Dragon (hatsu), Red
            Dragon (chun), White Dragon (haku)
     * The Terminals and Honors together are called Majors (yaochuhai)
     * There a four Red Five suit tiles that can be substituted for the
       normal suit tiles (two 5-Dot, one 5-Bamboo, and one 5-Character).
       These are bonus (dora) tiles that add to a winning hand's score.

   A Mahjong tile is going to be a piece of data that will be used in many
   aspects of the game. Some uses of this class will be determining what
   sets of 3 tiles are in a player's hand, are any tiles of a particular
   type in a player's hand, what tiles can help a player get closer to
   winning? All of these questions have a similar theme: "do the tiles in
   one or more collections match a condition?"

First Implementation

   I started with a single class for a mahjong tile, with an enum for the
   type and classification of the tile.

   First, an enum for the basic tile type. I'm using the convention that 0
   is an error value.
public enum MahjongTileType
{
    UnknownTile = 0,
    SuitTile,
    HonorTile
}

   For Suit tiles, I need a suit, a number, and whether it's a Red tile or
   not. For Honor Tiles, I just need what dragon or wind tile to make. All
   of this categorization has a better implementation in C#, as a flags
   enum.
[Flags]
public enum MahjongTileType
{
    UnknownTile = 0,
    // suit tiles
    Bambooo = 0x1,
    Character = 0x2,
    Dot = 0x4,

    // honor tiles
    GreenDragon = 0x8,
    RedDragon = 0x10,
    WhiteDragon = 0x20,
    EastWind = 0x40,
    SouthWind = 0x80,
    WestWind = 0x100,
    NorthWind = 0x200,

    // categories
    DragonTile = GreenDragon | RedDragon | WhiteDragon,
    WindTile = EastWind | SouthWind | WestWind | NorthWind,
    HonorTile = DragonTile | WindTile,
    SuitTile = Bambooo | Character | Dot
}
public class MahjongTile
{
    public MahjongTileType TileType { get; private set; }
    public int SuitNumber { get; private set; }
    public bool IsRedTile { get; private set; }

    public MahjongTile(MahjongTileType tileType)
    {
        if (tileType != MahjongTileType.HonorTile)
            throw new ArgumentException("This constructor overload is only for h
onor tiles",
                                        "tileType");
        this.TileType = tileType;
        this.SuitNumber = 0;
        this.IsRedTile = false;
    }

    public MahjongTile(MahjongTileType tileType, int suitNumber, bool isRed)
    {
        if (tileType != MahjongTileType.SuitTile)
            throw new ArgumentException("This constructor overload is only for s
uit tiles",
                                        "tileType");
        if (suitNumber < 1 || suitNumber > 9)
            throw new ArgumentException("Suit tiles have values from 1 and 9",
                                        "suitNumber");
        this.TileType = tileType;
        this.SuitNumber = suitNumber;
        this.IsRedTile = isRed;
    }
}

   The argument checks on the constructors are a code smell: an
   incorrectly created tile won't be caught until runtime. How about using
   MahjongTile objects? Let's see how code for answering some of the
   questions would look like:
List<mahjongtile> hand =  new List<mahjongtile>()
{
    //...
};

// how many EastWind tiles does the hand contain?
int hasEastWind = hand.Where(mt => mt.TileType == MahjongTileType.EastWind).Coun
t();

// are there any honor tiles in the hand?
bool hasHonorTiles = hand.Where(mt => mt.TileType == MahjongTileType.HonorTile).
Any();

   While this works well enough for simple questions, complicated ones
   will require complex Where filter functions. For example, one of the
   central questions to the game is "how many tiles do I need to win?"
   along with "what tiles do I need to win?" These questions are not
   trivial to answer. I could live with this, but it's concerning.
   Combined with the constructor code smell, I should reconsider my
   design. (I had some help from the CodeProject community as well.)

Second Implementation

   One item of note is that a Mahjong tile doesn't change after it's been
   created. This means that if I [129]define value equality for a Mahjong
   tile, I can encapsulate the details for equating tiles within the class
   without needing public properties to do so. Also, sorting the tiles in
   a hand seems reasonable, at least for the user interface, which means
   tiles should be able to be compared to one another.

   I had a few challenges in getting the code to be readable, rather than
   merely correct. Observations are below:
/// <summary>
/// Types of Suits for Mahjong tiles
/// </summary>
public enum MahjongSuitType
{
    Bamboo = 1,
    Character,
    Dot
}

/// <summary>
/// The allowed values of Suit Mahjong Tiles
/// </summary>
public enum MahjongSuitNumber
{
    One = 1,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine
}

/// <summary>
/// Types of Mahjong Honor Tiles
/// </summary>
public enum MahjongHonorType
{
    EastWind = 1,
    SouthWind,
    WestWind,
    NorthWind,
    RedDragon,
    WhiteDragon,
    GreenDragon
}

/// <summary>
/// A Mahjong Tile. (This implements IEquatable and IComparable)
/// </summary>
public abstract class MahjongTile : IEquatable<mahjongtile>, IComparable<mahjong
tile>
{

    #region Public Methods

    /// <summary>
    /// Override for equality, when checked against something that's not a Mahjo
ngTile
    /// </summary>
    /// <param name="obj"></param>
    /// <returns></returns>
    public override bool Equals(object obj)
    {
        return this.EqualToImpl(obj as MahjongTile);
    }

    /// <summary>
    /// Override for determining hashcode, must return same value for equal obje
cts
    /// </summary>
    /// <returns></returns>
    public override int GetHashCode()
    {
        return this.GetHashCodeImpl();
    }

    #region IEquatable Implementation

    /// <summary>
    /// Definition of equality for when compared to another MahjongTile object
    /// </summary>
    /// <param name="other">another MahjongTile</param>
    /// <returns></returns>
    public bool Equals(MahjongTile other)
    {
        return this.EqualToImpl(other);
    }

    #endregion

    #region IComparable Implementation

    /// <summary>
    /// Definition of ordering when compared to another MahjongTile.
    /// This is used to implement operator overloads.
    /// </summary>
    /// <param name="other">another MahjongTile</param>
    /// <returns></returns>
    public int CompareTo(MahjongTile other)
    {
        return this.CompareToImpl(other);
    }

    #endregion


    #region Operator overloads

    /// <summary>
    /// Definition of '==' for MahjongTiles. Handles null values first.
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator ==(MahjongTile left, MahjongTile right)
    {
        bool leftIsNull = Object.ReferenceEquals(left, null);
        bool rightIsNull = Object.ReferenceEquals(right, null);

        if (leftIsNull && rightIsNull)
            return true;
        else if (leftIsNull || rightIsNull)
            return false;
        else
            return left.EqualToImpl(right);
    }

    /// <summary>
    /// Definition of '!=' for Mahjong Tiles
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator !=(MahjongTile left, MahjongTile right)
    {
        return !(left == right);
    }

    /// <summary>
    /// Definition of '<' for Mahjong Tiles
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator <(MahjongTile left, MahjongTile right)
    {
        return left.CompareTo(right) < 0;
    }

    /// <summary>
    /// Definition of '>' for Mahjong Tiles
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator >(MahjongTile left, MahjongTile right)
    {
        return left.CompareTo(right) > 0;
    }

    /// <summary>
    /// Definition of '<=' for Mahjong Tiles
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator <=(MahjongTile left, MahjongTile right)
    {
        return left.CompareTo(right) <= 0;
    }

    /// <summary>
    /// Definition of '>=' for Mahjong Tiles
    /// </summary>
    /// <param name="left">left operand</param>
    /// <param name="right">right operand</param>
    /// <returns></returns>
    public static bool operator >=(MahjongTile left, MahjongTile right)
    {
        return left.CompareTo(right) >= 0;
    }

    #endregion

    #endregion

    #region Protected Abstract Members

    /// <summary>
    /// Abstract method for the implementation of comparing Mahjong Tiles
    /// </summary>
    /// <param name="other">another MahjongTile</param>
    /// <returns></returns>
    protected abstract int CompareToImpl(MahjongTile other);

    /// <summary>
    /// Abstract method for the implementation of Equating Mahjong Tiles
    /// </summary>
    /// <param name="other">another MahjongTile</param>
    /// <returns></returns>
    protected abstract bool EqualToImpl(MahjongTile other);

    /// <summary>
    /// Abstract method for the implementation of getting a hashcode value Mahjo
ng Tiles
    /// </summary>
    /// <param name="other">another MahjongTile</param>
    /// <returns></returns>
    protected abstract int GetHashCodeImpl();

    #endregion

}

/// <summary>
/// A Mahjong Tile that's a suit
/// </summary>
public class MahjongSuitTile : MahjongTile
{
    #region Public Properties (read only)

    /// <summary>
    /// Type of the suit
    /// </summary>
    public MahjongSuitType SuitType { get; private set; }

    /// <summary>
    /// Number of the suit
    /// </summary>
    public MahjongSuitNumber SuitNumber { get; private set; }

    /// <summary>
    /// Is this tile a Red Bonus (akidora) Tile?
    /// </summary>
    /// <remarks>
    /// This has no effect on Equality for a mahjong tile
    /// </remarks>
    public bool IsRedBonus { get; private set; }

    #endregion

    #region Constructor

    /// <summary>
    /// Create a new Mahjong suit tile, with a give suit type and number,
    /// and optionally if the tile is a Red Bonus
    /// </summary>
    /// <param name="suitType">suit of the tile</param>
    /// <param name="suitNumber">number of the tile</param>
    /// <param name="isRedBonus">flag of the</param>
    public MahjongSuitTile(MahjongSuitType suitType, MahjongSuitNumber suitNumbe
r,
                           bool isRedBonus = false)
    {
        if (!Enum.IsDefined(typeof(MahjongSuitType), suitType))
            throw new ArgumentException(
                string.Format("'{0}' is not a valid suit type",
                suitType), "suitType");
        if (!Enum.IsDefined(typeof(MahjongSuitNumber), suitNumber))
            throw new ArgumentException(
                string.Format("'{0}' is not a valid suit number",
                suitNumber), "suitNumber");

        this.SuitType = suitType;
        this.SuitNumber = suitNumber;
        this.IsRedBonus = isRedBonus;
    }

    /// <summary>
    /// Create a new Mahjong suit tile, with a give suit type and number,
    /// and optionally if the tile is a Red Bonus
    /// </summary>
    /// <param name="suitType">suit of the tile</param>
    /// <param name="suitNumber">number of the tile</param>
    /// <param name="isRedBonus">flag of the</param>
    public MahjongSuitTile(MahjongSuitType suitType, int suitNumber, bool isRedB
onus = false)
        : this(suitType, (MahjongSuitNumber)suitNumber, isRedBonus) { }

    #endregion

    #region Protected Override Members

    /// <summary>
    /// Override for implementation details of equating Mahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override bool EqualToImpl(MahjongTile other)
    {
        if (Object.ReferenceEquals(other, null))
            return false;
        if (Object.ReferenceEquals(other, this))
            return true;

        MahjongSuitTile otherSuitTile = other as MahjongSuitTile;
        if (Object.ReferenceEquals(otherSuitTile, null))
            return false;

        return (this.SuitType == otherSuitTile.SuitType) &&
               (this.SuitNumber == otherSuitTile.SuitNumber);
    }

    /// <summary>
    /// Override for implementation details of getting the hash code value for M
ahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override int GetHashCodeImpl()
    {
        return this.SuitType.GetHashCode() ^ (this.SuitNumber.GetHashCode() << 4
);
    }

    /// <summary>
    /// Override for implementation details of comparing Mahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override int CompareToImpl(MahjongTile other)
    {
        if (Object.ReferenceEquals(other, null))
            return 1;
        MahjongSuitTile otherAsSuit = other as MahjongSuitTile;
        if (Object.ReferenceEquals(otherAsSuit, null))
            return -1; //suits are smaller
        else
        {
            int suitCompare = this.SuitType - otherAsSuit.SuitType;
            if (suitCompare != 0)
                return suitCompare;
            else return this.SuitNumber - otherAsSuit.SuitNumber;
        }
    }

    #endregion
}

/// <summary>
/// A Mahjong tile that's an honor tile
/// </summary>
public class MahjongHonorTile : MahjongTile
{

    #region Public Properties (read only)

    public MahjongHonorType HonorType { get; private set; }

    #endregion

    #region Constructor

    public MahjongHonorTile(MahjongHonorType honorType)
    {
        if (!Enum.IsDefined(typeof(MahjongHonorType), honorType))
            throw new ArgumentException(
                string.Format("'{0}' is not a valid honor type",
                honorType), "honorType");

        this.HonorType = honorType;
    }

    #endregion

    #region Protected Override Members

    /// <summary>
    /// Override for implementation details of equating Mahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override bool EqualToImpl(MahjongTile other)
    {
        if (Object.ReferenceEquals(other, null))
            return false;
        if (Object.ReferenceEquals(other, this))
            return true;

        MahjongHonorTile otherHonorTile = other as MahjongHonorTile;
        if (Object.ReferenceEquals(otherHonorTile, null))
            return false;

        return this.HonorType == otherHonorTile.HonorType;
    }

    /// <summary>
    /// Override for implementation details of getting the hash code value for M
ahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override int GetHashCodeImpl()
    {
        return this.HonorType.GetHashCode();
    }

    /// <summary>
    /// Override for implementation details of comparing Mahjong Tiles
    /// </summary>
    /// <param name="other">another Mahjong Tile</param>
    /// <returns></returns>
    protected override int CompareToImpl(MahjongTile other)
    {
        if (Object.ReferenceEquals(other, null))
            return 1;

        MahjongHonorTile otherAsHonor = other as MahjongHonorTile;
        if (object.ReferenceEquals(otherAsHonor, null))
            return 1; // honors are bigger
        else
            return this.HonorType - otherAsHonor.HonorType;
    }

    #endregion

}

Here are my observations:

     * Working through equality for disjoint subclasses was an interesting
       journey. I needed both a solution that would have each subclass
       determine its own definition for equating, comparing, and
       generating a hash code and a mechanism for the base class to call
       the correct method for each possible situation. The protected
       abstract methods leverage C#'s built-in mechanism for doing this.
     * What was really surprising for me is that I didn't have to
       specifically implement the interfaces in the subclasses, even
       though they contained the implementation.
     * Since I was defining operators for MahjongTile objects, I was
       careful to not use any operators to compare them. It's arguably
       paranoid to use Object.ReferenceEquals when comparing to null, but
       I felt it was better to be safe.
     * As I was working out the details of defining equality, unit-testing
       both helped me find typos and ensure correct behaviour as a
       re-factored.
     * The enums determine both the range of acceptable values and the
       ordering of tiles. This includes the overloaded constructor for
       suit tiles that takes in an integer for the suit number.

Source

   The source code for this project is at [130]ruleofready.codeplex.com. I
   have unit tests there as well.

Next

   Next time, I'll be creating the engine that will make use of the tiles.

History

     * Sep. 25, 2013: Created article
     * Sep. 28, 2013: Added in second implementation and description of
       Mahjong

License

   This article, along with any associated source code and files, is
   licensed under [131]The Code Project Open License (CPOL)

About the Author

   [member_unknown.gif]
   [132]Christopher Stevenson
   Software Developer
   United States United States
   I'm a software developer that works with a small team on websites in
   .Net. Software development is a career of constant learning, and here
   I'm learning by sharing.
   Follow on   [133]LinkedIn [134]LinkedIn
   [135]Article Top

Comments and Discussions


   You must [136]Sign In to use this message board.

   Search this forum ____________________  Go

                                                               [X] Profile
   popups    Spacing[Relaxed]  Noise[Very High]  Layout[Open All_____]  Pe
                                                      r page[10]    Update


   First Prev Next


 General [137]My vote of 5 [138]Pin protector [139]Pete O'Hanlon
                                                                 28-Sep-13 23:03



   Much better. This is a fine introduction. I look forward to seeing how
   this series progresses.
   [140]Sign In·[141]View Thread·[142]Permalink
   Question [143]A Point on Refactoring [144]Pin professional [145]Nagy
   Vilmos 26-Sep-13 3:34


   If you look at your tile class, it should be split into three:

public abstract class MahjongTile {
  // basic stuff
}

public class HonourTile
    extends MahjongTile {
  // honour stuff
}

public class SuitTile
    extends MahjongTile {
  // suit stuff
}


   When you encounter a piece of behaviour that is based on a switch,
   known at instantiation, that will never change it should be moved out
   into its own subclass.
   speramus in juniperus
   [146]Sign In·[147]View Thread·[148]Permalink
   Last Visit: 31-Dec-99 18:00     Last Update: 1-Oct-13 12:57
                                                               [149]Refresh 1

   General General    News News    Suggestion Suggestion    Question
   Question    Bug Bug    Answer Answer    Joke Joke    Rant Rant    Admin
   Admin

   Use Ctrl+Left/Right to switch messages, Ctrl+Up/Down to switch threads,
   Ctrl+Shift+Left/Right to switch pages.
   About Article
   The beginning of Rule of Ready
   Type          [150]Article
   Licence       [151]CPOL
   First Posted  26 Sep 2013
   Views         2,656
   Downloads     4
   Bookmarked    6 times
   [152]Dev[153]Intermediate[154]C#5
   [155].NET4.5
   [156][print.gif] [157][email.gif]
   Top News

   [158]Tim Cook slams Android, citing low usage
   Get the [159]Insider News free each morning.
   Related Videos
   [160][cptv100x80ms.jpg]
   [161][cptv100x80ms.jpg]
   Related Articles
   [162]How to replace recursive functions using stack and while-loop to
   avoid the stack-overflow
   [163]Getting Started with Drools.NET
   [164]Complex Business Rules on your ASP.NET Website in Several Minutes
   [165]Work Load System
   [166]Using ClearCase winking mechanism with new Visual Studio versions
   [167]Introduction to GOLD Parser
   [168]Evaluation Engine
   [169]How to Validate ASP.NET Web Forms Using a Business Rules Engine
   [170]How to execute multiple long running SQL Statements Asynchronously
   in small chunks
   [171]AngleSharp
   [172]The Standalone Programmer: Innovative Software Development
   [173]Versioning Controlled Build
   [174]Custom Rule Engine in WPF - MVVM
   [175]Compiler Patterns
   [176]Using C#, OpenXML, and Microsoft SQL Server 2000 to create a
   multi-threaded Rules Engine Webservice
   [177]Trying to be agile in a schedule-driven organization
   [178]Android: ViewFlipper Touch Animation like News & Weather
   [179]Easily Create Your Own Parser
   [180]Parsing XML in C++ using the YARD Parser
   [181]Azure Animal Adoption Agent and Lost & Found
   [182]Modeling Supertypes and Subtypes: Part 2
   [183]Permalink | [184]Advertise | [185]Privacy | [186]Mobile
   Web01 | 2.6.1309030.1 | Last Updated 26 Sep 2013
   Article Copyright 2013 by Christopher Stevenson
   Everything else Copyright © [187]CodeProject, 1999-2013
   [188]Terms of Use
   Layout: [189]fixed | [190]fluid

References

   1. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=1
   2. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=2
   3. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=3
   4. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=6
   5. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=18
   6. http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=4
   7. http://www.codeproject.com/webservices/LoungeRSS.aspx
   8. http://www.codeproject.com/info/OpenSearch.xml
   9. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data#Main
  10. file://localhost/
  11. http://codeproject.TV/
  12. file://localhost/Forums/1829610/CodeProject-TV.aspx
  13. https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f659044%2fBeginning-The-Rule-of-Ready-project%3futm_source%3d54j33dh4%26utm_medium%3dtwitter
  14. file://localhost/script/Membership/SendPassword.aspx?rp=%2fArticles%2f659044%2fBeginning-The-Rule-of-Ready-project%3futm_source%3d54j33dh4%26utm_medium%3dtwitter
  15. file://localhost/script/Membership/OAuthLogOn.aspx?auth=Facebook
  16. file://localhost/script/Membership/OAuthLogOn.aspx?auth=Google
  17. file://localhost/script/Membership/OAuthLogOn.aspx?auth=LinkedIn
  18. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data#Main
  19. http://www.codeproject.com/
  20. file://localhost/script/Articles/Latest.aspx
  21. file://localhost/script/Content/SiteMap.aspx
  22. file://localhost/search.aspx
  23. file://localhost/script/Articles/Latest.aspx?at=1,3,7
  24. file://localhost/script/Articles/Latest.aspx?at=6
  25. file://localhost/script/Articles/TopArticles.aspx?ta_so=5
  26. file://localhost/search.aspx?aidlst=152&sa_us=True
  27. file://localhost/script/Articles/BlogArticleList.aspx
  28. file://localhost/info/Submit.aspx
  29. file://localhost/Forums/1641/Article-Writing.aspx
  30. file://localhost/script/Awards/CurrentCompetitions.aspx?cmpTpId=1
  31. file://localhost/script/Articles/Submit.aspx
  32. file://localhost/script/Articles/BlogFeed.aspx
  33. file://localhost/script/Answers/List.aspx?tab=active
  34. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data#_comments
  35. file://localhost/Questions/ask.aspx
  36. file://localhost/script/Answers/List.aspx?tab=unanswered
  37. file://localhost/script/Answers/List.aspx?tab=active
  38. file://localhost/script/Answers/List.aspx?tab=active&alltags=true&tags=81
  39. file://localhost/script/Answers/List.aspx?tab=active&alltags=true&tags=85
  40. file://localhost/script/Answers/List.aspx?tab=active&alltags=true&tags=842
  41. file://localhost/script/Answers/List.aspx?tab=active&alltags=true&tags=308
  42. file://localhost/script/Answers/List.aspx?tab=active&alltags=true&tags=78
  43. file://localhost/script/Forums/List.aspx
  44. file://localhost/script/Forums/List.aspx
  45. file://localhost/Forums/1580997/Application-Lifecycle.aspx
  46. file://localhost/Forums/1533717/Running-a-Business.aspx
  47. file://localhost/Forums/1533716/Sales-Marketing.aspx
  48. file://localhost/Forums/1651/Collaboration-Beta-Testing.aspx
  49. file://localhost/Forums/3304/Work-Training-Issues.aspx
  50. file://localhost/Forums/369270/Design-and-Architecture.aspx
  51. file://localhost/Forums/12076/ASP-NET.aspx
  52. file://localhost/Forums/1580226/JavaScript.aspx
  53. file://localhost/Forums/1647/C-Cplusplus-MFC.aspx
  54. file://localhost/Forums/4486/ATL-WTL-STL.aspx
  55. file://localhost/Forums/3785/Managed-Cplusplus-CLI.aspx
  56. file://localhost/Forums/1827459/Adobe-Technologies.aspx
  57. file://localhost/Forums/1649/Csharp.aspx
  58. file://localhost/Forums/1627782/Free-Tools.aspx
  59. file://localhost/Forums/1827460/Objective-C.aspx
  60. file://localhost/Forums/1832431/Ruby-On-Rails.aspx
  61. file://localhost/Forums/1725/Database.aspx
  62. file://localhost/Forums/186301/Hardware-Devices.aspx
  63. file://localhost/Forums/1644/System-Admin.aspx
  64. file://localhost/Forums/1606152/Hosting-and-Servers.aspx
  65. file://localhost/Forums/1643/Java.aspx
  66. file://localhost/Forums/1650/NET-Framework.aspx
  67. file://localhost/Forums/13695/Mobile.aspx
  68. file://localhost/Forums/1653293/VS-2012-2013-NET-4-5-1.aspx
  69. file://localhost/Forums/1540733/Sharepoint.aspx
  70. file://localhost/Forums/1004257/Silverlight-WPF.aspx
  71. file://localhost/Forums/1646/Visual-Basic.aspx
  72. file://localhost/Forums/1640/Web-Development.aspx
  73. file://localhost/Forums/1645/Site-Bugs-Suggestions.aspx
  74. file://localhost/Feature/
  75. http://CodeProject.TV/
  76. file://localhost/script/Catalog/List.aspx
  77. file://localhost/script/Awards/CurrentCompetitions.aspx?cmpTpId=1&awsac=true
  78. file://localhost/script/News/List.aspx
  79. file://localhost/Feature/Insider/
  80. file://localhost/script/Mailouts/Archive.aspx?mtpid=1
  81. file://localhost/script/Surveys/List.aspx
  82. file://localhost/KB/showcase/
  83. file://localhost/script/ResearchLibrary/Index.aspx
  84. file://localhost/Info/Stuff.aspx
  85. file://localhost/Lounge.aspx
  86. file://localhost/Insider.aspx
  87. file://localhost/Lounge.aspx
  88. file://localhost/Feature/WeirdAndWonderful.aspx
  89. file://localhost/Forums/1536756/The-Soapbox.aspx
  90. file://localhost/Forums/1738007/Press-Releases.aspx
  91. file://localhost/script/Membership/Profiles.aspx
  92. file://localhost/script/Awards/MVPWinners.aspx
  93. file://localhost/script/Membership/Profiles.aspx?mgtid=1&mgm=True
  94. file://localhost/Forums/1580229/Hindi.aspx
  95. file://localhost/Forums/1580229/Hindi.aspx
  96. file://localhost/Forums/1580230/Chinese.aspx
  97. file://localhost/KB/FAQs/
  98. file://localhost/info/guide.aspx
  99. file://localhost/KB/FAQs/
 100. file://localhost/Questions/ask.aspx
 101. file://localhost/Forums/1645/Site-Bugs-Suggestions.aspx
 102. file://localhost/Forums/1641/Article-Writing.aspx
 103. file://localhost/script/Content/SiteMap.aspx
 104. http://developermedia.com/
 105. file://localhost/info/Jobs/
 106. file://localhost/info/about.aspx
 107. file://localhost/script/Content/SiteMap.aspx
 108. file://localhost/Chapters/6/General-Programming.aspx
 109. file://localhost/KB/game/
 110. file://localhost/KB/game/#Games
 111. file://localhost/script/Articles/PrevNextLookup.aspx?aid=659044&at=1&secId=69
 112. file://localhost/script/Articles/ViewDownloads.aspx?aid=659044
 113. file://localhost/script/Articles/Statistics.aspx?aid=659044
 114. file://localhost/script/Articles/ListVersions.aspx?aid=659044
 115. file://localhost/script/Articles/ListAlternatives.aspx?aid=659044
 116. file://localhost/home/stanley/code/cs595/assignment3/MasterPages/#_comments
 117. file://localhost/script/Membership/View.aspx?mid=10103433
 118. file://localhost/KB/FAQs/RatingReputationFAQ.aspx#noisefilter
 119. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data#SignUp
 120. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data
 121. https://twitter.com/share
 122. file://localhost/KB/game/659044/ruleofready-Sep-28-2013.zip
 123. https://ruleofready.codeplex.com/SourceControl/latest
 124. http://www.osamuko.com/
 125. http://arcturus.su/wiki/Main_Page
 126. http://www.uspml.com/site/dload.php?id=2
 127. http://reachmahjong.com/en/
 128. http://www.gamedesign.jp/flash/mahjong/mahjong_e.html
 129. http://msdn.microsoft.com/en-us/library/vstudio/dd183755.aspx
 130. https://ruleofready.codeplex.com/
 131. http://www.codeproject.com/info/cpol10.aspx
 132. file://localhost/Members/User-10069234
 133. http://www.linkedin.com/profile/view?id=wwwlinkedincompubchristopherstevenson4644653a
 134. http://www.linkedin.com/profile/view?id=wwwlinkedincompubchristopherstevenson4644653a
 135. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter#_articleTop
 136. https://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f659044%2fBeginning-The-Rule-of-Ready-project%3futm_source%3d54j33dh4%26utm_medium%3dtwitter%26fid%3d1843333%26df%3d90%26mpp%3d10%26noise%3d1%26prof%3dTrue%26sort%3dPosition%26view%3dQuick%26spc%3dRelaxed
 137. file://localhost/Messages/4669518/My-vote-of-5.aspx
 138. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data
 139. file://localhost/script/Membership/View.aspx?mid=213147
 140. http://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f659044%2fBeginning-The-Rule-of-Ready-project%3futm_source%3d54j33dh4%26utm_medium%3dtwitter
 141. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&fid=1843333&df=90&mpp=10&sort=Position&spc=Relaxed&tid=4669518
 142. file://localhost/Messages/4669518/My-vote-of-5.aspx
 143. file://localhost/Messages/4668088/A-Point-on-Refactoring.aspx
 144. file://localhost/home/stanley/code/cs595/assignment3/q1/urldump/rawHtml760.data
 145. file://localhost/script/Membership/View.aspx?mid=4193656
 146. http://www.codeproject.com/script/Membership/LogOn.aspx?rp=%2fArticles%2f659044%2fBeginning-The-Rule-of-Ready-project%3futm_source%3d54j33dh4%26utm_medium%3dtwitter
 147. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&fid=1843333&df=90&mpp=10&sort=Position&spc=Relaxed&tid=4668088
 148. file://localhost/Messages/4668088/A-Point-on-Refactoring.aspx
 149. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&fid=1843333&df=90&mpp=10&noise=1&prof=True&sort=Position&view=Quick&spc=Relaxed
 150. file://localhost/script/Articles/Types.aspx?#Article
 151. http://www.codeproject.com/info/cpol10.aspx
 152. file://localhost/Tags/Dev
 153. file://localhost/Tags/Intermediate
 154. file://localhost/Tags/C--hash--5
 155. file://localhost/Tags/.NET4.5
 156. file://localhost/Articles/659044/Beginning-the-Rule-of-Ready-Project?display=Print
 157. file://localhost/script/common/TellFriend.aspx?obtid=2&obid=659044
 158. http://mashable.com/2013/09/19/tim-cook-android-low-usage/
 159. file://localhost/Feature/Insider/
 160. http://codeproject.tv/video/5021309/mvc_3_exploring_an_mvc_project_part_4
 161. http://codeproject.tv/video/5021008/entity_framework_building_a_code-first_database_part_1
 162. file://localhost/Articles/418776/How-to-replace-recursive-functions-using-stack-and
 163. file://localhost/Articles/29165/Getting-Started-with-Drools-NET
 164. file://localhost/Articles/220699/Complex-Business-Rules-on-your-ASP-NET-Website-in-
 165. file://localhost/Articles/38790/Work-Load-System
 166. file://localhost/Articles/120183/Using-ClearCase-winking-mechanism-with-new-Visual-
 167. file://localhost/Articles/10492/Introduction-to-GOLD-Parser
 168. file://localhost/Articles/26314/Evaluation-Engine
 169. file://localhost/Articles/241066/How-to-Validate-ASP-NET-Web-Forms-Using-a-Business
 170. file://localhost/Articles/541834/How-to-execute-multiple-long-running-SQL-Statement
 171. file://localhost/Articles/609053/AngleSharp
 172. file://localhost/Articles/3724/The-Standalone-Programmer-Innovative-Software-Deve
 173. file://localhost/Articles/5851/Versioning-Controlled-Build
 174. file://localhost/Articles/108924/Custom-Rule-Engine-in-WPF-MVVM
 175. file://localhost/Articles/286121/Compiler-Patterns
 176. file://localhost/Articles/12656/Using-Csharp-OpenXML-and-Microsoft-SQL-Server-2000
 177. file://localhost/Articles/309208/Trying-to-be-agile-in-a-schedule-driven-organizati
 178. file://localhost/Articles/69008/Android-ViewFlipper-Touch-Animation-like-News-Weat
 179. file://localhost/Articles/220042/Easily-Create-Your-Own-Parser
 180. file://localhost/Articles/9121/Parsing-XML-in-Cplusplus-using-the-YARD-Parser
 181. file://localhost/Articles/583225/Azure-Animal-Adoption-Agent-and-Lost-Found
 182. file://localhost/Articles/596175/Modeling-Supertypes-and-Subtypes-Part-2
 183. file://localhost/Articles/659044/Beginning-the-Rule-of-Ready-Project
 184. http://developermedia.com/
 185. file://localhost/info/privacy.aspx
 186. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&display=Mobile
 187. mailto:webmaster@codeproject.com
 188. file://localhost/info/TermsOfUse.aspx
 189. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&PageFlow=FixedWidth
 190. file://localhost/Articles/659044/Beginning-The-Rule-of-Ready-project?utm_source=54j33dh4&utm_medium=twitter&PageFlow=Fluid
