   [1][97aa01a6f87da85251be77792dec1d9c?s=80] [2]hp12c
     * [3]Books
     * [4]Gems
     * [5]Products
     * [6]Tags
     * [7]twitter
     * [8]github

   26 September 2013

[9]Rubyの文字列だってえにゅめらぶるしたい！

Fixnumの場合

   適当な初期値から連続する番号のリストを作りたいです。Rangeを配列展開するのが簡単そうです。
st = 37 # 初期値
n = 30  # リストの長さ

(st...(st+n)).to_a # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]

# または

[*st...(st+n)] # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]

   Fixnum#nextは次の数を返すので、これを使ってもできそうです。
st = 37 # 初期値
n = 30  # リストの長さ

n.times.map { st = st.next } # => [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 4
9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]

   でも、st = st.nextがやな感じです。しかも数字が１つずれてるし。ちょっと工夫が必要です。
st = 37
n = 30

n.times.map { st.tap { st = st.next } } # => [37, 38, 39, 40, 41, 42, 43, 44, 45
, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
, 66]

   んー。結果はいいですが、さらにやな感じが増しました。

   もっとマシな方法はないですか。

   そう、Enumeratorですね。
st = 37
st = (st..1.0/0).to_enum
st # => #<Enumerator: 37..Infinity:each>

n.times.map { st.next } # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]

   1.0/0はInfinity（浮動小数点における正の無限大）を作ります。mapのブロックの中が非常にスッキリしました。数字のズレもなく、再代入
   もない。

   Enumeratorを使う利点は、事前にその生成個数を決めなくていい点と、初期状態を復元できる点です。
st = 37
st = (st..1.0/0).to_enum

n.times.map { st.next } # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]

st.next # => 67
st.rewind
st.next # => 37

st.take(40) # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72
, 73, 74, 75, 76]

st.take_while { |i| i < 48 } # => [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]

require 'prime'

st.lazy.select { |i| Prime.prime? i }.take(20).force # => [37, 41, 43, 47, 53, 5
9, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127]

Stringの場合

   さて、本題にいきまして...。

   先の例と同様に、文字列で、適当な初期値から連続する番号のリストを作りたいです。まずはRangeの配列展開で。
st = "abc37"
ed = "abc66"
n = 30

(st..ed).to_a # => ["abc37", "abc38", "abc39", "abc40", "abc41", "abc42", "abc43
", "abc44", "abc45", "abc46", "abc47", "abc48", "abc49", "abc50", "abc51", "abc5
2", "abc53", "abc54", "abc55", "abc56", "abc57", "abc58", "abc59", "abc60", "abc
61", "abc62", "abc63", "abc64", "abc65", "abc66"]

# または

[*st..ed] # => ["abc37", "abc38", "abc39", "abc40", "abc41", "abc42", "abc43", "
abc44", "abc45", "abc46", "abc47", "abc48", "abc49", "abc50", "abc51", "abc52",
"abc53", "abc54", "abc55", "abc56", "abc57", "abc58", "abc59", "abc60", "abc61",
 "abc62", "abc63", "abc64", "abc65", "abc66"]

   nから最後の番号を作るのが面倒なので、手抜きしました。

   Stringも#nextを持っているので、同じようにやってみます。
st = "abc37"
n = 30

n.times.map { st.tap { st = st.next } } # => ["abc37", "abc38", "abc39", "abc40"
, "abc41", "abc42", "abc43", "abc44", "abc45", "abc46", "abc47", "abc48", "abc49
", "abc50", "abc51", "abc52", "abc53", "abc54", "abc55", "abc56", "abc57", "abc5
8", "abc59", "abc60", "abc61", "abc62", "abc63", "abc64", "abc65", "abc66"]

   できましたが、mapのブロック内がやっぱりやな感じですね。

   と、ここでStringにはFixnumにはない、String#next!（破壊的メソッド）があるのを思い出しました。これ使ってもう少しマシにで
   きますか。
st = "abc37"
n = 30

n.times.map { st.next! } # => ["abc67", "abc67", "abc67", "abc67", "abc67", "abc
67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "ab
c67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67", "a
bc67", "abc67", "abc67", "abc67", "abc67", "abc67", "abc67"]

   この結果に、びっくりしてる人いますか？なら、これ読んでみてください。面倒な人はタイトルだけでも覚えて下さい。

     [10]Rubyのエニュメレータ内での破壊行為は止めてください!

Stringでえにゅめらぶる

   そんなわけで、文字列でも、効率的できれいなコードを書くために、エニュメレータに頼りたくなるという訳です。ところが、結果はこうです。
st = "abc37".to_enum
n = 30

n.times.map { st.next } # =>

# ~> -:4:in `next': undefined method `each' for "abc37":String (NoMethodError)

   そこで、分別のないモンキーパッチャーの出番です！
module EnuString
  def to_enum
    Enumerator.new do |y|
      myself = self
      loop { y << myself; myself = myself.next }
    end
  end
end

String.send(:include, EnuString)

st = "abc37".to_enum
n = 30

n.times.map { st.next } # => ["abc37", "abc38", "abc39", "abc40", "abc41", "abc4
2", "abc43", "abc44", "abc45", "abc46", "abc47", "abc48", "abc49", "abc50", "abc
51", "abc52", "abc53", "abc54", "abc55", "abc56", "abc57", "abc58", "abc59", "ab
c60", "abc61", "abc62", "abc63", "abc64", "abc65", "abc66"]

   めでたし、めでたし。
     __________________________________________________________________

     * [11]このエントリーをはてなブックマークに追加
     *
     *





     * [12]← Previous
     * [13]Archive
     * [14]Next →
     __________________________________________________________________

   Please enable JavaScript to view the [15]comments powered by Disqus.
   [16]blog comments powered by Disqus

   [17]ruby_trivia

   100円で好評発売中！
   [18]M'ELBORNE BOOKS
     __________________________________________________________________

     * [19]このエントリーをはてなブックマークに追加
     *
     *





   [20]Creative Commons License kyoendo 2012 with help from [21]Jekyll
   Bootstrap and [22]Twitter Bootstrap

References

   Visible links
   1. file://localhost/
   2. file://localhost/
   3. file://localhost/books/
   4. https://rubygems.org/profiles/melborne/
   5. http://welove.herokuapp.com/?keyword=merborne
   6. file://localhost/tags.html
   7. https://twitter.com/merborne
   8. https://github.com/melborne
   9. file://localhost/2013/09/26/be-string-enumerable
  10. http://melborne.github.io/2011/12/15/Ruby-Enumerator/
  11. http://b.hatena.ne.jp/entry/http://melborne.github.io/2013/09/26/be-string-enumerable/
  12. file://localhost/2013/09/25/count-methods-of-ruby-3
  13. file://localhost/
  14. file://localhost/2013/09/27/auto-attr-set-in-ruby
  15. http://disqus.com/?ref_noscript
  16. http://disqus.com/
  17. file://localhost/books/
  18. file://localhost/books/
  19. http://b.hatena.ne.jp/entry/http://melborne.github.io/2013/09/26/be-string-enumerable/
  20. http://creativecommons.org/licenses/by-nc/2.1/jp/
  21. http://jekyllbootstrap.com/
  22. http://twitter.github.com/bootstrap/

   Hidden links:
  24. http://feeds.feedburner.com/github/melborne
  25. http://feeds.feedburner.com/github/melborne
  26. https://twitter.com/merborne
  27. https://twitter.com/share
  28. https://twitter.com/merborne
  29. https://twitter.com/share
