   #[1]The Professionals Point - Atom [2]The Professionals Point - RSS
   [3]The Professionals Point - Atom

[4]The Professionals Point

   My Online Notes of ASP.NET, C#, WCF, WPF, WF, Entity Framework, LINQ,
   Delphi, PHP, Oracle, SQL Server, HTML5, CSS3, Javascript, AJAX, jQuery
   and lot more...

Pages

     * [5]Home
     * [6]About Naresh Kumar
     * [7]Advertise with us
     * [8]Online Degrees Worldwide

Friday, 24 May 2013

C# Best Coding Practices for Developers to Follow

   C# Best Coding Practices for Developers to Follow
   In this article, I will try to list down some C# best practices which a
   C# developer must follow during development of a project. These common
   guidelines include use of proper naming conventions in C#, where and
   why to use value type and reference type variables, using properties
   instead of public variables in the class, using nullable types, proper
   exception handling, using runtime constants instead of compile time,
   using StringBuilder for concatenation, using foreach for collections,
   proper handling of comments and regions, use of IDisposable Interface
   etc. Lets dive deep into these C# best practices.
   1. Use proper naming convention
   A) Always use Camel case (A word with the first letter lowercase, and
   the first letter of each subsequent word-part capitalized) while
   declaring variables.
   B) Use Pascal (A word with the first letter capitalized, and the first
   letter of each subsequent word-part capitalized) naming format while
   declaring Properties.
   C) Avoid all uppercase or lowercase names for properties, variables or
   method names. Use all uppercase when declaring const variables.
   D) Never use a name that begins with a numeric character.
   E) Always prefer meaningful names for your class, property, method,
   etc. This will be very useful for you to maintain the code in future.
   For example, “P” will not give proper meaning for a class. You will
   find it difficult to know about the class. But if you use “Person”, you
   will easily understand by it.
   F) Never build a different name varied by capitalization. It is a very
   bad practice. It will not be useful while developing code, as you will
   not know what is “person” class and what is “Person” class!!! But from
   the above scenario, it can be very easily understandable that “person”
   is an instance variable of “Person” class.
   G) DO NOT use Abbreviations.
   H) DO NOT use Underscores in identifiers.
   I) Don't use the same name used in .NET Framework. People who are new
   to your code have great difficulty to understand it easily.
   J) Avoid adding prefixes or suffixes for your identifiers.
   K) Always use “I” as prefix for Interfaces. This is a common practice
   for declaring interfaces.
   L) Always add “Exception” as suffix for your custom exception class. It
   will give better visibility to your exception class.
   M) Never prefix or suffix the class name to its property names. It will
   unnecessarily increase the property name. If “Firstname” is a property
   of “Person” class, you can easily identify it from that class directly.
   No need to write “PersonFirstname” or “FirstnameOfPerson”.
   N) Prefix “Is”, “Has” or “Can” for boolean properties like “IsVisible”,
   “HasChildren”, “CanExecute”. These give proper meaning to the
   properties.
   O) Don't add prefix for your controls, instead write proper name to
   identify the control.
   P) Declare all member variables at the top of a class, with static
   variables at the very top. This will make your code more readable. You
   dont need to find the variable in class if they are declared at the top
   and static variables are loaded at first so they have to be on very top
   so code flow and your code match.
   2. Decide between value type and reference type.
   Whenever you need to create a type, first ask yourself a question “What
   you want and Why you want it?”. If you could answer your question, you
   can decide between the type you want to use. If you want to store your
   data, use value types and when you want to create an instance of your
   type by defining the behavior, use reference types. Value types are not
   Polymorphic whereas, the Reference types can be. Value types are most
   efficient in terms of memory utilization over reference types and
   produce less help fragmentation & garbage. If you want to pass values
   to a method implementation, decide what you want to do and based upon
   your requirement, decide between value types and reference types. Use
   of reference type variables actually change the original value but use
   of value type will create a copy of the original variable and pass
   across the method. Thus, it protects your original value from
   accidental changes.

   3. Always use Properties instead of Public Variables
   Reason behind this is, it makes your code properly encapsulated in OOPs
   environment. By using getters & setters, you can restrict the user
   directly accessing the member variables. You can restrict setting the
   values explicitly thus making your data protected from accidental
   changes. Also, properties give you easier validation for your data.
   4. Use Nullable data types whenever required
   Sometimes, you may need to store null as the value of an integer,
   double or boolean variable. So how can you do this? The normal
   declaration doesn't allow you to store the null as value. C# now has
   the feature of nullable data types. Just a small change in your
   declaration. That’s it!!! You are good to go for storing nullvalues.
   Only you have to use the “?” modifier. You have to place it just after
   the type.

   5. Prefer Runtime constants over Compile time constants

   Runtime constants are always preferred than the Compile time constants.
   Here you may ask what is runtime constant and what is compile time
   constant. Runtime constants are those which are evaluated at the
   runtime and declared with the keyword “readonly”. On the other side,
   compile time constants are static, evaluated at the time of compilation
   and declared with the keyword “const”.
   6. Prefer String.Format() or StringBuilder for string concatenation
   Any operation in the string will create a new object as string is a
   mutable object. If you want to concatenate multiple strings, it is
   always better to use string.Format() method or StringBuilder class for
   the concatenation.

   7. Always prefer Foreach() loop
   The foreach statement is a variation of do, while or for loops. It
   actually generates the best iteration code for any collection you have.
   When you are using collections, always prefer to use the foreach loop
   as the C# compiler generates the best iteration code for your
   particular collection. Have a look into the following implementation:

   8. Properly utilize Try/Catch/Finally block
   Properly utilize the try/catch/finally blocks. If you know that the
   code you wrote may throw some Exception, use the try/catch block for
   that piece of code to handle the exception. If you know that, the fifth
   line of your 10 lines code may throw exception, it is advisable to wrap
   that line of code only with thetry/catch block. Unnecessary surrounding
   lines of code with try/catch will slow down your application. Use the
   finally block to clean up any resources after the call. If you are
   doing any database call, close the connection in that block. The
   finally block runs whether your code executes properly or not. So,
   properly utilize it to cleanup the resources.
   Catch only that Exception that you can handle. Catch only those which
   you expect and order it accordingly. Finally at the end, if you want,
   add the generic Exception to catch any other unknown exceptions. This
   gives you a proper way to handle the exception. Suppose, your code is
   throwingNullReferenceException or ArgumentException. If you directly
   use the Exception class, it will be very difficult to handle in your
   application. But by catching the exception properly, you can handle the
   problem easily.

   9. Use IDisposable Interface
   Use IDisposable interface to free all the resources from the memory.
   Once you implement IDisposableinterface in your class, you will get a
   Dispose() method there. Write code there to free the resources.

   10. Keep Class size small
   A class should adhere to Single Responsibility Principal.
   “The single responsibility principle states that every object should
   have a single responsibility, and that responsibility should be
   entirely encapsulated by the class. All its services should be narrowly
   aligned with that responsibility.”
   "THERE SHOULD NEVER BE MORE THAN ONE REASON FOR A CLASS TO CHANGE."
   Each responsibility is an axis of change. When the requirements change,
   that change will be manifest through a change in responsibility amongst
   the classes. If a class assumes more than one responsibility, then
   there will be more than one reason for it to change. If a class has
   more then one responsibility, then the responsibilities become coupled.
   Changes to one responsibility may impair or inhibit the class’ ability
   to meet the others. This kind of coupling leads to fragile designs that
   break in unexpected ways when changed.
   11. Avoid obsolete comments
   "A comment that has gotten old, irrelevant, and incorrect is obsolete.
   Comments get old quickly.  It is best not to write a comment that will
   become obsolete.  If you find an obsolete comment, it is best to update
   it or get rid of it as quickly as possible.  Obsolete comments tend to
   migrate away from the code they once described.  They become floating
   islands of irrelevance and misdirection in the code."
   Try to avoid comments on individual method or short class. Because most
   comments i have ever seen is trying to describe the purpose/intentions.
   Some cases comments are meaningless. Developers writes comments to
   increase the readability & maintainability . Make sure your comments
   are not making any noise. It will be great if you could name a method
   more meaningful instead of comments. I am suggesting because method
   names are more affective than comments. Most of the comments are
   meaningless noise.

   12. Avoid unnecessary Region in Class
   Regions are a feature of VS that allow you to surround blocks of code.
   It could be a single or multiple methods. The region exists because it
   is easier to navigate around the large file. The regions are used to
   hide ugly code or class that have exploded in size . If a class does
   too many things it also violates the Single Responsibility Principle.
   So next time whenever you will think for adding a new region to your
   file take step back and ask that is it possible to separate your region
   into a separate class.
   13. Keep methods short
   Split your logic into several small and simple methods. If methods are
   too long, sometimes it is difficult to handle them. It is always better
   to use a number of small methods based upon their functionality instead
   of putting them in a single one. If you break them in separate methods
   and in future you need to call one part, it will be easier to call
   rather than replicating the code. Also, it is easier to do unit testing
   for the small chunks rather than a big code. So, whenever you are
   writing a piece of code, first think of what you want to do. Based upon
   that, extract your code in small simple methods and call them from
   wherever you want. In general, a method should never be more than 10-15
   lines long.

   14. Avoid too many parameters
   Declare a class instead of too many parameters. Creating a class that
   puts all these parameters together. This is generally a better design
   and valuable abstraction.
   15. Avoid complex expression
   Complex expression have some meaning behind them it is just hidden by
   those multiple expressions. We can Encapsulated the complex expression
   into that object by using a property. That code will be easier to read.
   16. Consider Warnings as Error
   We should remove warning as much as possible so they never turn into
   runtime errors.
   17. Avoid multiple Exit points
   This rule is very easy to follow. Developer should try to maintain
   single exit point and entry point
   Conclusion: Always write better code. From my point of view better code
   has following characteristics:
   A) Code that is easy to write, modify and extend
   B) Code that has values and cares about quality
   C) Code that is clean and talks/convey meaning

   Why we need conventions
   A) They help you transfer knowledge across projects
   B) They help you learn code more quickly on a new project
   C) They emphasize relationships among related items
   Posted by [9]Naresh Kumar at [10]18:27
   [11]Email This[12]BlogThis![13]Share to Twitter[14]Share to Facebook
   Labels: [15]DOTNET
   Reactions:

               IFRAME: [16]reactions

5 comments:

    1. [anon36.png]
       Anonymous[17]27 May 2013 05:30
       #6: Well, not really true. Need to know what you are doing, eg:
       http://ayende.com/blog/2625/the-truth-about-string-concatenation-pe
       rformance
       [18]Reply[19]Delete
    2. [anon36.png]
       Anonymous[20]28 May 2013 06:04
       I am not sure I necessarily agree with #7. A while loop vs a
       foreach give the same tick time for operations. I think this is
       opinion.
       Example:
       Stopwatch stopWatch = new Stopwatch();
       int[] myArr = new int[100000];
       int counter = 99999;
       var timeSpans = new List();
       int n = 1;
       stopWatch.Start();
       while (counter >= 0)
       {
       n += 1;
       counter -= 1;
       }
       stopWatch.Stop();
       timeSpans.Add( stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       stopWatch.Start();
       while (counter >= 0)
       {
       n += 1;
       counter -= 1;
       }
       stopWatch.Stop();
       timeSpans.Add(stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       stopWatch.Start();
       while (counter >= 0)
       {
       n += 1;
       counter -= 1;
       }
       stopWatch.Stop();
       timeSpans.Add(stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       var whileAverageTicks = Convert.ToInt64(timeSpans.Average(ts =>
       ts.Ticks));
       Console.WriteLine("While average ticks: " +
       whileAverageTicks.ToString());
       timeSpans.Clear();
       stopWatch.Start();
       foreach (var item in myArr)
       {
       n += 1;
       }
       stopWatch.Stop();
       timeSpans.Add(stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       stopWatch.Start();
       foreach (var item in myArr)
       {
       n += 1;
       }
       stopWatch.Stop();
       timeSpans.Add(stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       stopWatch.Start();
       foreach (var item in myArr)
       {
       n += 1;
       }
       stopWatch.Stop();
       timeSpans.Add(stopWatch.Elapsed);
       stopWatch.Reset();
       n = 1;
       var foreachAverageTicks = Convert.ToInt64(timeSpans.Average(ts =>
       ts.Ticks));
       Console.WriteLine("foreach average ticks: " +
       whileAverageTicks.ToString());
       Console.Read();
       [21]Reply[22]Delete
       [23]Replies
         1. [1a64a30e261b0419616b0987b7305daf.png]
            [24]Mackenzie Zastrow[25]24 September 2013 21:49
            A while loop may be just as performant, but A. it didn't say
            foreach would be faster than a while loop, just that it would
            be the most efficient (read: just as a fast as a while loop),
            and B. In the places where you can use a foreach, would a
            while loop be as readable?
            [26]Delete
            [27]Reply
    3. [photo.jpg]
       [28]Sudhir DBAKings[29]28 June 2013 03:36
       Nice post very helpful
       [30]dbakings
       [31]Reply[32]Delete
    4. [1a64a30e261b0419616b0987b7305daf.png]
       [33]Mackenzie Zastrow[34]24 September 2013 21:50
       Some good tips, but too many inaccuracies/confusing sections to
       recommend. For instance:
       - Do *not* use all-uppercase names for constants - this is a C/C++
       convention, not C#
       (http://stackoverflow.com/questions/242534/c-sharp-naming-conventio
       n-for-constants).
       - The section "Decide between value type and reference type." is
       way too *brief* - it covers too many broad topics with too little
       of descriptions, which only serves to confuse developers rather
       than inform them
       - The section "Properly utilize Try/Catch/Finally block" has
       multiple problems:
       1. try-catches do not slow down programs noticeably if at all
       (http://stackoverflow.com/questions/1308432/do-try-catch-blocks-hur
       t-performance-when-exceptions-are-not-thrown)
       2. Do not catch the general Exception class "if you want". it
       should be used when you need to, not when "you want" to
       - For the IDisposable section, you should go into why you implement
       IDisposable instead of using some random method like CleanUp(). The
       power of IDisposable is that everyone knows about it, and the
       language has support for it (via using block).
       - I disagree with the "Avoid obsolete comments" section. I think
       that you shouldn't let comments become obsolete, but the section
       reads as if you shouldn't add as many comments because the comments
       will become obsolete. Instead, you should encourage keeping
       comments up to date all the time.
       - The "Avoid complex expression" section is confusing and doesn't
       really make sense. Why would you replace an expression with a
       property?
       - And as always, I greatly disagree with "Avoid multiple Exit
       points". I'd rather exit early than have 5 nested if checks as you
       check for parameter validness.
       [35]Reply[36]Delete

   [37]Add comment
   [38]Load more...

   [39]Newer Post [40]Older Post [41]Home
   Subscribe to: [42]Post Comments (Atom)

About Me

   [43]My Photo

   [44]Naresh Kumar
          New Delhi, India
          Software Engineer

   [45]View my complete profile

Sponsors

   [46]Advertise
   [47]Advertise

Categories

     * [48]Softwares (139)
     * [49]DOTNET (107)
     * [50]Online Degrees (87)
     * [51]Management (60)
     * [52]Delphi (52)
     * [53]Others (25)
     * [54]Oracle (17)
     * [55]HTML (15)
     * [56]PHP (11)
     * [57]CSS (8)
     * [58]Unix (7)
     * [59]AJAX (6)
     * [60]Javascript (6)
     * [61]Web Design (6)
     * [62]jQuery (5)
     * [63]C++ (4)
     * [64]XML (4)
     * [65]Phonegap (3)
     * [66]Ruby On Rails (1)

Popular Posts

     * [67]Basic Javascript Technical Interview Questions and Answers for
       Web Developers - Objective and Subjective
     * [68]21 Most Frequently Asked Basic Unix Interview Questions and
       Answers
     * [69]HTTP vs HTTPS: Similarities and Differences
     * [70]35 Tricky and Complex Unix Interview Questions and Commands
       (Part 1)
     * [71]Commonly Asked WPF Interview Questions and Answers (Part 1)
     * [72]DECODE Function vs CASE Statement in Oracle
     * [73]How to create dynamic tables in HTML using javascript at
       runtime?
     * [74]DIV vs TABLE tag: Which one to use?
     * [75]C Advanced Interview Questions and Answers For Experienced
       Developers
     * [76]Difference between Encapsulation and Abstraction in OOPS

Blog Archive

     * [77]▼  [78]2013 (178)
          + [79]►  [80]October (3)
          + [81]►  [82]September (18)
          + [83]►  [84]August (14)
          + [85]►  [86]July (8)
          + [87]►  [88]June (10)
          + [89]▼  [90]May (23)
               o [91]Commonly Used WPF Namespaces
               o [92]Online Accredited Degree Programs and Distance Lea...
               o [93]SONAR: Tool for Maintaining Coding Standards and C...
               o [94]C# Best Coding Practices for Developers to Follow
               o [95]10 Interesting Unix Commands You Should Know
               o [96]Difference between IEnumerable, ICollection and IL...
               o [97]SUO File in .NET Visual Studio Projects
               o [98]What is the Need of Prism and Composite Applicatio...
               o [99]Difference between Build, Rebuild and Clean Soluti...
               o [100]Difference between Encapsulation and Abstraction
                 i...
               o [101]Commonly Asked WPF Interview Questions and
                 Answers...
               o [102]Difference between Dependency Property and
                 Attache...
               o [103]Difference between StaticResource and
                 DynamicResou...
               o [104]Binding Modes in WPF: TwoWay, OneWay, OneTime and
                 ...
               o [105]Difference Between Dependency Property and Normal
                 ...
               o [106]What is the difference between WPF and
                 Silverlight...
               o [107]Difference between Window and Page Controls in
                 WPF...
               o [108]When and Why to Use UNITY Framework in .NET?
                 Inver...
               o [109]How to count number of data members in a C# class
                 ...
               o [110]Attached Properties in WPF: Special Kind of
                 Depend...
               o [111]Dependency Property and Dependency Object:
                 Differe...
               o [112]Common Logical Questions Asked in a Technical
                 Inte...
               o [113]Types of Routed Events in WPF
          + [114]►  [115]April (45)
          + [116]►  [117]March (21)
          + [118]►  [119]February (13)
          + [120]►  [121]January (23)

     * [122]►  [123]2012 (445)
          + [124]►  [125]December (37)
          + [126]►  [127]November (101)
          + [128]►  [129]October (106)
          + [130]►  [131]September (110)
          + [132]►  [133]August (11)
          + [134]►  [135]July (4)
          + [136]►  [137]June (3)
          + [138]►  [139]May (25)
          + [140]►  [141]April (48)

Followers

Subscribe To

   [arrow_dropdown.gif] Posts
   [142][subscribe-netvibes.png] [143][subscribe-yahoo.png]
   [144][icon_feed12.png] Atom
   [arrow_dropdown.gif] Posts
   [arrow_dropdown.gif] Comments
   [145][subscribe-netvibes.png] [146][subscribe-yahoo.png]
   [147][icon_feed12.png] Atom
   [arrow_dropdown.gif] Comments

Follow by Email

   ____________________ Submit

Translate this blog

Total Pageviews

   Sparkline
   [148]tumblr statistics

Advertise with us

   [149]"Want to showcase your product to our audience? Then check our
   advertising options.”
   Copyright © 2012 The Professionals Point. All Rights Reserved.. Awesome
   Inc. template. Powered by [150]Blogger.

References

   Visible links
   1. http://theprofessionalspoint.blogspot.com/feeds/posts/default
   2. http://theprofessionalspoint.blogspot.com/feeds/posts/default?alt=rss
   3. http://theprofessionalspoint.blogspot.com/feeds/8487959944954120920/comments/default
   4. http://theprofessionalspoint.blogspot.in/
   5. http://theprofessionalspoint.blogspot.in/
   6. http://theprofessionalspoint.blogspot.in/p/technologies-delphi-2010-and-xe2.html
   7. http://theprofessionalspoint.blogspot.in/p/advertise-with-thank-you-for-your.html
   8. http://theprofessionalspoint.blogspot.in/p/online-degrees-worldwide.html
   9. http://www.blogger.com/profile/03334034022779238705
  10. http://theprofessionalspoint.blogspot.in/2013/05/c-best-coding-practices-for-developers_4085.html
  11. http://www.blogger.com/share-post.g?blogID=4423496461696137369&postID=8487959944954120920&target=email
  12. http://www.blogger.com/share-post.g?blogID=4423496461696137369&postID=8487959944954120920&target=blog
  13. http://www.blogger.com/share-post.g?blogID=4423496461696137369&postID=8487959944954120920&target=twitter
  14. http://www.blogger.com/share-post.g?blogID=4423496461696137369&postID=8487959944954120920&target=facebook
  15. http://theprofessionalspoint.blogspot.in/search/label/DOTNET
  16. http://www.blogger.com/blog-post-reactions.g?options=%5Binformative,+interesting,+cool%5D&textColor=%23333333#http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html
  17. http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html?showComment=1369657804290#c1780761470349758037
  18. javascript:;
  19. http://www.blogger.com/delete-comment.g?blogID=4423496461696137369&postID=1780761470349758037
  20. http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html?showComment=1369746283326#c2093057581572357289
  21. javascript:;
  22. http://www.blogger.com/delete-comment.g?blogID=4423496461696137369&postID=2093057581572357289
  23. javascript:;
  24. http://www.blogger.com/profile/10864179308087285527
  25. http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html?showComment=1380084543639#c1805908276245130313
  26. http://www.blogger.com/delete-comment.g?blogID=4423496461696137369&postID=1805908276245130313
  27. javascript:;
  28. http://www.blogger.com/profile/14178155909391788234
  29. http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html?showComment=1372415766127#c4810227710521826909
  30. http://dbakings.com/CSharp/csharpvariable.aspx
  31. javascript:;
  32. http://www.blogger.com/delete-comment.g?blogID=4423496461696137369&postID=4810227710521826909
  33. http://www.blogger.com/profile/10864179308087285527
  34. http://theprofessionalspoint.blogspot.com/2013/05/c-best-coding-practices-for-developers_4085.html?showComment=1380084623736#c6200624505100224961
  35. javascript:;
  36. http://www.blogger.com/delete-comment.g?blogID=4423496461696137369&postID=6200624505100224961
  37. javascript:;
  38. javascript:;
  39. http://theprofessionalspoint.blogspot.in/2013/05/sonar-tool-for-maintaining-coding_24.html
  40. http://theprofessionalspoint.blogspot.in/2013/05/10-interesting-unix-commands-you-should.html
  41. http://theprofessionalspoint.blogspot.in/
  42. http://theprofessionalspoint.blogspot.com/feeds/8487959944954120920/comments/default
  43. http://www.blogger.com/profile/03334034022779238705
  44. http://www.blogger.com/profile/03334034022779238705
  45. http://www.blogger.com/profile/03334034022779238705
  46. http://theprofessionalspoint.blogspot.in/p/advertise-with-thank-you-for-your.html
  47. http://theprofessionalspoint.blogspot.in/p/advertise-with-thank-you-for-your.html
  48. http://theprofessionalspoint.blogspot.in/search/label/Softwares
  49. http://theprofessionalspoint.blogspot.in/search/label/DOTNET
  50. http://theprofessionalspoint.blogspot.in/search/label/Online%20Degrees
  51. http://theprofessionalspoint.blogspot.in/search/label/Management
  52. http://theprofessionalspoint.blogspot.in/search/label/Delphi
  53. http://theprofessionalspoint.blogspot.in/search/label/Others
  54. http://theprofessionalspoint.blogspot.in/search/label/Oracle
  55. http://theprofessionalspoint.blogspot.in/search/label/HTML
  56. http://theprofessionalspoint.blogspot.in/search/label/PHP
  57. http://theprofessionalspoint.blogspot.in/search/label/CSS
  58. http://theprofessionalspoint.blogspot.in/search/label/Unix
  59. http://theprofessionalspoint.blogspot.in/search/label/AJAX
  60. http://theprofessionalspoint.blogspot.in/search/label/Javascript
  61. http://theprofessionalspoint.blogspot.in/search/label/Web%20Design
  62. http://theprofessionalspoint.blogspot.in/search/label/jQuery
  63. http://theprofessionalspoint.blogspot.in/search/label/C%2B%2B
  64. http://theprofessionalspoint.blogspot.in/search/label/XML
  65. http://theprofessionalspoint.blogspot.in/search/label/Phonegap
  66. http://theprofessionalspoint.blogspot.in/search/label/Ruby%20On%20Rails
  67. http://theprofessionalspoint.blogspot.in/2013/03/basic-javascript-technical-interview.html
  68. http://theprofessionalspoint.blogspot.in/2012/12/21-most-frequently-asked-basic-unix.html
  69. http://theprofessionalspoint.blogspot.in/2012/04/http-vs-https-similarities-and.html
  70. http://theprofessionalspoint.blogspot.in/2012/12/35-tricky-and-complex-unix-interview.html
  71. http://theprofessionalspoint.blogspot.in/2013/04/commonly-asked-wpf-interview-questions.html
  72. http://theprofessionalspoint.blogspot.in/2012/05/decode-function-vs-case-statement-in.html
  73. http://theprofessionalspoint.blogspot.in/2012/07/how-to-create-dynamic-tables-in-html.html
  74. http://theprofessionalspoint.blogspot.in/2012/04/div-vs-table-tag-which-one-to-use.html
  75. http://theprofessionalspoint.blogspot.in/2013/06/c-advanced-interview-questions-and_4567.html
  76. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-encapsulation-and.html
  77. javascript:void(0)
  78. http://theprofessionalspoint.blogspot.in/search?updated-min=2013-01-01T00:00:00-08:00&updated-max=2014-01-01T00:00:00-08:00&max-results=50
  79. javascript:void(0)
  80. http://theprofessionalspoint.blogspot.in/2013_10_01_archive.html
  81. javascript:void(0)
  82. http://theprofessionalspoint.blogspot.in/2013_09_01_archive.html
  83. javascript:void(0)
  84. http://theprofessionalspoint.blogspot.in/2013_08_01_archive.html
  85. javascript:void(0)
  86. http://theprofessionalspoint.blogspot.in/2013_07_01_archive.html
  87. javascript:void(0)
  88. http://theprofessionalspoint.blogspot.in/2013_06_01_archive.html
  89. javascript:void(0)
  90. http://theprofessionalspoint.blogspot.in/2013_05_01_archive.html
  91. http://theprofessionalspoint.blogspot.in/2013/05/commonly-used-wpf-namespaces.html
  92. http://theprofessionalspoint.blogspot.in/2013/05/online-accredited-degree-programs-and.html
  93. http://theprofessionalspoint.blogspot.in/2013/05/sonar-tool-for-maintaining-coding_24.html
  94. http://theprofessionalspoint.blogspot.in/2013/05/c-best-coding-practices-for-developers_4085.html
  95. http://theprofessionalspoint.blogspot.in/2013/05/10-interesting-unix-commands-you-should.html
  96. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-ienumerable.html
  97. http://theprofessionalspoint.blogspot.in/2013/05/suo-file-in-net-visual-studio-projects.html
  98. http://theprofessionalspoint.blogspot.in/2013/05/what-is-need-of-prism-and-composite.html
  99. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-build-rebuild-and.html
 100. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-encapsulation-and.html
 101. http://theprofessionalspoint.blogspot.in/2013/05/commonly-asked-wpf-interview-questions.html
 102. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-dependency-property_8.html
 103. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-staticresource-and.html
 104. http://theprofessionalspoint.blogspot.in/2013/05/binding-modes-in-wpf-twoway-oneway.html
 105. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-dependency-property.html
 106. http://theprofessionalspoint.blogspot.in/2013/05/what-is-difference-between-wpf-and.html
 107. http://theprofessionalspoint.blogspot.in/2013/05/difference-between-window-and-page.html
 108. http://theprofessionalspoint.blogspot.in/2013/05/when-and-why-to-use-unity-framework-in.html
 109. http://theprofessionalspoint.blogspot.in/2013/05/how-to-count-number-of-data-members-in.html
 110. http://theprofessionalspoint.blogspot.in/2013/05/attached-properties-in-wpf-special-kind.html
 111. http://theprofessionalspoint.blogspot.in/2013/05/dependency-property-and-dependency.html
 112. http://theprofessionalspoint.blogspot.in/2013/05/common-logical-questions-asked-in.html
 113. http://theprofessionalspoint.blogspot.in/2013/05/types-of-routed-events-in-wpf.html
 114. javascript:void(0)
 115. http://theprofessionalspoint.blogspot.in/2013_04_01_archive.html
 116. javascript:void(0)
 117. http://theprofessionalspoint.blogspot.in/2013_03_01_archive.html
 118. javascript:void(0)
 119. http://theprofessionalspoint.blogspot.in/2013_02_01_archive.html
 120. javascript:void(0)
 121. http://theprofessionalspoint.blogspot.in/2013_01_01_archive.html
 122. javascript:void(0)
 123. http://theprofessionalspoint.blogspot.in/search?updated-min=2012-01-01T00:00:00-08:00&updated-max=2013-01-01T00:00:00-08:00&max-results=50
 124. javascript:void(0)
 125. http://theprofessionalspoint.blogspot.in/2012_12_01_archive.html
 126. javascript:void(0)
 127. http://theprofessionalspoint.blogspot.in/2012_11_01_archive.html
 128. javascript:void(0)
 129. http://theprofessionalspoint.blogspot.in/2012_10_01_archive.html
 130. javascript:void(0)
 131. http://theprofessionalspoint.blogspot.in/2012_09_01_archive.html
 132. javascript:void(0)
 133. http://theprofessionalspoint.blogspot.in/2012_08_01_archive.html
 134. javascript:void(0)
 135. http://theprofessionalspoint.blogspot.in/2012_07_01_archive.html
 136. javascript:void(0)
 137. http://theprofessionalspoint.blogspot.in/2012_06_01_archive.html
 138. javascript:void(0)
 139. http://theprofessionalspoint.blogspot.in/2012_05_01_archive.html
 140. javascript:void(0)
 141. http://theprofessionalspoint.blogspot.in/2012_04_01_archive.html
 142. http://www.netvibes.com/subscribe.php?url=http%3A%2F%2Ftheprofessionalspoint.blogspot.com%2Ffeeds%2Fposts%2Fdefault
 143. http://add.my.yahoo.com/content?url=http%3A%2F%2Ftheprofessionalspoint.blogspot.com%2Ffeeds%2Fposts%2Fdefault
 144. http://theprofessionalspoint.blogspot.com/feeds/posts/default
 145. http://www.netvibes.com/subscribe.php?url=http%3A%2F%2Ftheprofessionalspoint.blogspot.com%2Ffeeds%2F8487959944954120920%2Fcomments%2Fdefault
 146. http://add.my.yahoo.com/content?url=http%3A%2F%2Ftheprofessionalspoint.blogspot.com%2Ffeeds%2F8487959944954120920%2Fcomments%2Fdefault
 147. http://theprofessionalspoint.blogspot.com/feeds/8487959944954120920/comments/default
 148. http://statcounter.com/tumblr/
 149. http://theprofessionalspoint.blogspot.in/p/advertise-with-thank-you-for-your.html
 150. http://www.blogger.com/

   Hidden links:
 152. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=PageList&widgetId=PageList1&action=editWidget&sectionId=crosscol
 153. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=HTML&widgetId=HTML2&action=editWidget&sectionId=crosscol
 154. http://www.blogger.com/post-edit.g?blogID=4423496461696137369&postID=8487959944954120920&from=pencil
 155. http://www.blogger.com/comment-iframe.g?blogID=4423496461696137369&postID=8487959944954120920
 156. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Profile&widgetId=Profile1&action=editWidget&sectionId=sidebar-right-1
 157. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=HTML&widgetId=HTML4&action=editWidget&sectionId=sidebar-right-1
 158. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Label&widgetId=Label1&action=editWidget&sectionId=sidebar-right-1
 159. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=PopularPosts&widgetId=PopularPosts1&action=editWidget&sectionId=sidebar-right-1
 160. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget&sectionId=sidebar-right-1
 161. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Followers&widgetId=Followers1&action=editWidget&sectionId=sidebar-right-1
 162. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Subscribe&widgetId=Subscribe1&action=editWidget&sectionId=sidebar-right-1
 163. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=FollowByEmail&widgetId=FollowByEmail1&action=editWidget&sectionId=sidebar-right-1
 164. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Translate&widgetId=Translate1&action=editWidget&sectionId=sidebar-right-1
 165. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Stats&widgetId=Stats1&action=editWidget&sectionId=sidebar-right-1
 166. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=HTML&widgetId=HTML5&action=editWidget&sectionId=sidebar-right-1
 167. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=HTML&widgetId=HTML1&action=editWidget&sectionId=sidebar-right-1
 168. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=HTML&widgetId=HTML3&action=editWidget&sectionId=footer-3
 169. file://www.blogger.com/rearrange?blogID=4423496461696137369&widgetType=Attribution&widgetId=Attribution1&action=editWidget&sectionId=footer-3
