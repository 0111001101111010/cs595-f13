






&lt;html lang="en"&gt; 
&lt;head&gt;

  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;Central logging in Django with Graylog2 and graypy&lt;/title&gt;
  &lt;meta name="description" content=""&gt;
  &lt;meta name="author" content="Caktus Consulting Group, LLC"&gt;
  

  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;

  &lt;link rel="shortcut icon" href="/static/images/favicon.png"&gt;
  
    &lt;link rel="stylesheet" href="/static/CACHE/css/0d36c27fcece.css" type="text/css" media="all"/&gt;


  
  &lt;link rel="stylesheet" href="/static/CACHE/css/adb5623ac5b4.css" type="text/css" media="all"/&gt;
  
  
  &lt;link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet"&gt;

  

&lt;/head&gt;
&lt;body class="white-background post_detail" id="blog-detail"&gt;
  
      
        &lt;nav class="navbar"&gt;
            &lt;div class="container"&gt;
              <ul>
                <li><a href="/about/">about</a></li>
                <li><a href="/services/">services</a></li>
                <li><a href="/portfolio/">clients</a></li>
                <li><a href="/">&lt;img src="/static/images/caktus-logo.png" alt="Caktus logo"&gt;</a></li>
                <li><a href="/blog/">blog</a></li>
                <li><a href="/events/">events</a></li>
                <li><a href="/contact/">contact</a></li>
              </ul>
              <ul>
                 <li><a href="/">&lt;img src="/static/images/caktus-logo.png" alt="Caktus logo"&gt;</a></li>
                <li>
                  &lt;form action="." method="post"&gt;
                    &lt;label&gt;
                      &lt;select id="mobile-nav"&gt;
                        &lt;option value="/"&gt;home&lt;/option&gt;
                        &lt;option value="/about/"&gt;about&lt;/option&gt;
                        &lt;option value="/services/"&gt;services&lt;/option&gt;
                        &lt;option value="/portfolio/"&gt;clients&lt;/option&gt;
                        &lt;option value="/blog/"&gt;blog&lt;/option&gt;
                        &lt;option value="/events/"&gt;events&lt;/option&gt;
                        &lt;option value="/contact/"&gt;contact&lt;/option&gt;
                      &lt;/select&gt;
                    &lt;/label&gt;
                  &lt;/form&gt;
                </li>
              </ul>
            &lt;/div&gt;
        &lt;/nav&gt;

        &lt;script type="text/javascript"&gt;
          // Select the correct nav option depending on path name
          // This allows you to select the 'home' option when not on 'home'
          if(location &amp;&amp; location.pathname) {
              var menu = document.getElementById('mobile-nav');
              var parent = location.pathname.split('/')[1];

              // The split caused '/' for home to be empty (as expected)
              if(parent) {
                  menu.value = '/' + parent + '/';
              } else {
                  menu.value = '/';
              }
          }
        &lt;/script&gt;
      

    &lt;div id="page"&gt;
      &lt;div class="container" role="main"&gt;
      
    &lt;div class="row"&gt;
        &lt;div class="span10"&gt;
          &lt;article&gt;
              &lt;header&gt;
              
              
                <a href="/about/#tobias">&lt;img alt="Tobias McNulty" src="/media/cache/4d/a1/4da1d53cbbd4064c2d39b27c890ddf74.jpg" class="profile"/&gt;</a>
              
              
              &lt;h2 class="title"&gt;Central logging in Django with Graylog2 and graypy&lt;/h2&gt;
              &lt;p class="author"&gt;Written by
                
                  <a href="/about/#tobias">Tobias McNulty</a>
                
              &lt;/p&gt;
              &lt;time pubdate="" datetime="2013-09-18T10:00:12"&gt;September 18, 2013&lt;/time&gt;
              &lt;/header&gt;
              &lt;div class="blog-image"&gt;
                
              &lt;/div&gt;
              &lt;p&gt;Django's <a href="https://docs.djangoproject.com/en/1.5/topics/logging/">logging configuration</a> facilities, which arrived in version 1.3, have greatly eased (and standardized) the process of configuring logging for Django projects. When building complex and interactive web applications at Caktus, we've found that detailed (and properly configured!) logs are key to successful and efficient debugging. Another step in that process—which can be particularly useful in environments where you have multiple web servers—is setting up a centralized logging server to receive all your logs and make them available through an easily accessible web interface. There are a number useful tools to do this, but one we've found that works quite well is <a href="http://graylog2.org/">Graylog2</a>.  Installing and configuring Graylog2 is outside the scope of this post, but there are plenty of tutorials on how to do so accessible through your search engine of choice.&lt;/p&gt;
&lt;p&gt;Once you have it setup, getting logs flowing to Graylog2 from Django is relatively straightforward. First, grab a copy of the &lt;tt class="docutils literal"&gt;graypy&lt;/tt&gt; package from PyPI and add it to your requirements file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install -U graypy
&lt;/pre&gt;
&lt;p&gt;Next, add the following configuration inside the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;LOGGING['handlers']&lt;/span&gt;&lt;/tt&gt; dictionary in your &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;graylog2.example.com&lt;/tt&gt; is the hostname of your Graylog2 server:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="s"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'gelf'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graypy.GELFHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graylog2.example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You'll most likely want to tell your project's top-level logger to send logs to the new &lt;tt class="docutils literal"&gt;gelf&lt;/tt&gt; handler as well, like so:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="s"&gt;'loggers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'projectname'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;# mail_admins will only accept ERROR and higher&lt;/span&gt;
            &lt;span class="s"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mail_admins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'gelf'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;'level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With this configuration in place, log messages with a severity of &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt; or greater that are sent to the &lt;tt class="docutils literal"&gt;projectname&lt;/tt&gt; logger should begin flowing to Graylog2.  You can easily test this by opening Django's &lt;tt class="docutils literal"&gt;python manage.py shell&lt;/tt&gt;, grabbing the logger manually, and sending a log message:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'projectname'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'testing message to graylog2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You should see the message show up in Graylog2 almost immediately.&lt;/p&gt;
&lt;p&gt;Now, this is all well and good, but if you want to use your Graylog2 server for multiple projects, you'll quickly find that all the log messages are interspersed and it can be difficult to tell what messages are coming from what projects.  To address this issue, Graylog2 supports the concept of "streams," that is, filters that you can setup (which work only on incoming messages, not existing messages) to show messages that match only certain criteria.  A simple solution here could be to filter on the hostname of the originating web servers, but this may not scale well in environments like Amazon Web Services' EC2 where you're often adding or removing web servers.  As a better alternative, you can add metadata to log messages at the Python level prior to sending them to Graylog2 that will help you more easily identify the messages for different projects.&lt;/p&gt;
&lt;p&gt;To do this, you need to use a feature of Python <a href="http://docs.python.org/2/library/logging.html#filter-objects">logging filters</a>.  While filters are most commonly used to filter out certain types of messages from being emitted altogether (as discussed in the <a href="https://docs.djangoproject.com/en/1.5/topics/logging/#filters">Django documentation</a>), they can also be used to modify the log records in transit and <a href="http://docs.python.org/2/howto/logging-cookbook.html#using-filters-to-impart-contextual-information">impart contextual metadata</a> to be transmitted with the original message.  To add this to our logging configuration, first create the following filter class in a Python module accessible from your project:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticFieldFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""
    Python logging filter that adds the given static contextual information
    in the ``fields`` dictionary to all logging records.
    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Next, we need to load this filter in our logging configuration and tell the &lt;tt class="docutils literal"&gt;gelf&lt;/tt&gt; logger to pass records through it:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="s"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'static_fields'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'()'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'projectname.core.logfilters.StaticFieldFilter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'fields'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'project'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'projectname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# CHANGEME&lt;/span&gt;
                &lt;span class="s"&gt;'environment'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'staging'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# can be overridden in local_settings.py&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'gelf'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graypy.GELFHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graylog2.example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'static_fields'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The configuration under &lt;tt class="docutils literal"&gt;filters&lt;/tt&gt; instantiates the &lt;tt class="docutils literal"&gt;StaticFieldFilter&lt;/tt&gt; class and passes in the static fields that we want to attach to all of our log records.  In this case, two fields are attached, a &lt;tt class="docutils literal"&gt;'project'&lt;/tt&gt; field with value &lt;tt class="docutils literal"&gt;'projectname'&lt;/tt&gt; and an &lt;tt class="docutils literal"&gt;'environment'&lt;/tt&gt; field with value &lt;tt class="docutils literal"&gt;'staging'&lt;/tt&gt;.  The configuration for the &lt;tt class="docutils literal"&gt;gelf&lt;/tt&gt; logger is the same, with the addition of the &lt;tt class="docutils literal"&gt;static_fields&lt;/tt&gt; filter on the last line.&lt;/p&gt;
&lt;p&gt;With these two items in place, you should be able to create streams via the Graylog2 web interface to trap and display records that match the combination of project and environment names that you're looking for.&lt;/p&gt;
&lt;p&gt;Lastly, as an optional addition to this logging configuration, it may be desirable to filter out Django &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; objects from being sent to Graylog2.  The request is added to log messages created by Django's exception handler and may contain sensitive information or in some cases may not be capable of being pickled (which is necessary to encode and send it with the log message).  You can remove them from log messages with the following filter:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""
    Python logging filter that removes the (non-pickable) Django ``request``
    object from the logging record.
    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'request'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and this corresponding filter configuration:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="s"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'django_exc'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'()'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'projectname.core.logfilters.RequestFilter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;'handlers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="s"&gt;'gelf'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'class'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graypy.GELFHandler'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'graylog2.example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'port'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'filters'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'static_fields'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'django_exc'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With this configuration in place, you can have log messages flowing to Graylog2 from any number of project and server environment combinations, limited only by the resources of the log server itself.&lt;/p&gt;

          &lt;/article&gt;

          

          
          &lt;p class="inline_tag_list"&gt;<strong>Related tags:</strong>
            
                <a href="/blog/tags/django/">django</a>, 
            
                <a href="/blog/tags/logging/">logging</a>, 
            
                <a href="/blog/tags/python/">python</a>
            
          &lt;/p&gt;
          

          &lt;div class="blog-pagination row"&gt;
            &lt;div class="prev span5"&gt;
              
                 <a href="/blog/2013/09/02/caktus-participates-djangocon-2013/" title="Caktus Participates in DjangoCon 2013"><b>← Caktus Participates in DjangoCon 2013</b></a>
              
            &lt;/div&gt;
            
          &lt;/div&gt;

          &lt;div class="comments"&gt;
            &lt;h2&gt;Comments&lt;/h2&gt;
            
              
              &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
    /*  */
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript=">comments powered by Disqus.</a>&lt;/noscript&gt;
&lt;p&gt;<a href="http://disqus.com">blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;</a>&lt;/p&gt;
            
          &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

      &lt;/div&gt;
    &lt;/div&gt;

  &lt;footer&gt;
    &lt;div class="container"&gt;
      &lt;div id="pagelet-47" class="pagelet careers_footer_ad careers row span12"&gt;
	
	
	
    &lt;div class="pagelet-content"&gt;
    
        &lt;p&gt;
<a href="/careers/"><strong>We're hiring!</strong> Visit our careers page to see what opportunities await you.</a>
&lt;/p&gt;
    
    &lt;/div&gt;
&lt;/div&gt;

      &lt;div class="row"&gt;
        &lt;div class="span4"&gt;
          &lt;h3&gt;Let's be friends&lt;/h3&gt;
          <ul>
            <li><a href="http://www.facebook.com/CaktusGroup/">Facebook</a></li>
            <li><a href="http://twitter.com/caktusgroup/">Twitter</a></li>
            <li><a href="http://www.linkedin.com/company/caktus-consulting-group-llc/">LinkedIN</a></li>
          </ul>
        &lt;/div&gt;

        &lt;div class="span4"&gt;
          &lt;h3&gt;Our Company&lt;/h3&gt;
          <ul>
            <li><a href="/about/">About Us</a></li>
            <li>
<a href="/careers/">Careers</a>
</li>
          </ul>
        &lt;/div&gt;

        &lt;div class="span3"&gt;
          &lt;h3&gt;Contact Us&lt;/h3&gt;
          <ul>
            <li>919.951.0052</li>
            <li>Email: <a href="mailto:solutions@caktusgroup.com">solutions@caktusgroup.com</a></li>
          </ul>
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="copyright"&gt;
        &lt;small&gt;© 2007 - 2013 Caktus Consulting Group, LLC.&lt;/small&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/footer&gt;

  &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;
  &lt;script src="/static/js/galleria/galleria-1.2.7.min.js"&gt;&lt;/script&gt;
  &lt;script src="/static/js/galleria/plugins/flickr/galleria.flickr.min.js"&gt;&lt;/script&gt;

  &lt;script&gt;var STATIC_URL = '/static/';&lt;/script&gt;

  &lt;script src="/static/js/flickr.js"&gt;&lt;/script&gt;
  

  &lt;script type="text/javascript"&gt;
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-15492387-4']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  &lt;/script&gt;
  &lt;script type="text/javascript"&gt;
    $(document).ready(function() {
        $('#mobile-nav').change(function (e) {
            e.preventDefault();
            location.href = $('#mobile-nav').val();
        });
    });
  &lt;/script&gt;



&lt;/body&gt;
&lt;/html&gt;
