
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>No-downtime deploys with Unicorn - justin appears</title>
  <meta name="author" content="Justin Giancola">

  
  <meta name="description" content="As mentioned in my last post, a surprising number of Unicorn users do not take advantage of one of its best features, no-downtime deploys. Why? There &hellip;">
  

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://justinappears.com/blog/2-no-downtime-deploys-with-unicorn/">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="/javascripts/ender.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <link href="http://feeds.feedburner.com/justinappears" rel="alternate" title="justin appears" type="application/atom+xml">
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">

  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-33068404-1']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


</head>

<body   >
  <header role="banner"><hgroup>
  <h1><a href="/">justin appears</a></h1>
  
    <h2>online</h2>
  
</hgroup>

</header>
  <nav role="navigation"><ul class="subscription" data-subscription="rss">
  <li><a href="http://feeds.feedburner.com/justinappears" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
  
</ul>
  
<form action="http://google.com/search" method="get">
  <fieldset role="search">
    <input type="hidden" name="q" value="site:justinappears.com" />
    <input class="search" type="text" name="q" results="0" placeholder="Search"/>
  </fieldset>
</form>
  
<ul class="main-navigation">
  <li><a href="/">Blog</a></li>
  <li><a href="/blog/archives">Archives</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <div>
<article class="hentry" role="article">
  
  <header>
    
      <h1 class="entry-title">No-downtime deploys with Unicorn</h1>
    
    
      <p class="meta">
        








  


<time datetime="2013-01-18T16:36:00-05:00" pubdate data-updated="true">Jan 18<span>th</span>, 2013</time>
        
      </p>
    
  </header>


<div class="entry-content"><p>As mentioned in my <a href="/blog/1-use-unicorn/">last post</a>, a surprising number of Unicorn users do not take advantage of one of its best features, no-downtime deploys. Why? There are some common pitfalls that can make this difficult to setup. I want to help address these issues so that more people can make use of this amazing feature.</p>

<h2 id="what-are-no-downtime-deploys">What are no-downtime deploys?</h2>

<p>There does not have to be a service interruption whenever you:</p>

<ul>
  <li>deploy a new version of your app</li>
  <li>rollback to a previous version of your app</li>
  <li>upgrade the version of Unicorn you are using</li>
  <li>upgrade the version of Ruby you are using</li>
</ul>

<p>And when I say “does not have to” I mean “should not”.</p>

<p>No-downtime deploys need not be an out-of-band upgrade process requiring you to log into production servers and monkey around with live config files using <a href="http://www.gnu.org/software/emacs/">your favourite text editor</a>. Even for a deploy that changes application code, updates Unicorn, and also upgrades to the latest Ruby, I just run <code>$ cap deploy</code> as I would with any other deploy.</p>

<h2 id="why-isnt-everyone-using-this">Why isn’t everyone using this?</h2>

<p>I suspect many people read about no-downtime deploys, try them out, and then give up soon after once something goes wrong. Something <em>often</em> goes wrong, at least initially, because this feature does not (and cannot) work out-of-the box in all environments.</p>

<p>Successfully running no-downtime deploys depends on a number of factors including (but not limited to):</p>

<ul>
  <li>how Ruby is installed</li>
  <li>whether you are using a sandboxing system (e.g. RVM or rbenv)</li>
  <li>how you are using Bundler</li>
  <li>how you automate deploys (e.g. with Capistrano, Vlad, Puppet or Chef)</li>
  <li>what the resource utilization on your production servers looks like (e.g. if you are pegging CPUs or close to the memory limit)</li>
</ul>

<p>So unfortunately, just using the <code>unicorn.rb</code> config file from <a href="https://github.com/blog/517-unicorn">Github’s Unicorn blog post</a> will likely fail. You will need to learn a bit about how Unicorn works and then configure it to work with your setup.</p>

<h2 id="tldr">TL;DR</h2>
<p>This is a fairly long post and there is a fair chance you will get bored reading it.</p>

<p>If you don’t want to figure things out yourself but don’t want to read about all of the ways that things can fail, just skip to the <a href="#what-i-do">What I do</a> section and adapt my code to your environment.</p>

<p>If you find my explanation verbose and/or confusing you can read <a href="http://unicorn.bogomips.org/SIGNALS.html">SIGNALS</a> along with <a href="http://unicorn.bogomips.org/Sandbox.html">Tips for using Unicorn with Sandbox installation tools</a> and figure out something that works for you and your production environment.</p>

<p>If you just want a high-level overview of the Unicorn upgrade process read <a href="http://unicorn.bogomips.org/SIGNALS.html">SIGNALS</a>, especially the “Procedure to replace a running unicorn executable” section.</p>

<h2 id="unicorns-reexec-api">Unicorn’s reexec API</h2>

<p>Unicorn facilitates no-downtime deploys by means of a simple reexec API<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<ol>
  <li>send the original Unicorn master process the <code>USR2</code> signal</li>
  <li>original master <code>fork</code>s itself and then <code>exec</code>s <em>in the original working directory, with the exact same command and arguments that were used to create the original master process</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
  <li>at this point, there will be two master processes. if the new master process has spawned workers, both original workers and new workers will be responding to requests</li>
  <li>shut down the original workers<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
  <li>shut down the original master</li>
  <li>new workers and master remain running and are responding to requests</li>
</ol>

<p>Now, this is how a successful reexec goes. If there was a problem with the new code, you can of course shut down the new master and workers instead, leaving the original master and workers to continue serving requests.</p>

<h2 id="the-simplest-thing-that-will-work">The simplest thing that will work</h2>

<p>Let’s start off with a clean slate. We will assume the following setup:</p>

<ul>
  <li>system-wide install of Ruby and rubygems somewhere general like <code>/usr/bin/ruby</code></li>
  <li>Ruby binary has no version-related suffix (e.g. <code>/usr/bin/ruby1.8</code>)</li>
  <li>Ruby binary isn’t a symlink to a binary with a version-related suffix</li>
  <li>no Bundler, RVM, rbenv, Capistrano, Vlad, etc.</li>
  <li>application code is a simple checkout or even just a bunch of files in a fixed directory</li>
  <li>deploy consists of somehow updating code in place (not making a new directory and changing a symlink), and manually installing more recent versions of gems using rubygems cli directly</li>
</ul>

<p>This is the simplest configuration imaginable. So simple in fact that I would be surprised if many people actually run something like this in production. However, it is useful as a starting point for our purposes.</p>

<p>If this is what your environment looks like, then the upgrade process described above will likely work without issue. However, almost any change you make will break it. I’m going to walk through some examples of environment modifications and the corresponding configuration changes needed to handle them.</p>

<h3 id="changing-the-source-location-on-deploy">Changing the source location on deploy</h3>

<p>This is most commonly encountered in setups where a new directory containing app code is created on each deploy. For example, Capistrano’s default configuration creates a new <code>/path/to/app/releases/123456789</code> directory on each deploy and then updates the <code>/path/to/app/current</code> symlink to point to it.</p>

<p>Unicorn remembers the <strong>exact</strong> path you originally deployed from and subsequently attempts to <code>cd</code> to it before each reexec. If you are deploying from a new directory each time you will have to tell Unicorn:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">app_root</span> <span class="o">=</span> <span class="s2">&quot;/path/to/app/current&quot;</span>
</span><span class="line"><span class="n">working_directory</span> <span class="n">app_root</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you don’t do this, your first few deploys will appear to work (although you will be repeatedly restarting the original version). You will be made painfully aware that something is wrong once Capistrano prunes the oldest release dir and your next deploy fails because Unicorn can no longer <code>cd</code> to it.</p>

<p>You can alternatively do something like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">app_root</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s1">&#39;..&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">working_directory</span> <span class="n">app_root</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>instead of hard-coding the path so that you can run your setup in your development or staging environment as well.</p>

<h3 id="changing-the-source-location-on-deploy-and-using-bundler">Changing the source location on deploy AND using Bundler</h3>

<p>There is another issue that results from source location changes. As of Bundler 1.0.3 the executable template fully resolves all symlinks when determining the Gemfile path. So when using Capistrano this will be something like <code>/path/to/app/releases/123456789/Gemfile</code> when it should be <code>/path/to/app/current/Gemfile</code>. This means Bundler will always try to load the gem environment from your original deploy instead of the current one. The solution is adding the following to your config:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">before_exec</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class="line">  <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BUNDLE_GEMFILE&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app_root</span><span class="si">}</span><span class="s2">/Gemfile&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="changing-the-location-of-the-unicorn-executable">Changing the location of the Unicorn executable</h3>

<p>Installing the Unicorn gem puts a <code>unicorn</code> executable somewhere on your <code>$PATH</code>. Depending on your setup, this could end up in a lot of different places from a system-wide gems installation to something local to your app managed by RVM and/or Bundler. Now, because Unicorn remembers the <strong>exact</strong> path to this executable, you want it to remember something generic, not something specific.</p>

<p>For example, if it is something like <code>/var/lib/gems/1.8/bin/unicorn</code> or <code>/home/deployuser/.rvm/gems/ruby-1.9.2-pXYZ/bin/unicorn</code> then you are tied to a specific version of Ruby, and if you try to do a reexec deploy that upgrades the version of Ruby you are using, you will end up trying to run the old version.</p>

<p>The low-tech way of solving this is symlinking the real executable to <code>/usr/local/bin/unicorn</code> (or somewhere on your path), and then adding:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span><span class="o">::</span><span class="no">START_CTX</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/usr/local/bin/unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>to your <code>unicorn.rb</code> config file. Then, when you want to change the version of Ruby you are deploying to, you point that symlink somewhere else.</p>

<p>I don’t like this method for a few reasons. First, it requires that you remember to do something out of band when you want to deploy to a new ruby version. Second, it couples your Unicorn executable to a particular version of Ruby. If your deploy to a new version of Ruby fails badly for some reason, you must revert the symlink before you can restart the old version and recover.</p>

<p>Copying the executable contents and creating a file in your app at <code>bin/unicorn</code> is slightly better. You can then do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span><span class="o">::</span><span class="no">START_CTX</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app_root</span><span class="si">}</span><span class="s2">/bin/unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and remember to update this file when you want your app to run on a different version of Ruby. However, this isn’t foolproof–upgrades still might not work due to ENV pollution.</p>

<h3 id="env-pollution--using-sandboxing-tools-like-rvm-or-rbenv">ENV Pollution / using sandboxing tools like RVM or rbenv</h3>

<p>Even if your <code>unicorn</code> executable can be updated before each deploy, you are liable to have problems because your new master process inherits the environment that the original master was created in. This leads to all sorts of problems.</p>

<p>Additionally, things like <code>$PATH</code>, <code>$GEM_PATH</code>, <code>$GEM_HOME</code>, <code>$RUBY_VERSION</code> and <code>$RUBYOPT</code> are all going to be what they originally were when you first started the original master process. That means when the reexec looks up which Ruby to use and which version of the gem to use, you are going to get the original versions.</p>

<p>In principle, this can be fixed by adding additional entries to the <code>before_exec</code> block as above. If you are using RVM or rbenv, there are probably a number of other ENV variables you have to set as well. For me, figuring out all of the ENV variables RVM or rbenv is setting and resetting them on deploy is too much effort and too error prone.</p>

<h2 id="what-i-do">What I do</h2>

<p>I create a special executable that bootstraps the environment it needs and then <code>exec</code>s the <code>unicorn</code> executable in that environment. This executable gets checked into my application source so that I do not have to modify anything on my production server before a deploy (or rollback). It has the additional benefit of allowing the application to select the specific version of Ruby it needs to run. Here is what I use with RVM<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bin/unicorn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nb">source</span> <span class="nv">$HOME</span>/.rvm/scripts/rvm
</span><span class="line">rvm use 1.9.3-p194 &amp;&gt; /dev/null
</span><span class="line"><span class="nb">exec </span>bundle <span class="nb">exec </span>unicorn <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This file gets committed to <code>[app root]/bin/unicorn</code>. It is also necessary to add its path to the <code>unicorn.rb</code> config file because the <code>exec</code> at the end of the executable wrapper causes Unicorn to remember the fully qualified path to the actual Unicorn executable<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Unicorn</span><span class="o">::</span><span class="no">HttpServer</span><span class="o">::</span><span class="no">START_CTX</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">app_root</span><span class="si">}</span><span class="s2">/bin/unicorn&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="troubleshooting">Troubleshooting</h2>
<p>While you are setting up and testing your no-downtime Unicorn setup, you will want to be sure that everything you expect to change is actually changing. Two useful tools for this are adding logging statements into the config and reloading it, and using <code>lsof -p</code>.</p>

<p>You can, for example, modify your currently loaded config file to print <code>Unicorn::HttpServer::START_CTX[0]</code> or <code>ENV</code> to <code>STDERR</code>, and then reload it by sending the <code>HUP</code> signal to the unicorn master process. This will cause your logging info to be written (by default) to <code>log/unicorn.stderr.log</code>. Having a look into <code>ENV</code> is especially useful. There are often variables set that you aren’t aware of or else had expected to be cleared or updated but were not. If you did not setup your deploy properly and still want to do a no-downtime restart, you can employ this config reload strategy to make modifications to both <code>ENV</code> and internal Unicorn variables.</p>

<p><code>lsof -p [unicorn master PID]</code> will show you which version of Ruby and Unicorn you are running, the current working directory of the master process, and additionally all of the shared libraries linked to your running process.</p>

<h2 id="upgrade-strategies">Upgrade strategies</h2>
<p>There are two main update strategies I have used:</p>

<h3 id="start-new-workers-all-at-once">Start new workers all at once</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Start new workers all at once</span><a href="http://codelevy.com/2010/02/09/getting-started-with-unicorn">source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># adapted from http://codelevy.com/2010/02/09/getting-started-with-unicorn</span>
</span><span class="line"><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class="line">  <span class="n">old_pid</span> <span class="o">=</span> <span class="n">app_root</span> <span class="o">+</span> <span class="s1">&#39;/log/unicorn.pid.oldbin&#39;</span>
</span><span class="line">  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="o">.</span><span class="n">pid</span> <span class="o">!=</span> <span class="n">old_pid</span>
</span><span class="line">    <span class="k">begin</span>
</span><span class="line">      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="s2">&quot;QUIT&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class="line">    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOENT</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span>
</span><span class="line">      <span class="c1"># someone else did our job for us</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As soon as the first new worker is spun up, it will send old master <code>QUIT</code> which causes it to wait for all old workers to finish processing in progress requests and then shut down once everything is complete. While this is happening, the newly spawned workers can respond to incoming requests (old worker cannot accept new requests). So while the old requests are winding down, you will actually have both old and new version of the application responding to requests. This works well if you have some memory headroom (ideally you should be able to run two full sets of workers). However, if that’s not the case, a more incremetal approach might be more appropriate.</p>

<h3 id="replace-workers-one-at-a-time">Replace workers one at a time:</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Replace workers one at a time</span><a href="http://unicorn.bogomips.org/examples/unicorn.conf.rb">source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># adapted from http://unicorn.bogomips.org/examples/unicorn.conf.rb</span>
</span><span class="line"><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class="line">  <span class="n">old_pid</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:pid</span><span class="o">]</span><span class="si">}</span><span class="s2">.oldbin&quot;</span>
</span><span class="line">  <span class="k">if</span> <span class="n">old_pid</span> <span class="o">!=</span> <span class="n">server</span><span class="o">.</span><span class="n">pid</span>
</span><span class="line">    <span class="k">begin</span>
</span><span class="line">      <span class="n">sig</span> <span class="o">=</span> <span class="p">(</span><span class="n">worker</span><span class="o">.</span><span class="n">nr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">server</span><span class="o">.</span><span class="n">worker_processes</span> <span class="p">?</span> <span class="ss">:QUIT</span> <span class="p">:</span> <span class="ss">:TTOU</span>
</span><span class="line">      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class="line">    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOENT</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Throttle the master from forking too quickly by sleeping.</span>
</span><span class="line">  <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unicorn supports signals for increasing and decreasing the number of workers handling requests. You can use these signals to have each new worker spawned ask the old master to decrement the existing worker count by one. Finally, once all of the new workers have been spawned you can ask the old master to shut down.</p>

<h2 id="summary">Summary</h2>

<p>I hope this has helped to clarify some of the details involved in setting up a robust no-downtime Unicorn configuration. It is certainly not as simple as a lot of sources suggest. However, I think it is well worth the effort for the stability and flexibility you end up with. I like to deploy my apps frequently and as such do not want to worry about causing signfificant slowdowns or unnecessary downtime.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>this is actually the same reexec API Nginx provides (for the most part)<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://linux.die.net/man/3/exec">exec</a> is a *nix command that evaluates a script and replaces the current process with a new one.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>see Unicorn worker <a href="#upgrade-strategies">upgrade strategies</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>I don’t have equivalent code for rbenv. I spent some time trying to find a way to reset changes rbenv makes to the original process environment but was unsuccessful.<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>that is, the <code>unicorn</code> in <code>exec bundle exec unicorn "$@"</code> will resolve to something like <code>/path/to/app/shared/bundle/ruby/1.9.1/bin/unicorn</code> if you are using Capistrano and Bundler with the default options.<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
</div>


  <footer>
    <p class="meta">
      
  

<span class="byline author vcard">Posted by <span class="fn">Justin Giancola</span></span>

      








  


<time datetime="2013-01-18T16:36:00-05:00" pubdate data-updated="true">Jan 18<span>th</span>, 2013</time>
      


    </p>
    
      <div class="sharing">
  
  
  
</div>

    
    <p class="meta">
      
      
        <a class="basic-alignment right" href="/blog/2-no-downtime-deploys-with-unicorn/" title="Next Post: No-downtime deploys with Unicorn">No-downtime deploys with Unicorn &raquo;</a>
      
    </p>
  </footer>
</article>

</div>

<aside class="sidebar">
  
    <section>
  <h1>Recent Posts</h1>
  <ul id="recent_posts">
    
      <li class="post">
        <a href="/blog/1-use-unicorn/">Use Unicorn</a>
      </li>
    
      <li class="post">
        <a href="/blog/2-no-downtime-deploys-with-unicorn/">No-downtime deploys with Unicorn</a>
      </li>
    
      <li class="post">
        <a href="/blog/3-queue-your-async-updates/">Queue your async updates</a>
      </li>
    
  </ul>
</section>

<section>
  <h1>GitHub</h1>
  
  <a href="https://github.com/elucid">@elucid</a> on GitHub
  
</section>


<section>
  <h1>Latest Tweets</h1>
  <ul id="tweets">
    <li class="loading">Status updating...</li>
  </ul>
  <script type="text/javascript">
    $.domReady(function(){
      getTwitterFeed("elucid", 3, false);
    });
  </script>
  <script src="/javascripts/twitter.js" type="text/javascript"> </script>
  
    <a href="http://twitter.com/elucid" class="twitter-follow-button" data-show-count="false">Follow @elucid</a>
  
</section>





  
</aside>


    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2013 - Justin Giancola -
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>

</footer>
  







  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = 'http://platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>





</body>
</html>
