<!DOCTYPE html><html><head><meta charset="utf-8" /><meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible" /><link href="http://feeds.feedburner.com/solnic-on-blog/" rel="alternate" title="solnic.eu (atom feed)" type="application/atom+xml" /><link href="http://fonts.googleapis.com/css?family=Ubuntu:400,500,700" rel="stylesheet" type="text/css" /><title>solnic.eu</title><link href="/stylesheets/all.css" media="screen" rel="stylesheet" type="text/css" /><style type="text/css">.highlight table { border-spacing: 0; }
.highlight table td { padding: 5px; }
.highlight table .gutter { text-align: right; }
.highlight {
  color: #faf6e4;
  background-color: #122b3b;
}
.highlight .gl {
  color: #dee5e7;
  background-color: #4e5d62;
}
.highlight .c, .highlight .cm, .highlight .c1, .highlight .cs {
  color: #6c8b9f;
  font-style: italic;
}
.highlight .cp {
  color: #b2fd6d;
  font-weight: bold;
  font-style: italic;
}
.highlight .err {
  color: #fefeec;
  background-color: #cc0000;
}
.highlight .gr {
  color: #fefeec;
  background-color: #cc0000;
}
.highlight .k, .highlight .kd {
  color: #f6dd62;
  font-weight: bold;
}
.highlight .o, .highlight .ow {
  color: #4df4ff;
}
.highlight .p {
  color: #4df4ff;
}
.highlight .gd {
  color: #cc0000;
}
.highlight .gi {
  color: #b2fd6d;
}
.highlight .ge {
  font-style: italic;
}
.highlight .gs {
  font-weight: bold;
}
.highlight .gt {
  color: #dee5e7;
  background-color: #4e5d62;
}
.highlight .kc {
  color: #f696db;
  font-weight: bold;
}
.highlight .kn {
  color: #ffb000;
  font-weight: bold;
}
.highlight .kp {
  color: #ffb000;
  font-weight: bold;
}
.highlight .kr {
  color: #ffb000;
  font-weight: bold;
}
.highlight .gh {
  color: #ffb000;
  font-weight: bold;
}
.highlight .gu {
  color: #ffb000;
  font-weight: bold;
}
.highlight .kt {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .no {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .nc {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .nd {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .nn {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .bp {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .ne {
  color: #b2fd6d;
  font-weight: bold;
}
.highlight .nl {
  color: #ffb000;
  font-weight: bold;
}
.highlight .nt {
  color: #ffb000;
  font-weight: bold;
}
.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .il, .highlight .mo {
  color: #f696db;
  font-weight: bold;
}
.highlight .ld {
  color: #f696db;
  font-weight: bold;
}
.highlight .ss {
  color: #f696db;
  font-weight: bold;
}
.highlight .s, .highlight .sb, .highlight .sd, .highlight .s2, .highlight .sh, .highlight .sx, .highlight .sr, .highlight .s1 {
  color: #fff0a6;
  font-weight: bold;
}
.highlight .se {
  color: #4df4ff;
  font-weight: bold;
}
.highlight .sc {
  color: #4df4ff;
  font-weight: bold;
}
.highlight .si {
  color: #4df4ff;
  font-weight: bold;
}
.highlight .nb {
  font-weight: bold;
}
.highlight .ni {
  color: #999999;
  font-weight: bold;
}
.highlight .w {
  color: #BBBBBB;
}
.highlight .nf {
  color: #a8e1fe;
}
.highlight .py {
  color: #a8e1fe;
}
.highlight .na {
  color: #a8e1fe;
}
.highlight .nv, .highlight .vc, .highlight .vg, .highlight .vi {
  color: #a8e1fe;
  font-weight: bold;
}</style><script src="/javascripts/all.js" type="text/javascript"></script><script type="text/javascript">var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-2573270-4']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();</script></head><body><div class="page-wrapper"><header><nav class="navbar navbar-inverse navbar-static-top" role="navigation"><div class="container"><a class="navbar-brand" href="/">solnic.eu</a><ul class="nav navbar-nav"><li><a href="/">Blog</a></li><li><a href="https://github.com/solnic">Github</a></li><li><a href="https://twitter.com/_solnic_">Twitter</a></li></ul></div></nav></header><div class="container"><div class="row"><div class="col-md-8"><div class="content"><section class="blog"><article><h1><a href="/2012/07/09/single-responsibility-principle-on-rails-explained.html">Single Responsibility Principle on Rails Explained</a></h1><time class="muted">Posted by solnic on Jul  9 2012</time><div class="article-body"><p>A few weeks back we had a small drama about SRP. There were some smart comments, some stupid ones and a few funny jokes even, like that for example:</p>

<p>https://twitter.com/porras/status/220456288017059840</p>

<p>If I remember correctly it all started with <a href="http://www.naildrivin5.com/blog/2012/06/10/single-responsibility-principle-and-rails.html">this post</a>. I&rsquo;ve seen criticism on twitter saying that the post shows shitty code, that it&rsquo;s more complex than it should be, that User class is definitely the best place to put code that creates a user and so on.</p>

<p>My general reply to this was that it is really hard to explain OO principles in a blog post with a few short code examples. The benefits of following SOLID and other principles are clearly visible after your project reached a certain level of complexity. When you start a new project and you immediately want to start rigidly applying things like SRP then your code will probably look awkward.</p>

<p>In this post I&rsquo;ll try to explain my approach to SRP and what I do to follow that principle in a non-extreme but pragmatic way.</p>

<h2>Understanding What Responsibility Is</h2>

<p>First of all &ldquo;responsibility&rdquo; is a flexible term and it should be treated this way. You need to keep redefining it depending on the current state of your project. I like to think that the more complex your project becomes the more narrow the definition of responsibilities should be. What do I mean by that? It&rsquo;s simple. Let&rsquo;s use the example from the mentioned post: creating a user. This can be a trivial thing to do, a matter of 1 line of code in Rails. If that&rsquo;s the case would you say that creating a user must be treated as a single responsibility? Hmm I don&rsquo;t think so. It&rsquo;s very likely that when you start a project then entire CRUD for User is trivial, basic operations handled by Rails itself without any work from your side. In such cases I think that CRUD can be treated as a single responsibility. It is, in fact, a pretty wide definition of responsibility but that&rsquo;s ok since what we do is very basic.</p>

<p>To get it right and to avoid overcomplicating your code you need to pay close attention to the requirements of your project. Every time you need to add a new method or dependency to a class it will be reflected in your tests as they will become more complicated. If you do TDD then you will immediately notice that moment when a class becomes too complex and it should be broken down. If you don&rsquo;t do that then you have a problem because you will notice overly coupled and complicated code <em>eventually</em> but it&rsquo;s going to happen <em>way later</em> than if you did TDD from the beginning.</p>

<h2>Narrowing Down Responsibility</h2>

<p>If creating a user must involve things like sending out notification emails then it&rsquo;s definitely a good reason to narrow down our definition of responsibility as now we have 2 responsibilities: saving user data in the database and sending notification email. We have a user class responsible for the former and a mailer class for the latter. If you add an after<em>create observer it will have the same effect as if you added an after</em>create hook to your User class. Having a standalone, explicit service class that handles creation of a user and sending a notification email is a better option.</p>

<p>It&rsquo;s not exactly The Rails Way, I know, then I why is it better? It&rsquo;s better because the code is nicely decoupled as each object is responsible for just one thing. User knows how to persist its data, Mailer knows how to send a notification email and &ldquo;User Creator&rdquo; service is responsible for this special case when we want to create a user and have a notification email sent. In your tests you don&rsquo;t have to care about turning off observers, you always have an explicit way of creating a user without any side effects. You also have an explicit way of creating a user and sending a notification email. There are no &ldquo;magic moments&rdquo; in your code when some observer does something special. It&rsquo;s all explicit, decoupled and easy to change.</p>

<h2>Redefining Responsibilities</h2>

<p>As your project evolves you will have to redefine various responsibilities. It&rsquo;s not that hard especially when you do TDD. Here&rsquo;s a short list of things that can help you in defining and redefining responsibilities:</p>

<ul>
  <li>Write pure unit tests isolated from Rails - this reveals object responsibilities, pay attention to number of methods and their length</li>
  <li>In your isolated unit tests explicitly require dependencies - this will show you if a class depends on too many things and probably should be broken down</li>
  <li>Watch carefully if test setup doesn&rsquo;t become too complicated - setting up 10 mocks just to test one method? That means SRP is probably violated</li>
  <li>Document your classes and methods - you should always be able to describe what your code does in a short sentence</li>
</ul>

<p>Try following these guidelines and you shouldn&rsquo;t have problems with defining <strong>and</strong> redefining responsibilities and it should help in following SRP in a sane way.</p>

<h2>Summing Up</h2>

<p>SRP is not about having 100 single-method classes in your code base. It&rsquo;s about decoupled code that&rsquo;s easy to change and extend. It&rsquo;s your job to make sure SRP is not violated in a way that causes tight-coupling. You need to be sensitive to every addition to your classes. Every time you add a method to a class try to think if it&rsquo;s maybe not that moment where &ldquo;responsibility&rdquo; should be redefined and narrowed down.</p>
</div><hr /><div class="article-sharebar"><div class="addthis_toolbox addthis_default_style addthis_16x16_style"><a class="addthis_button_twitter" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a class="addthis_button_facebook" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a class="addthis_button_google_plusone_share" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a class="addthis_button_reddit" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a class="addthis_button_pinterest_share" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a class="addthis_button_compact" addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" /><a addthis:url="http://solnic.eu//2012/07/09/single-responsibility-principle-on-rails-explained.html" class="addthis_counter addthis_bubble_style"></a></div><script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-521b09eb4da639f3" type="text/javascript"></script></div><hr /><div class="article-comments"><div id="disqus_thread"><script type="text/javascript">var disqus_shortname = 'solnic-eu';

(function() {
  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
  dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script></div></div></article></section></div></div><div class="col-md-4"><div class="sidebar"><div class="panel panel-default"><div class="panel-heading"><ul class="social list-unstyled clearfix"><li><a class="rss" href="http://feeds.feedburner.com/solnic-on-blog/">Subscribe</a></li><li><a class="twitter" href="http://twitter.com/_solnic_">Follow</a></li></ul></div><div class="panel-body"><div class="about-box clearfix"><img src="http://www.gravatar.com/avatar/e864e5088627498df8f9b911a9bc3219.png" /><p>Hello! I'm Piotr Solnica and this is my blog.</p></div><hr /><ul class="promo list-unstyled"><li><a href="http://www.powow.no" target="_blank"><img src="https://2.gravatar.com/avatar/33d67517df2baeb703035a308be6fd82" /></a></li><li><a href="http://www.gitorious.com" target="_blank"><img src="http://www.gravatar.com/avatar/18862c735a0a7a08c9bb0e1c8c3763e8.png" /></a></li><li><a href="http://rom-rb.org" target="_blank"><img src="https://2.gravatar.com/avatar/e576554524935b16d3daaa8a3a776108" /></a></li></ul></div></div><h4>Tags</h4><div class="list-group"><a class="list-group-item" href="/tags/blog.html"><span class="badge">26</span>blog</a><a class="list-group-item" href="/tags/ruby.html"><span class="badge">19</span>ruby</a><a class="list-group-item" href="/tags/datamapper.html"><span class="badge">9</span>datamapper</a><a class="list-group-item" href="/tags/oop.html"><span class="badge">6</span>oop</a><a class="list-group-item" href="/tags/javascript.html"><span class="badge">5</span>javascript</a><a class="list-group-item" href="/tags/rails.html"><span class="badge">5</span>rails</a><a class="list-group-item" href="/tags/patterns.html"><span class="badge">4</span>patterns</a><a class="list-group-item" href="/tags/metrics.html"><span class="badge">4</span>metrics</a><a class="list-group-item" href="/tags/refactoring.html"><span class="badge">4</span>refactoring</a><a class="list-group-item" href="/tags/tdd.html"><span class="badge">4</span>tdd</a><a class="list-group-item" href="/tags/orm.html"><span class="badge">3</span>orm</a><a class="list-group-item" href="/tags/srp.html"><span class="badge">2</span>srp</a><a class="list-group-item" href="/tags/rspec.html"><span class="badge">2</span>rspec</a><a class="list-group-item" href="/tags/activerecord.html"><span class="badge">2</span>activerecord</a><a class="list-group-item" href="/tags/jquery.html"><span class="badge">2</span>jquery</a><a class="list-group-item" href="/tags/prototype.html"><span class="badge">2</span>prototype</a><a class="list-group-item" href="/tags/ddd.html"><span class="badge">1</span>ddd</a><a class="list-group-item" href="/tags/solid.html"><span class="badge">1</span>solid</a><a class="list-group-item" href="/tags/conferences.html"><span class="badge">1</span>conferences</a><a class="list-group-item" href="/tags/sequel.html"><span class="badge">1</span>sequel</a><a class="list-group-item" href="/tags/experimental.html"><span class="badge">1</span>experimental</a><a class="list-group-item" href="/tags/mutation-testing.html"><span class="badge">1</span>mutation-testing</a><a class="list-group-item" href="/tags/rom.html"><span class="badge">1</span>rom</a></div><div class="support-box"><script data-gittip-username="solnic" src="//gttp.co/v1.js"></script></div></div></div></div></div><footer><div class="container"><div class="copyright">&copy; 2007-2013 Piotr Solnica&nbsp;|&nbsp;powered by <a href="http://middlemanapp.com">Middleman</a></div></div></footer></div></body></html>