

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Zero downtime migrations: 500 million rows</title>
    <meta name="description" content="Making changes to your application when you have a lot of data.">
    
    
    <meta name="author" content="Starr Horne">
    <link rel="alternate" type="application/atom+xml" title="Honeybadger.io" href="/blog/atom.xml">

    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link href="/blog/assets/themes/twitter/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/blog/assets/themes/twitter/css/style.css?body=1" rel="stylesheet" type="text/css" media="all">
    <link href="/blog/assets/themes/twitter/css/font-awesome.css" rel="stylesheet" type="text/css" media="all">
    <link href="/blog/assets/themes/twitter/css/pygments.css" rel="stylesheet" type="text/css" media="all">
    <link rel="shortcut icon" href="favicon.ico">

    <script src='https://use.typekit.com/npn1mzk.js' type='text/javascript'></script>
    <script>
      //<![CDATA[
      try{Typekit.load();}catch(e){}
      //]]>
    </script>
    <script>
      //<![CDATA[
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-97250-22']);
      _gaq.push(['_setDomainName', 'honeybadger.io']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

      var _kmq = _kmq || [];
      var _kmk = _kmk || '6fac418d1739e2115c9e35014decdfe25a0bf872';
      function _kms(u){
        setTimeout(function(){
          var d = document, f = d.getElementsByTagName('script')[0],
          s = d.createElement('script');
          s.type = 'text/javascript'; s.async = true; s.src = u;
          f.parentNode.insertBefore(s, f);
        }, 1);
      }
      _kms('//i.kissmetrics.com/i.js');
      _kms('//doug1izaerwt3.cloudfront.net/' + _kmk + '.1.js');
      //]]>
    </script>
  </head>

  <body>

    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" href="/">
            <img src="/blog/assets/themes/twitter/images/logo.png">
          </a>
          <ul class='nav'>
            <li>
              <a href='/documentation/project_setup'>Academy</a>
            </li>
            <li>
              <a href='/pages/plans'>Plans &amp; Pricing</a>
            </li>
            <li>
              <a href='/pages/about'>Our Team</a>
            </li>
            <li>
              <a href='/blog'>Blog</a>
            </li>
            <li>
              <a href='http://eepurl.com/pNHY1' target='_blank'>Newsletter</a>
            </li>
          </ul>
          <ul class='nav pull-right'>
            <li>
            <a href="/users/sign_up"><i class='icon-plus'></i>
              Create Account
            </a></li>
            <li>
            <a href="/users/sign_in"><i class='icon-signin'></i>
              Sign In
            </a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container">

      <div class="content main-content">
        



<div class="page-header">
  <h1>Zero downtime migrations: 500 million rows</h1>
  <p class="lead">...when your data is bigger than your hardware</p>
</div>

<div class="post row">
  <div class="span8 post-content">
    <h2 id="toc_98">Data makes things hard</h2>

<p>In this article I&#39;m going to go over some of the tricks we use to handle
large data migrations at Honeybadger. Check out the video for a quick
overview. </p>

<p><a href="https://fast.wistia.net/embed/iframe/sq5tbu0itg?autoPlay=true&controlsVisibleOnLoad=true&playerColor=5cada6&plugin%5Bsocialbar-v1%5D%5Bbuttons%5D=embed-twitter-facebook&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true" class="wistia-popover[height=566,playerColor=5cada6,width=960]"><img src="https://embed-ssl.wistia.com/deliveries/9be1e54d54d3ac797b821ee34152ac9bf05380e3.jpg?image_play_button=true&image_play_button_color=5cada6e0&image_crop_resized=620x349" alt="" /></a>
<script charset="ISO-8859-1" src="https://fast.wistia.com/static/popover-v1.js"></script></p>

<p>When you have a lot of data, your life gets harder. When you only have
1000 rows, you can make DB-wide changes in IRB. With millions of rows, it&#39;s not that easy. </p>

<p>If you don&#39;t believe me, just try it. RAM will spike. Your app will get
slow. It might even stop working alltogether. </p>

<p>Of couse it depends on your hardware. If you happen to be running on an
underpowered EC2 instance, you might start having problems at 10,000
rows. </p>

<h2 id="toc_99">Forget about Rails migrations</h2>

<p>When I say &quot;migration&quot; here, I&#39;m <em>not</em> talking about Rails migrations. </p>

<p>Don&#39;t get me wrong. I love &#39;em. Use &#39;em all the time. But they&#39;re not
what I&#39;m talking about. </p>

<h2 id="toc_100">What is a migration then?</h2>

<p>It&#39;s a big change to your database. </p>

<p>Imagine that you have a database of mailing addresses. 5 million
of them. </p>

<p>The data entry people have been sloppy, and so the addresses
are in all kinds of formats. But you really need them to be in strict USPS format.</p>

<p>Fortunately, there&#39;s an API you can use for that. Unfortunately, you
need to make an API call for each of the 5 million addresses. </p>

<p>...and you can&#39;t have any downtime. </p>

<p>That&#39;s what I call a migration. You may have another word for it.
Maybe a four-letter word. But that&#39;s just semantics. </p>

<h2 id="toc_101">There&#39;s no magic bullet</h2>

<p>I&#39;m going to be talking about postgres here, but mongo users have the
same problems. </p>

<p>No matter what we do, computers stubbornly refuse to be infinitely fast.
For any computer, there&#39;s is a greater or equal dataset. </p>

<p>I think that the understanding of this is a kind of turning point in the training of young
developers. I had to learn it the hard way.</p>

<h2 id="toc_102">Why Facebook gamers hate me, personally.</h2>

<p>I remember when I learned the lesson that big datasets are fundamentally
different from small datasets. </p>

<p>Back when I was just starting out, I did some contract work for a
facebook gaming company. Not a big one. There was just one other dev. 
But the game was pretty popular, and this was the height of
mafia/jewel/farm game mania. </p>

<p>The database was mysql. But all the data was stored as json inside a
text field on the user model. This of course, meant that instead of ugly
SQL</p>
<div class="highlight"><pre><code class="sql"><span class="k">UPDATE</span> <span class="n">users</span> <span class="k">set</span> <span class="n">something</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
</code></pre>
</div>

<p>...you could use elegant ruby</p>
<div class="highlight"><pre><code class="ruby"><span class="no">Users</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> 
  <span class="n">u</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:data</span> <span class="o">=&gt;</span> <span class="no">JSON</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="ss">:something</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">)</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
<span class="k">end</span>
</code></pre>
</div>

<p>One time I had to write a rake task that tweaked a data structure for every user. It took about 30 minutes to run. </p>

<p>That wouldn&#39;t have been a problem, except I hadn&#39;t planned for the &quot;in-between&quot; state.  The application was still expecting the old data structure, but not everybody had that anymore. </p>

<p>The result was a small UI bug, and a lot of pissed off facebook users.  Fortunately, they had an in-game forum that they could use to yell at me.</p>

<!--![I facebooked you](/blog/assets/images/cat_facebook.jpeg)-->

<h1 id="toc_103">How do you plan for big migrations?</h1>

<h2 id="toc_104">Problems are simple</h2>

<p>Luckily, you&#39;ve only got two problems to worry about: </p>

<ul>
<li>The app breaking</li>
<li>The app slowing down</li>
</ul>

<p>Yay!</p>

<h2 id="toc_105">Solutions are more complex</h2>

<p>To avoid these, you need to start thinking differenly about changes to
your app and your data. </p>

<ul>
<li>Embrace multi-step deploys</li>
<li>Expect database-wide changes to take an indefinite amount of time</li>
<li>Expect the scripts you wrote to do the DB migration to break</li>
<li>Plan ahead for pegged CPU, RAM and disk IO</li>
<li>Map out an escape route: You may need it</li>
</ul>

<h1 id="toc_106">Code!</h1>

<h2 id="toc_107">Battle-tested</h2>

<p>A lot of people write blog posts about things they&#39;ve never done. But this isn&#39;t one of those. </p>

<p>Here at Honeybadger HQ, we&#39;ve used all the tricks I&#39;m about to show you IRL.</p>

<h2 id="toc_108">Prepare your app to handle in-between time</h2>

<p>If a migration takes a day, then for that day part of your data is
&quot;pending&quot; and part is &quot;processed&quot;</p>

<p>Your app needs to be able to handle both pending and processed data.</p>

<p>Suppose you&#39;re spitting a single <code>name</code> field into
<code>first_name</code> and <code>last_name</code>. Your code might look like this:</p>
<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">User</span>
  <span class="n">before_save</span> <span class="ss">:split_name</span>

  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="n">pending?</span> <span class="p">?</span> <span class="nb">name</span> <span class="p">:</span> <span class="o">[</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">split_name</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Now that you have 2 representations of a user&#39;s name you need to </p>

<ul>
<li>Make sure you update both representations when new records are saved</li>
<li>Use the new data when possible, but fall back to the old data </li>
<li>Remove this ASAP. It&#39;s ugly as sin. </li>
</ul>

<h2 id="toc_109">Know which data have been migrated</h2>

<p>If your migration script fails, you need to be able to re-start it and
pick up where you left off. </p>

<p>It can be as simple as saving ids to a flat file. But we like to use the
rollout gem. </p>

<h3 id="toc_110">Rollout</h3>

<p>The rollout gem is built to make incremental releases easier. It lets
you set a &quot;feature available&quot; flag on any model and gives you an easy
way to see if the flag is set. </p>

<h3 id="toc_111">For the back end</h3>

<p>We recently did a migration for all of our Projects. After each project
was done, we set a flag like so:</p>
<div class="highlight"><pre><code class="ruby"><span class="vg">$rollout</span><span class="o">.</span><span class="n">activate_user</span><span class="p">(</span><span class="ss">:done</span><span class="p">,</span> <span class="n">project</span><span class="p">)</span>
</code></pre>
</div>

<h3 id="toc_112">For the front end</h3>

<p>Then in our front-end code, we could invoke either the new or old
behavior based on that flag.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">render</span><span class="p">(</span><span class="vg">$rollout</span><span class="o">.</span><span class="n">active?</span><span class="p">(</span><span class="ss">:done</span><span class="p">,</span> <span class="n">project</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;new_thing&quot;</span> <span class="p">:</span> <span class="s2">&quot;old_thing&quot;</span><span class="p">)</span>
</code></pre>
</div>

<p>Granted, the rollout method names are a little out of sync with the
use-case. But it works nicely. </p>

<h2 id="toc_113">Log all the things...separately</h2>

<p>Chances are, you&#39;ll want to keep an eye on your migration. But if the
output from your migration is mixed in with production data, it can be
hard to tell what&#39;s happening. </p>

<p>And it&#39;d be nice to have debug-level logging too, just in case your rake
task aborts. </p>

<h3 id="toc_114">Use Rails environments</h3>

<p>Here&#39;s a cool trick. Just use a separate &quot;migration&quot; Rails environment.
All you need to do is add a few lines to your <code>config/database.yml</code> </p>
<div class="highlight"><pre><code class="yaml"><span class="l-Scalar-Plain">migration</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
</code></pre>
</div>

<p>Now all of your logs will be saved to <code>log/migration.log</code>. And if you&#39;re
reporting errors to Honeybadger, they&#39;ll be flagged as migration errors.
pretty nifty, eh?</p>

<h2 id="toc_115">Keep an eye on your database</h2>

<p>Large datasets tend to distort space and time. A totally innocent
<code>select count(*) from users</code> will work fine with 1000 users, but take
forever with 10,000,000 users. </p>

<p>Also, large datasets tend to accumulate strangeness. Did you forget to
limit the user&#39;s name to 1000 chars? You&#39;re likely to find at least one
user with a 2Mb name. </p>

<h3 id="toc_116">Monitor long-running queries</h3>

<p>It&#39;s important to check your database for queries taking an
abnormally long time to run. </p>

<p>In postgres this is easy. The following command will update once per second and show you current queries, as well as how long they’ve been running. </p>
<div class="highlight"><pre><code class="sql"><span class="n">watch</span> <span class="o">-</span><span class="n">n1</span> <span class="ss">&quot;psql -c \&quot;</span><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="n">query</span> <span class="k">from</span> <span class="mi">0</span> <span class="k">for</span> <span class="mi">120</span><span class="p">)</span> <span class="n">q</span><span class="p">,</span>  <span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">query_start</span> <span class="k">from</span> <span class="n">pg_stat_activity</span> <span class="k">where</span> <span class="k">state</span><span class="o">=</span><span class="s1">&#39;active&#39;</span> <span class="k">order</span> <span class="k">by</span> <span class="n">query_start</span> <span class="k">limit</span> <span class="mi">20</span><span class="err">\</span><span class="ss">&quot;&quot;</span>
</code></pre>
</div>

<h2 id="toc_117">Limit all the things</h2>

<p>If you do find that queries are taking longer than they should, chances are that you forgot to put a limit somewhere. </p>

<p>Suppose that you know a user never has more than 100 items in their shopping cart. Nobody has ever bought more than 100 items. </p>

<p>Well, you’re going to find someone who’s put 100,000 items in their cart. And when you do, all of those items are going to be loaded into ram. </p>

<h3 id="toc_118">Limit all the strings</h3>

<p>The same thing goes for string lengths. Sometimes you&#39;ll find abnormally long strings in your DB. You can truncate those right in sql. </p>
<div class="highlight"><pre><code class="sql"><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="n">message</span> <span class="k">from</span> <span class="mi">0</span> <span class="k">for</span> <span class="mi">140</span><span class="p">)</span> <span class="k">from</span> <span class="n">tweets</span><span class="p">;</span>
</code></pre>
</div>

<h3 id="toc_119">Be careful with ActiveRecord</h3>

<p>And with that in mind, it&#39;s clear that you should prefer Rails&#39;
<code>find_each</code> over <code>all</code>. And that you should do as much processing as
possible in postgres. </p>

<h2 id="toc_120">Avoid using production systems</h2>

<p>Here at Honeybadger, we have servers who’s only job in life is to mirror the production database, and be available if they happen to die. </p>

<p>These replicants are darn handy if you happen to be doing a read-intensive migration. In our elastic search switch, we had to run some queries that took 30 minutes to complete. By running them against the replicant we were able to avoid slowing down production. </p>

<p>Doing this is pretty simple. Just create a new environment, and point it at your replicant in the database.yml file</p>
<div class="highlight"><pre><code class="yaml"><span class="l-Scalar-Plain">migration</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">replicant_hostname</span>
  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span>
</code></pre>
</div>

<h3 id="toc_121">Hot swap systems</h3>

<p>You can take this one step further if you like. Just do the migration
completely on the replicant then cut over to it. The replicant becomes
the new master and the master becomes the new replicant. </p>

<h3 id="toc_122">And paranoia</h3>

<p>Of course there’s no reason that your changes on server A should affect server Z, but it never hurts to keep an eye on server Z. Surprising things can happen when you network computers together. </p>

<h2 id="toc_123">A closing meditation</h2>

<p>In closing, I&#39;d like to share a quote:</p>

<blockquote>
<p>&quot;There have been joys too great to be described in words, and there have been griefs upon which I have not dared to dwell, and with these in mind I say, climb if you will, but remember that courage and strength are naught without prudence, and that a momentary negligence may destroy the happiness of a lifetime. Do nothing in haste, look well to each step, and from the beginning think what may be the end.&quot;
- Edward Whymper</p>
</blockquote>

    <hr />
    <ul id="share" class="unstyled clearfix">
      <li>
      <a href="https://twitter.com/intent/tweet?screen_name=honeybadgerapp" class="twitter-mention-button" data-size="large" data-dnt="true">Tweet to @honeybadgerapp</a>
      <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
      </li>
      <li class="google">
        <!-- Place this tag where you want the +1 button to render. -->
        <div class="g-plusone" data-annotation="none"></div>

        <!-- Place this tag after the last +1 button tag. -->
        <script type="text/javascript">
          (function() {
           var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
           po.src = 'https://apis.google.com/js/plusone.js';
           var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
           })();
        </script>
      </li>
    </ul>
    <hr />
    
    <div id="author" class="clearfix">
      <img src="https://www.gravatar.com/avatar/6eb5a4e87bd69489d0a531d489f90552" class="avatar" />
      <div class="inner">
        <p class="bio"><strong>Starr Horne</strong> is the driving force behind Honeybadger's single-page UI. He works around the clock to find better ways for you to slice through mountains of debug data and get to the heart of your issues in record time.</p>
        <ul class="links unstyled">
          <li class="github"><a href="https://github.com/starrhorne" target="_blank">Github</a></li>
          <li class="twitter"><a href="https://twitter.com/StarrHorne" target="_blank">Twitter</a></li>
          <li class="google_plus"><a href="https://plus.google.com/116880398648173252931?rel=author" target="_blank">Google+</a></li>
        </ul>
      </div>
    </div>
    <hr />
    
    <div class="pagination">
      <ul>
      
        <li class="prev"><a href="/blog/2013/06/25/stop-using-rubygemsorg-in-production" title="The case against using RubyGems.org in production">&larr; Previous</a></li>
      
        <li><a href="/blog/archive.html">Archive</a></li>
      
        <li class="next"><a href="/blog/2013/08/30/alerts-and-integrations-just-leveled-up" title="Alerts and integrations just leveled up">Next &rarr;</a></li>
      
      </ul>
    </div>
    <hr>
  </div>

  <div class="span4">
    <div class="sidebar-about">

  <img src="/blog/assets/images/sidebar_bolt.png">
  <p>
  <a href="https://www.honeybadger.io">Honeybadger</a> is the modern
  error monitoring service for Ruby and Rails.
  </p>

  <p>
  <a href="https://twitter.com/honeybadgerapp" class="twitter-follow-button" data-show-count="false" data-size="large" data-dnt="true">Follow @honeybadgerapp</a>
  <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
  </p>

  <!-- Begin MailChimp Signup Form -->
  <link href="http://cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css">
  <style type="text/css">
    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif;  width:300px;}
    /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
      We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
  </style>
  <div id="mc_embed_signup">
  <form action="http://honeybadger.us5.list-manage.com/subscribe/post?u=624aa4162f5834d06e9347c6e&amp;id=9beea9cf63" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <label for="mce-EMAIL">Get monthly DevOps Tips:</label>
    <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
  </form>
  </div>

  <!--End mc_embed_signup-->
</div>


    <div class="sidebar-meta">
      <h4>Published</h4>
      <p class="date"><span>06 August 2013</span></p>
    </div>

</div>


      </div>

      <footer>
        <p>&copy; 2012 Honeybadger Industries LLC</p>
      </footer>

    </div> <!-- /container -->

    
  </body>
</html>

