<!doctype html>
<html lang="en" dir="ltr" xmlns:fb="http://ogp.me/ns/fb#">
<head>
	<!-- MOBIFY - DO NOT ALTER - PASTE IMMEDIATELY AFTER OPENING HEAD TAG -->
	<script type="text/javascript">/*<![CDATA[*/(function(a){function b(a,b){if(+a)return~a||(d.cookie=h+"=; path=/");j=d.createElement(e),k=d.getElementsByTagName(e)[0],j.src=a,b&&(j.onload=j.onerror=b),k.parentNode.insertBefore(j,k)}function c(){n.api||b(l.shift()||-1,c)}if(this.Mobify)return;var d=document,e="script",f="mobify",g="."+f+".com/",h=f+"-path",i=g+"un"+f+".js",j,k,l=[!1,1],m,n=this.Mobify={points:[+(new Date)],tagVersion:[6,1],ajs:"//a.mobify.com/performance/davidwalsh/a.js"},o=/((; )|#|&|^)mobify-path=([^&;]*)/g.exec(location.hash+"; "+d.cookie);o?(m=o[3])&&!+(m=o[2]&&sessionStorage[h]||m)&&(l=[!0,"//preview"+g+escape(m)]):(l=a()||l,l[0]&&l.push("//cdn"+i,"//files01"+i)),l.shift()?(d.write('<plaintext style="display:none;">'),setTimeout(c)):b(l[0])})(function(){if(/ip(hone|od|ad)|android|blackberry.*applewebkit|bb1\d.*mobile/i.test(navigator.userAgent)){return[1,"//cdn.mobify.com/swift/davidwalsh/production/mobify.js"]}return[0,Mobify.ajs]})/*]]>*/</script>
	<!-- END MOBIFY -->

	<meta charset="utf-8">
	<meta http-equiv="content-type" content="text/html;">
	<title>Write Your CSS with JavaScript</title>
	<meta name="robots" content="index,follow">
	<meta name="viewport" content="initial-scale=1.0 maximum-scale=1.0 user-scalable=no">

	<!-- Place favicon.ico & apple-touch-icon.png in the root of your domain and delete these references -->
	<link rel="shortcut icon" href="/favicon.ico">
	<link rel="apple-touch-icon" href="/apple-touch-icon.png">
	
			<!-- Facebook Meta Tags -->
		<meta property="og:title" content="  Write Your CSS with JavaScript">
		<meta property="og:image" content="http://davidwalsh.name/wp-content/themes/jack/images/openGraphLogo.png">
		<meta property="og:site_name" content="David Walsh Blog">
		<!-- Twitter Cards -->
		<meta name="twitter:card" content="summary">
		<meta name="twitter:image" content="http://davidwalsh.name/wp-content/themes/jack/images/openGraphLogo.png">
		<meta name="twitter:site" content="@davidwalshblog">
		<meta name="twitter:creator" content="@davidwalshblog">
		
	<!-- links -->
	<link rel="start" href="http://davidwalsh.name/" title="David Walsh Blog">
	<link rel="alternate" type="application/atom+xml" title="David Walsh Blog Atom Feed" href="http://davidwalsh.name/feed/atom">
	<link rel="alternate" type="application/rss+xml" title="David Walsh Blog RSS 2.0 Feed" href="http://davidwalsh.name/feed">
	<link rel="alternate" type="application/rss+xml" title="David Walsh Blog Comments RSS 2.0 Feed" href="http://davidwalsh.name/comments/feed">
	<link rel="alternate" type="application/rdf+xml" title="David Walsh Blog RSS 1.0" href="http://davidwalsh.name/feed/rdf">
	<link rel="alternate" type="text/xml" title="David Walsh Blog RSS 0.92 Feed" href="http://davidwalsh.name/feed/rss">
	<link rel="pingback" href="http://davidwalsh.name/xmlrpc.php">
	<link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="David Walsh Blog Search">
	
	<!-- CSS: implied media="all" -->
	<link rel="stylesheet" media="all" href="/wp-content/themes/jack/css/all.css?v1377886924147">
	<link rel="stylesheet" media="all" href="/wp-content/themes/jack/css/lib/font-awesome/css/font-awesome.min.css?v1377886924147">
	<link rel="stylesheet" href="/wp-content/themes/jack/css/print.css?v1377886924147" media="print">

	
	<link rel="alternate" type="application/rss+xml" title="David Walsh Blog &raquo; Write Your CSS with&nbsp;JavaScript Comments Feed" href="http://davidwalsh.name/write-css-javascript/feed" />
<link rel='stylesheet' id='bbp-default-bbpress-css'  href='http://davidwalsh.name/wp-content/plugins/bbpress/templates/default/css/bbpress.css?ver=2.2.3' type='text/css' media='screen' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://davidwalsh.name/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://davidwalsh.name/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Git Hooks and CSS&nbsp;Preprocessors' href='http://davidwalsh.name/git-hooks' />
<link rel='next' title='Eliminating&nbsp;Distractions' href='http://davidwalsh.name/eliminating-distractions' />
<meta name="generator" content="WordPress 3.5.2" />
<link rel='shortlink' href='http://davidwalsh.name/?p=11990' />

		<script type="text/javascript">
			/* <![CDATA[ */
			var ajaxurl = 'http://davidwalsh.name/wp-admin/admin-ajax.php';

						/* ]]> */
		</script>

	
<!-- All in One SEO Pack 2.0.2 by Michael Torbert of Semper Fi Web Design[1244,1304] -->
<meta name="description" content="This article is about AbsurdJS: a small Node.js module, which changed my workflow completely." />

<link rel="canonical" href="http://davidwalsh.name/write-css-javascript" />
<!-- /all in one seo pack -->
	<!--[if lt IE 9]>
		<script src="/wp-content/themes/jack/js/lib/html5shiv/src/html5shiv.js?v1377886924147"></script>
	<![endif]-->
</head>
<body class=" single cacheable">	<script>
		(function(){var e=navigator.userAgent.toLowerCase();z={isDebug:0,loadAds:1,loadStats:1,loadSidebar:1,sidebarCacheMinutes:10,loadSearch:1,isGoogle:e.indexOf("googlebot")!=-1,isMobile:e.match(/ip(?:ad|od|hone)/)||e.match(/(?:webos|android)/),themePath:"/wp-content/themes/jack/",pluginPath:"lib/curl/src/curl/plugin/",lighterPath:"lib/lighterjs/",analyticsId:"UA-2087880-2",d:document,w:window},z.loadSidebar=z.loadSidebar&&!z.isGoogle,z.ajaxPageLoads="pushState"in history&&!z.isGoogle,z.baseUrl=z.themePath+"js",z.hasSessionStorage="sessionStorage"in z.w,z.mootoolsUrl="//ajax.googleapis.com/ajax/libs/mootools/1.4.5/mootools"+(z.isDebug?"":"-yui-compressed")+".js"})();		if(z.loadStats) {
			var _gaq=[["_setAccount",z.analyticsId],["_trackPageview"]];
			(function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
			g.src="//"+("https:"==location.protocol?"ssl":"www")+".google-analytics.com/ga.js";
			s.parentNode.insertBefore(g,s)}(z.d,"script"));
		}
	</script>
	
<!-- Add the HTML header -->
<div id="page">

<a name="top" id="top"></a>

<!-- header -->
<header><div class="centerSite">

			<!-- top menu: dwb -->
	<nav role="navigation" class="dwb"><ul>
		<li class="home"><a href="/" accesskey="h"><span>David Walsh Blog</span></a></li>
		<li class="articles">
			<a href="/page/1" accesskey="a">articles</a>
			<div class="dropdown">
				<ul>
					<li><a href="/page/1">Latest Posts</a></li>
					<li><a href="/tutorials/features">Features</a></li>
					<li><a href="/tutorials/tips">Quick Tips</a></li>
					<li><a href="/s" rel="nofollow">Script &amp; Style</a></li>
					<li class="sep"></li>
					<li><a href="/tutorials/html5">HTML5</a></li>
					<li><a href="/tutorials/css/animations">CSS Animations</a></li>
					<li><a href="/tutorials/firefoxos">Firefox OS</a></li>
					<li><a href="/tutorials/jquery">jQuery</a></li>
					<li><a href="/tutorials/mootools">MooTools</a></li>
					<li><a href="/tutorials/php">PHP</a></li>
					<li class="sep"></li>
					<li><a href="/guest-post">Submit Guest Post</a></li>
				</ul>
			</div>
		</li>
		<li class="demos">
			<a href="/demos" accesskey="d">demos</a>
			<div class="dropdown">
				<ul>
					<li><a href="/demos">All Demos</a></li>
					<li><a href="/demos/jquery">jQuery Demos</a></li>
					<li><a href="/demos/mootools">MooTools Demos</a></li>
					<li><a href="/demos/css">CSS Demos</a></li>
					<li><a href="/demos/html5">HTML5 Demos</a></li>
				</ul>
			</div>
		</li>
		<li class="connect">
			<a href="/forums" accesskey="c">forums</a>
			<div class="dropdown">
				<ul>
					<li><a href="/forums/forum/mootools">MooTools 1.x</a></li>
					<li><a href="/forums/forum/mootools-2">MooTools 2</a></li>
					<li><a href="/forums/forum/css">CSS</a></li>
					<li><a href="/forums/forum/html5-mobile">HTML5 &amp; Mobile</a></li>
					<li><a href="/forums/forum/jquery">jQuery</a></li>
					<li><a href="/forums/forum/firefox-os">Firefox OS</a></li>
				</ul>
			</div>
		</li>
		<li class="discounts"><a href="/deals">deals</a></li>
		<li class="about">
			<a href="/about">david walsh</a>
			<div class="dropdown">
				<ul>
					<li><a href="/about-david-walsh">About Me</a></li>
					<li><a href="/contact">Contact Me</a></li>
					<li><a href="/mozilla">Mozilla</a></li>
					<li class="sep"></li>
					<li><a href="/feed" data-noxhr="true" rel="nofollow">RSS Feed</a></li>
					<li><a href="//twitter.com/davidwalshblog" rel="nofollow">Twitter</a></li>
					<li><a href="//facebook.com/davidwalshblog" rel="nofollow">Facebook</a></li>
					<li><a href="//plus.google.com/114538814489633467974" rel="nofollow">Google +</a></li>
					<li><a href="//linkedin.com/in/davidjameswalsh" rel="nofollow">LinkedIn</a></li>
					<li><a href="//alpha.app.net/davidwalsh" rel="nofollow">App.Net</a></li>
					<li><a href="//github.com/darkwing" rel="nofollow">GitHub</a></li>
					<li><a href="//codepen.io/darkwing" rel="nofollow">CodePen</a></li>
					<li><a href="/chat" rel="nofollow">Chat</a></li>
				</ul>
			</div>
		</li>
	</ul>

		<!-- small logo block, with search, blog title, banner ad, etc. --> 
		<section class="search"><form action="//google.com/search" id="searchForm">
			<input type="search" placeholder="Search..." name="q" id="q" accesskey="s" autocomplete="on" required />
			<input type="hidden" name="sitesearch" value="davidwalsh.name" />
		</form></section>
	</nav>
	<div class="centerSite"><a href="/" class="headerTitle">The David Walsh Blog</a></div>
	</div></header>

<!-- holds content, will be frequently changed -->
<div id="contentHolder">

	<!-- start the left section if not the homepage -->
	<section class="left"><!--CONTENT-->

			
<!-- top advertisement -->
	<div class="ad adLong adTreehouse"></div>

<!-- start up the article -->
<article>

		<!-- article title, social widgets, article content -->
	<h1>Write Your CSS with&nbsp;JavaScript</h1>
	<div style="display:none;"></div>
	<div class="pMeta">Written by <a href="http://krasimirtsonev.com/blog" rel="nofollow">Krasimir Tsonev</a> on September 25, 2013 &middot; <i class="icon-comments-alt"></i> <a href="#comments">33 Comments</a></div>	<div class="social" id="social-11990" data-rating="0" data-postid="11990" data-url="http://davidwalsh.name/write-css-javascript" data-text="Write Your CSS with&nbsp;JavaScript by @KrasimirTsonev"></div>	<p>Sometimes programming is just using the right tool. This may be a framework, library or as it happens in my case CSS preprocessor. You probably don't realize it, but LESS or SASS have a lot of constraints. I managed to change that by writing my own CSS preprocessor. I stopped writing CSS and moved everything into the JavaScript world. This article is about <a href="https://github.com/krasimir/absurd" rel="nofollow">AbsurdJS</a>:  a small Node.js module, which changed my workflow completely.</p>

<h2 id="the-concept">The Concept</h2>
<p><img alt="Write your CSS with JavaScript" src="http://davidwalsh.name/demo/concept.gif" /></p>
<p>If you write a lot of CSS you probably use preprocessor. There are two popular - LESS and SASS. Both tools accept something, which looks like CSS, do some magic and export normal, pure CSS. What I did is just to replace the instrument and the input format. I didn't want to invent a new language or syntax, because this is connected with a lot of things like parsing and compiling. Thankfully, Node.js is here and I decided to use it. Also, I had a lot of LESS type projects, which means that I already use Node.js to compile my styles. It was much easier to replace a module instead of adding something completely new.</p>\

<h2 id="the-input">The Input</h2>
<p><img alt="Write your CSS with JavaScript" src="http://davidwalsh.name/demo/input.jpg" /></p>
<p>I think that the closest thing to the CSS format is JSON -- that's what AbsurdJS accepts. Of course there are some cons of this transformation. You have to put some properties in quotes and of course the values. This needs a little bit more time during the writing, but as you will see below it's worth it.</p>

<h2 id="in-the-beginning-was-a-javascript-file">In the Beginning was ... a JavaScript File</h2>
<p>Here is how a simple LESS file looks like:</p>
<pre class="css">.main-nav {
    background: #333;
    color: #000;
    font-weight: bold;
    p {
        font-size: 20px;
    }
}
</pre>
<p>And here is its AbsurdJS equivalent. It's a simple Node.js module:</p>
<pre class="css">module.exports = function(api) {
    api.add({
        ".main-nav": {
            background: "#333",
            color: "#000",
            "font-weight": "bold",
            p: {
                "font-size": "20px"
            }
        }
    })
}
</pre>
<p>You should assign a function to <code>module.exports</code>. It accepts a reference to the API, which has several methods, but the most important one is <code>add</code>. Simply pass a JSON object and it will be converted to CSS. </p>
<p>To compile the less file we need install LESS's compiler via <code>npm install -g less</code> and run </p>
<pre class="css">lessc .\css.less &gt; styles.less.css
</pre>
<p>It's the almost the same with AbsurdJS. Installation is again via node package manager - <code>npm install -g absurd</code>. </p>
<pre class="css">absurd -s css.js -o styles.absurd.css
</pre>
<p>It accepts source and output; the result is the same.</p>

<h2 id="the-truth">The Truth</h2>
<p>You may have really beautiful and nice-looking LESS or SASS files, but what matters is the final compiled CSS. Unfortunately the result is not always the best one.</p>

<h3 id="combining">Combining</h3>
<p>Let's get the following example:</p>
<pre class="css">.main-nav {
    background: #333;
}
.main-content {
    background: #333;
}
</pre>
<p>If you pass this to the current preprocessors you will get the same thing in the end. However if you use AbsurdJS like that:</p>
<pre class="css">module.exports = function(api) {
    api.add({
        ".main-nav": {
            background: "#333"
        },
        ".main-content": {
            background: "#333"
        }
    })
}
</pre>
<p>After the compilation you will get </p>
<pre class="css">.main-nav, .main-content {
    background: #333;
}
</pre>
<p>SASS has a feature called <em>placeholders</em> which does the same thing. However, it comes with its own problems. Placeholders can't accept parameters and you should repeat them in every selector which you want to combine. My solution just parses the rules and combine them. Let's get a little bit more complex example:</p>
<pre class="css">{
    ".main-nav": {
        background: "#333",
        ".logo": {
            color: "#9f0000",
            margin: 0
        }
    },
    ".main-content": {
        background: "#333"
    },
    section: {
        color: "#9f0000",
        ".box": {
            margin: 0
        }
    }
}
</pre>
<p>The result is </p>
<pre class="css">.main-nav, .main-content {
    background: #333;
}
.main-nav .logo, section {
    color: #9f0000;
}
.main-nav .logo, section .box {
    margin: 0;
}
section .box {
    padding: 10px;
    font-size: 24px;
}
</pre>
<p>All identical styles are combined into one single definition. I know that the browsers are really fast nowadays and this is not exactly the most important optimization, but it could decrease the file size.</p>

<h3 id="overwriting">Overwriting</h3>
<p>You know that if you have two identical selectors and they contain definition of the same style the second one overwrites the first. The following code passed through LESS/SASS stays the same:</p>
<pre class="css">.main-nav {
   font-size: 20px;
}
.main-nav {
   font-size: 30px;
}
</pre>
<p>However I think that this leaves one more operation for the browser:  it has to find out that there is another definition with the same selector and style and compute the correct value. Isn't it better to avoid this, so send that directly:</p>
<pre class="css">.main-nav {
    font-size: 30px;
}
</pre>
<p>AbsurdJS takes care about this and produces only one definition. The input may look like that:</p>
<pre class="css">{
    ".main-nav": {
        "font-size": "20px"
    },
    ".main-nav": {
        "font-size": "30px"
    }
}
</pre>
<p>It also makes your debugging processes easier, because there is no so long chain of overwrites.</p>

<h3 id="flexibility">Flexibility</h3>
<p>Ok, we have mixins, variables, placeholders, functions, but once you start using them to write a little bit more complex things you are stuck. Let's get the mixins. I want to create a mixin, which defines another mixin. That's currently not possible in LESS, because you can't use a mixin defined in another mixin. I guess it's a scope problem. SASS has some <a href="http://krasimirtsonev.com/blog/article/Two-handy-and-advanced-SASS-features-and-their-limitations">imperfections</a> regarding the interpolation of the variables. Overall, it's hard to produce good architecture with less code. You have to write a lot and even then, you can't really achieve your goals. The main reason behind these problems is the fact that both, LESS and SASS, have to deal with new syntax, new rules and basically invent a new compiler. However, if we use JavaScript we don't have to think about these issues. </p>
<p>AbsurdJS has something called <em>storage</em>. It could save whatever you want and make it available in other files. For example:</p>
<pre class="css">// B.js
module.exports = function(api) {
    api.storage("theme", function(type) {
        switch(type) {
            case "dark": return { color: "#333", "font-size": "20px" }; break;
            case "light": return { color: "#FFF", "font-size": "22px" }; break;
            default: return { color: "#999", "font-size": "18px" };
        }
    });
}

// A.js
module.exports = function(api) {
    api
    .import(__dirname + "/B.js")
    .add({
        ".main-nav": [
            {
                "font-size": "16px",
                padding: 0,
                margin: 0
            },
            api.storage("theme")("dark")
        ]
    });
}
</pre>
<p>At the end you get:</p>
<pre class="css">.main-nav {
    color: #333;
    font-size: 20px;
    padding: 0;
    margin: 0;
}
</pre>
<p>Using the storage may be a little bit ugly. I mean, you need an array assigned to the selector and then call <code>api.storage</code>. I used that for a while, but later decided to implement something much nicer. It's a feature which I always wanted - the ability to create your own properties and save tons lines. For example, let's create a new property called <code>theme</code> and process its value. </p>
<pre class="css">// B.js - definition of the plugin 
module.exports = function(api) {
    api.plugin('theme', function(api, type) {
        switch(type) {
            case "dark": return { color: "#333", "font-size": "20px" }; break;
            case "light": return { color: "#FFF", "font-size": "22px" }; break;
            default: return { color: "#999", "font-size": "18px" };
        }
    });
}

// A.js - its usage
module.exports = function(api) {
    api
    .import(__dirname + "/B.js")
    .add({
        ".header": {
            theme: "light"
        }
    })
}
</pre>
<p>Again, the result is similar:</p>
<pre class="css">.header {
    color: #FFF;
    font-size: 22px;
}
</pre>

<h2 id="conclusion">Conclusion</h2>
<p><a href="https://github.com/krasimir/absurd#usage">AbsurdJS</a> is something really simple, but avoids the usage of popular CSS preprocessors. It still has the same feature like nested selectors, media queries bubbling, file import, variables, mixins and so one. However, it brings more flexibility, because it is a pure JavaScript. It has even a <a href="https://github.com/krasimir/absurd#using-with-grunt">GruntJS support</a>. I'd like to get some feedback and will be happy if you take a part in the project. The official repository is available here <a href="https://github.com/krasimir/absurd">https://github.com/krasimir/absurd</a>. </p></article>

	<a name="gb-bio"></a>
	<div class="gb-bio">
		<h3>About Krasimir Tsonev</h2>
		<img src="http://davidwalsh.name/demo/krasimir.jpg" alt="Krasimir Tsonev" />
		<p>Krasimir Tsonev is a coder with over ten years of experience in web development. With a strong focus on quality and usability, he is interested in delivering cutting edge applications. Currently, with the rise of the mobile development, Krasimir is enthusiastic to work on responsive applications targeted to various devices. Living and working in Bulgaria, he graduated at the Technical University of Varna with a bachelor and master degree in computer science. If you'd like to stay up to date on his activities, refer to his blog  or follow him on Twitter.</p>
		<p>
			<a href="http://krasimirtsonev.com/blog" class="website" rel="nofollow"><i class="icon-bookmark"></i> krasimirtsonev.com/blog</a>			<a href="//twitter.com/KrasimirTsonev" class="twitter"><i class="icon-twitter"></i> @KrasimirTsonev</a>		</p>
	</div>

<!-- bottom sponsor -->
<div class="ad adLong adComments sencha"></div>

<!-- promo related block -->
<div class="related-features">
	<ul><li><a href="templated">
					<h4 style="background-image: url(/wp-content/themes/jack/images/mastheadLogo.png);"><span class="title">Introducing MooTools Templated</span></h4>
				  </a></li><li><a href="css-gradients">
					<h4 style="background-image: url(http://davidwalsh.name/demo/css-gradients.png);"><span class="title">CSS Gradients</span></h4>
				  </a></li><li><a href="convert-xml-json">
					<h4 style="background-image: url(/wp-content/themes/jack/images/mastheadLogo.png);"><span class="title">Convert XML to JSON with JavaScript</span></h4>
				  </a></li></ul>
</div>

<!-- related posts -->
<div class="related">
	<h3>Related Posts</h3>
	<div class='yarpp-related'>
<ol>
<li><a href='http://davidwalsh.name/starting-css' rel='bookmark' title='Starting to Write&nbsp;CSS'>Starting to Write&nbsp;CSS</a></li>
<li><a href='http://davidwalsh.name/script-style-exclusive-add-custom-values-wordpress-rss-feed' rel='bookmark' title='Script &amp; Style Exclusive: Add Custom Values To Your WordPress RSS&nbsp;Feed'>Script &#038; Style Exclusive: Add Custom Values To Your WordPress RSS&nbsp;Feed</a></li>
<li><a href='http://davidwalsh.name/basic-php-file-handling-create-open-read-write-append-close-delete' rel='bookmark' title='Basic PHP File Handling &#8212; Create, Open, Read, Write, Append, Close, and&nbsp;Delete'>Basic PHP File Handling &#8212; Create, Open, Read, Write, Append, Close, and&nbsp;Delete</a></li>
<li><a href='http://davidwalsh.name/upgrade-nodejs' rel='bookmark' title='Upgrade Node.js via&nbsp;NPM'>Upgrade Node.js via&nbsp;NPM</a></li>
<li><a href='http://davidwalsh.name/mootools-highlighter-search' rel='bookmark' title='Highlighter: A MooTools Search &amp; Highlight&nbsp;Plugin'>Highlighter: A MooTools Search &#038; Highlight&nbsp;Plugin</a></li>
</ol>
</div>
</div>	
	<!-- comments -->
	<!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="http://davidwalsh.name/write-css-javascript"
    dc:identifier="http://davidwalsh.name/write-css-javascript"
    dc:title="Write Your CSS with&nbsp;JavaScript"
    trackback:ping="http://davidwalsh.name/write-css-javascript/trackback" />
</rdf:RDF> -->
	
<a name="comments"></a>

			<h2 class="commentsHeader">Comments</h2>
				<ol id="comments">
			<li data-comment="62567" data-avatar="//gravatar.com/avatar.php?gravatar_id=205577950ac612ea4fb55fb3c3507627&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62567"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://mobila.name/' rel='external nofollow' class='url'>Mikhail Larchanka</a></span>
						<a href="#comment-62567" class="time">September 25, 2013</a>
					</div>
					<p>Nice. But Yandex created BEM few years ago with the same functionality.</p>

				</div></div>
			 </li></li>
<li data-comment="62568" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62568"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62568" class="time">September 25, 2013</a>
					</div>
					<p>AbsurdJS is more like a CSS preprocessor. BEM is a methodology, a concept like OOCSS or Atomic design.</p>

				</div></div>
			 </li><ul class='children'>
<li data-comment="62646" data-avatar="//gravatar.com/avatar.php?gravatar_id=3b4506a429f104fe6f832ae365e0d3c6&size=32&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62646"></a>
				
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://varya.me' rel='external nofollow' class='url'>Varya</a></span>
						<a href="#comment-62646" class="time">September 26, 2013</a>
					</div>
					<p>Kasimir, BEM also provides a JavaScript solution for coding independent components. The idea is similar to what you present in this article. The freshest piece of info about it is the tutorial I am working on right now. Here it is <a href="https://github.com/varya/bem-js-tutorial" rel="nofollow">https://github.com/varya/bem-js-tutorial</a> Please, check it out, you might be interested.<br />
Once been finished this tutorial will be a part of bem.info web site. Although it already has one older article presenting this JavaScript solution <a href="http://bem.info/articles/bem-js-main-terms/" rel="nofollow">http://bem.info/articles/bem-js-main-terms/</a></p>
<p>I personally like developing web components as individuals, when we describe the component states in JavaScript and CSS serves for rendering this states in a proper way. Your solution looks pretty similar in its concept and that is great! Nice to see the ideas of modular web extending the world :-)</p>

				</div></div>
			 </li></li>
<li data-comment="62647" data-avatar="//gravatar.com/avatar.php?gravatar_id=3b4506a429f104fe6f832ae365e0d3c6&size=32&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62647"></a>
				
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Varvara Stepanova</span>
						<a href="#comment-62647" class="time">September 26, 2013</a>
					</div>
					<p>Krasimir, I wrote here about BEM JavaScript solution twice but every time my comment disappears after a few minutes. Can it be because I try to provide a link?<br />
How can I write you the staff?</p>

				</div></div>
			 </li></li>
</ul>
</li>
<li data-comment="62571" data-avatar="//gravatar.com/avatar.php?gravatar_id=c2d3ddf3e4e57b716495a0a4bf5aba10&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62571"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">David Chase</span>
						<a href="#comment-62571" class="time">September 25, 2013</a>
					</div>
					<p>This is definitely something I would like to take for a spin!</p>
<p>Thank you :)</p>

				</div></div>
			 </li></li>
<li data-comment="62572" data-avatar="//gravatar.com/avatar.php?gravatar_id=cb17090197b45ae296a2e029d7e6a81b&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62572"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://blog.ponyfoo.com' rel='external nofollow' class='url'>Nico</a></span>
						<a href="#comment-62572" class="time">September 25, 2013</a>
					</div>
					<p>Why would you ever want to use this over Stylus, LESS, SASS, or the like?</p>

				</div></div>
			 </li></li>
<li data-comment="62574" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62574"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62574" class="time">September 25, 2013</a>
					</div>
					<p>@Nico: because with AbsurdJS you have the flexibility of JavaScript language. You may create complex architectures. With Stylus, LESS or SASS you are bounded to specific syntax and functionalities. As I said in the article you can&#8217;t really create/use a mixin which generates other mixins. You can&#8217;t also define your own properties. It just fits better in my workflow and projects.</p>

				</div></div>
			 </li><ul class='children'>
<li data-comment="62688" data-avatar="//gravatar.com/avatar.php?gravatar_id=cb17090197b45ae296a2e029d7e6a81b&size=32&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62688"></a>
				
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://blog.ponyfoo.com' rel='external nofollow' class='url'>Nico</a></span>
						<a href="#comment-62688" class="time">September 27, 2013</a>
					</div>
					<p>What do you mean you can&#8217;t? with Stylus you can do all of that, and you don&#8217;t get any of the typing overhead of using JavaScript.</p>

				</div></div>
			 </li></li>
</ul>
</li>
<li data-comment="62575" data-avatar="//gravatar.com/avatar.php?gravatar_id=44c1dafa5cda3cb13c3852cfa0af14b3&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62575"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Capaj</span>
						<a href="#comment-62575" class="time">September 25, 2013</a>
					</div>
					<p>I would consider it only if I would have the same luxury of autocomplete as I have with LESS/CSS in Webstorm. I just hope all preprocessors will be obsolete when CSS4 hits mainstream.</p>

				</div></div>
			 </li></li>
<li data-comment="62612" data-avatar="//gravatar.com/avatar.php?gravatar_id=287127786171f3be0934caf345631222&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62612"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://www.teamaton.com' rel='external nofollow' class='url'>andrej</a></span>
						<a href="#comment-62612" class="time">September 26, 2013</a>
					</div>
					<p>The more and more I read and think about css frameworks, preprocessors, etc. the more I come to the conclusion, that a lot of it is not productive. I mean css is such an easy and straight forward language. You can write some rules, use them, throw them away, write new ones. Simple, fast, productive.<br />
The farther you remove yourself from core css writing, the more time you spend on making decisions, which framework to use and how, learning the framework you have chosen, or even writing your own framework and preprocessor.<br />
You are actually not producing or contributing to a product.<br />
And as you mentioned, your css output might me shorter and cleaner, but who cares, if you didn&#8217;t deploy a feature, milestone, product to your customers? Don&#8217;t get me wrong, frontend performance is huge, however there are better stones to turn, if you look at time invested.<br />
Still, I enjoyed your post and hope you are more productive using absurdjs. cheers :)</p>

				</div></div>
			 </li></li>
<li data-comment="62628" data-avatar="//gravatar.com/avatar.php?gravatar_id=2c399091862f31756f7a797b59f6307c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62628"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Adam</span>
						<a href="#comment-62628" class="time">September 26, 2013</a>
					</div>
					<p>I like the idea of generating CSS through code (and JS is as good as any). In complex situations, being able to use computation can simplify things greatly. A couple of problems come to mind, however. </p>
<p>First. You&#8217;re right that having &#8220;background-color&#8221;: &#8220;#fff333&#8243; next to width: &#8220;32px&#8221; is odd. So why not simply use the JavaScript notations? backgroundColor, fontSize and so on. The script to convert them to their proper values is actually minimal.</p>
<p>Second. The terminology &#8220;plugin&#8221; could probably be &#8220;property&#8221; because that&#8217;s what you are defining. The fact that you get some number of CSS properties (or even more rules) is immaterial. It also means that all the &#8220;native&#8221; css properties are written as &#8220;plugins&#8221; and it would be trivial to have them generate browser prefixes and values as necessary. </p>
<p>Third. You need to account for multiple values. Backgrounds, for example can take multiple values. However, if were to pass them all in as a string, you will end up with a lot of boiler plate value.split(&#8216;,&#8217;) and so on (and it doesn&#8217;t work if you have gradients). Instead its probably ok to have myProperty: ['value number 1', 'value number 2']. In the inner workings, you simply call the plugin using apply() so that I get an number of arguments, rather than a single argument that has an array value one time and a single value the next. This allows me to simply iterate through all the items in arguments regardless of the number of values passed in. </p>
<p>Fourth. A utility function to break a compound value into its parts (like background) would be useful. A simple string split on whitespace will not work because sometimes the whitespace is important. a simple split on whitespace could fail, for example, if the value for background included a gradient. </p>
<p>Such a function could also, if you were ambitious, look for number values, color values and so on and return objects for those (so when you get a color object, you can trivially call .darken(0.54) or some other color function on it).</p>
<p>Fifth. The combination of selectors without author intervention will lead to problems. The problem is that in CSS order matters. So changing the order changes the meaning of the CSS. Its not an innocuous change. You could argue that one aught to always write code that can withstand reordering. Unfortunately, that&#8217;s very difficult to do. It basically forces you to never have classes that are used on the same element at the same time that define the same properties. Colors are easy to do (Bootstrap3 eliminated all the default colors from things like buttons and labels probably for a reason like this) but for other things it becomes problematic. </p>
<p>Consider the following:</p>
<pre class="js">
{
 '.subtitle': { 'font-size': '23px'},
 '.btn' : { 'font-size': '16px'},
 '.btn-lrg' : { 'font-size': '23px'},
'.prose': : { 'font-size': '16px'}
}
</pre>
<p>If I understand you correctly this should result in:</p>
<pre class="css">
 .subtitle, .btn-large: { font-size: 23px},
 .btn, .prose: { font-size: 16px},
</pre>
<p>Now if we expect to see  then the font size will always be 16px, not 23px as the author intended. This becomes complicated when in one place you define a shortcut property (say background) and in another you define a specific property like background-color. If your specific property gets reordered before the shortcut, the short cut always wins, even if all it did was background: url(/my-pic.png); because people always forget that omitting parts of the shortcut is explicitly defining the default. And that&#8217;s going to be a PITA to debug.</p>

				</div></div>
			 </li></li>
<li data-comment="62638" data-avatar="//gravatar.com/avatar.php?gravatar_id=140195d458428edc7ea8c8b5cc8c3b09&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62638"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Samuel Allen</span>
						<a href="#comment-62638" class="time">September 26, 2013</a>
					</div>
					<p>I would submit that Stylus is a JS based pre-processor that can do most, if not all of what you are achieving with AbsurdJS (though it defers to more CSSy syntax instead of JSON), and is also a Node module which allows for all kinds of advanced scripting and middleware.  Not saying there isn&#8217;t room for something else, just that you shouldn&#8217;t lump Stylus in with SASS and LESS as &#8216;not being a JS solution&#8217;.</p>

				</div></div>
			 </li></li>
<li data-comment="62643" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62643"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62643" class="time">September 26, 2013</a>
					</div>
					<p>@Adam: good points. A lot of think to think about. Thanks.<br />
@Samuel Allen: I agree with you</p>

				</div></div>
			 </li></li>
<li data-comment="62665" data-avatar="//gravatar.com/avatar.php?gravatar_id=b97e2d382325e002943f718e0c420887&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62665"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://dezayo.com' rel='external nofollow' class='url'>Dezayo</a></span>
						<a href="#comment-62665" class="time">September 27, 2013</a>
					</div>
					<p>Cool! Thanks for sharing!</p>

				</div></div>
			 </li></li>
<li data-comment="62680" data-avatar="//gravatar.com/avatar.php?gravatar_id=60fe1d0b764b0fc33e6203fb62a5eaeb&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62680"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://cedric.dragoncorp.co.jp' rel='external nofollow' class='url'>Simonced</a></span>
						<a href="#comment-62680" class="time">September 27, 2013</a>
					</div>
					<p>I always wondered why should we have to compile CSS? I mean, it&#8217;s supported natively and compiling it adds a useless step in our development workflow.<br />
Not for me I&#8217;m afraid. I use PHP and JS for a reason, because scripts are cool and fast enough for common projects. Compiling takes time I don&#8217;t have, and I do write a lot of CSS.</p>

				</div></div>
			 </li></li>
<li data-comment="62682" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62682"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62682" class="time">September 27, 2013</a>
					</div>
					<p>@Simonced: compiling is necessary for serving only one minified css file. I believe that this is the core concept of the preprocessors. Beside that, you save a lot of time because you group  properties in blocks and reuse them. The variables are also very useful because you make changes on only one place. Yes, I agree that compilation takes time and it&#8217;s one more thing in your ecosystem, but it&#8217;s worth it. In my case was just one more module in my Gruntjs setup.</p>

				</div></div>
			 </li></li>
<li data-comment="62689" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62689"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62689" class="time">September 27, 2013</a>
					</div>
					<p>@Varya: I saw your post. <a href="https://github.com/varya/bem-js-tutorial" rel="nofollow">https://github.com/varya/bem-js-tutorial</a> looks really interesting. I&#8217;ll try to find some time next week to take a look.</p>

				</div></div>
			 </li></li>
<li data-comment="62693" data-avatar="//gravatar.com/avatar.php?gravatar_id=425e381d15bd29d30f85d7530293b7fa&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62693"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://jeffscottward.github.io' rel='external nofollow' class='url'>Jeff</a></span>
						<a href="#comment-62693" class="time">September 27, 2013</a>
					</div>
					<p>Thanks for the write up.</p>
<p>While I appreciate the attempt of what it&#8217;s trying to do, its just a step too far away from EXPRESSIVELY writing CSS or SASS or LESS etc. I have to think about the architecture I&#8217;m working against before I even start writing my code. With enough practice I&#8217;m sure it wouldn&#8217;t be too painful, but even writing the css itself is verbose with quoting the CSS rule.</p>
<p>I love pure SASS (not SCSS).<br />
That plus Jade + Coffeescript = heaven</p>

				</div></div>
			 </li></li>
<li data-comment="62695" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62695"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62695" class="time">September 27, 2013</a>
					</div>
					<p>@Jeff: yep, quoting the properties is really bad idea. I&#8217;m considering changing that. I&#8217;ll follow the advice of Adam and will make shortcuts for every css property.</p>

				</div></div>
			 </li></li>
<li data-comment="62716" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62716"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62716" class="time">September 28, 2013</a>
					</div>
					<p>Hi guys, there is no need to quote the CSS properties anymore (<a href="https://github.com/krasimir/absurd/commit/6a3ad356464e12b06f6a82753ba670f414553468#L1L4" rel="nofollow">https://github.com/krasimir/absurd/commit/6a3ad356464e12b06f6a82753ba670f414553468#L1L4</a>). AbsurdJS converts every uppercase letter to a dash followed by the lowercase version of the letter. For example: WebkitTransform -&gt; -webkit-transformOf course this is valid only for the CSS properties.</p>

				</div></div>
			 </li></li>
<li data-comment="62729" data-avatar="//gravatar.com/avatar.php?gravatar_id=31390c8d48c88c553d66a34b41407801&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62729"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://www.9code.in' rel='external nofollow' class='url'>9code</a></span>
						<a href="#comment-62729" class="time">September 28, 2013</a>
					</div>
					<p>for more programming tutorial visit  <a href="http://www.9code.in" rel="nofollow">http://www.9code.in</a></p>

				</div></div>
			 </li></li>
<li data-comment="62731" data-avatar="//gravatar.com/avatar.php?gravatar_id=7eb9207dd778a1d0a23841ab9021e9f4&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62731"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Troland</span>
						<a href="#comment-62731" class="time">September 28, 2013</a>
					</div>
					<p>There is a problem that what about the abbreviation when you type in js.I mean howto quickly type the css abbreviation when you edit the css in a js file?</p>

				</div></div>
			 </li></li>
<li data-comment="62751" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62751"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62751" class="time">September 28, 2013</a>
					</div>
					<p>@Troland: can you please give an example.</p>

				</div></div>
			 </li></li>
<li data-comment="62754" data-avatar="//gravatar.com/avatar.php?gravatar_id=fe5dbf6590e7a51e0f34b9a000d75465&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62754"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Zoomclub</span>
						<a href="#comment-62754" class="time">September 28, 2013</a>
					</div>
					<p>This is great! </p>
<p>As we know the JSON format dovetails with JS and doing what your doing is in the spirit of NoSQL DB&#8217;s like Mongo, where the JSON format maps much better to the actual code than SQL does/did.</p>
<p>Also, now that we are starting to see the Path Object implemented for the Canvas element AbsurdJS might be the handy way to provide CSS like styling values to the Path Contexts, very rad indeed!</p>
<p>I have struggled with this whole CSS file format and pre-processor issue because I have architected so much of my app into JSON configurations. I&#8217;m certainly in favour of using a unifying file format like JSON for as much as possible. This also allows me to lockdown JSON style and layout in Firebase with their very nice security rules.</p>
<p>Lets keep going with this&#8230; I write my &#8220;CSS&#8221; in JSON now, then I store the JSON on Firebase, then I load JSON from Firebase with its refURLs into the fast local cache Firebase provides, then I use AdsurdJS at runtime to apply specific cached JSON documents to app widgets or Path Objects, etc. Is there any reason this would not work?</p>
<p>Other than that my choice in pre-processors is Stylus, however I want to use JSON and JS as the most universal solution possible.</p>

				</div></div>
			 </li></li>
<li data-comment="62755" data-avatar="//gravatar.com/avatar.php?gravatar_id=660c7e8e4ca66017fb9f9d0e230bffac&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62755"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://wirelessarmy.com/' rel='external nofollow' class='url'>soroush</a></span>
						<a href="#comment-62755" class="time">September 28, 2013</a>
					</div>
					<p>as a security researcher by reading the title I was shocked.<br />
there are plugins  like no script and more that allow users to block javascript to sites that<br />
they don&#8217;t know. so if you rely on javascript and you have a new user, they may never come<br />
back to site. It&#8217;s best to to use javascript when needed.<br />
also if you can do the same thing with php or other sever side scripting, it&#8217;s better to do it<br />
that way</p>

				</div></div>
			 </li></li>
<li data-comment="62767" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62767"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62767" class="time">September 29, 2013</a>
					</div>
					<p>@Zoomclub: everything sounds awesome. Please keep me informed how are the things working. If something goes wrong email me or post an issue to the girhub repo. I&#8217;ll be glad to help. I believe that the only one way to improve the module is to using it. Your use case sounds like the most complex so far and it is interesting for me to see how AbsurdJS will react.<br />
@soroush: AbsurdJS is a Nodejs module. It is not meant to be used client-side. It&#8217;s working at the back-end side of the things. I also recommend using it only in development mode and serve the compiled CSS in production.</p>

				</div></div>
			 </li></li>
<li data-comment="62768" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62768"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62768" class="time">September 29, 2013</a>
					</div>
					<p>@Zoomclub: You my find the latest released helpful. AbsurdJS now supports importing of pure JSON. I.e. you don&#8217;t need to write JavaScript. You may send directly your .json files. <a href="https://github.com/krasimir/absurd/commit/931151acdd13d0eb55801d5ebe33245c281380c0" rel="nofollow">https://github.com/krasimir/absurd/commit/931151acdd13d0eb55801d5ebe33245c281380c0</a></p>

				</div></div>
			 </li></li>
<li data-comment="62771" data-avatar="//gravatar.com/avatar.php?gravatar_id=fe5dbf6590e7a51e0f34b9a000d75465&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62771"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Zoomclub</span>
						<a href="#comment-62771" class="time">September 29, 2013</a>
					</div>
					<p>@Krasimir: I&#8217;ll need AbsurdJS to work on the client-side for sure. Most of my use of JSON configurations is on the client where I let users hotswap them to change the way the app behaves, looks, etc. Your solution is to good for only Node.js, we Hybrid App guys want cool stuff too :-)</p>

				</div></div>
			 </li></li>
<li data-comment="62774" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62774"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62774" class="time">September 29, 2013</a>
					</div>
					<p>@Zoomclub: using AbsurdJS in the client side sounds absurdly :) of course it makes sense for you and I&#8217;m sure that there is cases where you need something like this.</p>

				</div></div>
			 </li></li>
<li data-comment="62776" data-avatar="//gravatar.com/avatar.php?gravatar_id=fe5dbf6590e7a51e0f34b9a000d75465&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62776"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Zoomclub</span>
						<a href="#comment-62776" class="time">September 29, 2013</a>
					</div>
					<p>@Krasimir: I&#8217;m not sure your saying that it is possible or not? Please do let me know. For example, something like AsyncJS runs in Node or on the client. My server side is essentially Firebase, which I use with its client-side API. Then from the client-side local cache I would use a specific JSON configuration to apply its data to a given function. Since my app must dynamically respond to user events doing this on the client is required. </p>
<p>If it is not possible to use AbsurdJS on the client then CSS stays as it was, fit for its one task. Using AbsurdJS I am hoping to break that limit and extend styling to more than just HTML, to the Canvas element and beyond is where I&#8217;m looking at. Otherwise, AbsurdJS is not to much more than another pre-processor for HTML, caught up in an argument over format with other pre-processors and limiting its potential, right?</p>

				</div></div>
			 </li></li>
<li data-comment="62777" data-avatar="//gravatar.com/avatar.php?gravatar_id=ac92c93f447d217e2ece66d84a0e0d3c&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62777"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author"><a href='http://krasimirtsonev.com/blog' rel='external nofollow' class='url'>Krasimir Tsonev</a></span>
						<a href="#comment-62777" class="time">September 29, 2013</a>
					</div>
					<p>@Zoomclub: I already started thinking about porting AbsurdJS for the client-side. It will be possible very soon. What will do there is the same. Accept javascript or json code, compile it to CSS and append it to the DOM. However, I think that such approach is kinda wrong, because the CSS should be one of the first things delivered to the users. Waiting to get the html and javascript, compile the CSS and then display something sounds like a bad thing. Anyway, I&#8217;m not sure exactly how you are going to use it.</p>

				</div></div>
			 </li></li>
<li data-comment="62779" data-avatar="//gravatar.com/avatar.php?gravatar_id=fe5dbf6590e7a51e0f34b9a000d75465&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62779"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Zoomclub</span>
						<a href="#comment-62779" class="time">September 29, 2013</a>
					</div>
					<p>@Krasimir: The port to client-side is wonderful news because I see AbsurdJS as both a solution for HTML and also the Canvas. </p>
<p>For HTML, In modern apps built with frameworks like AngularJS the use of HTML partials is becoming mainstream. In my app I would have these partials already downloaded to the client-side (also as keyed values in a JSON file). I would then want to generate CSS on-the-fly from values that might have been adjusted by a user and then apply that to the HTML partials, all without a trip back to a server.</p>
<p>For the Canvas (which can currently not be styled by CSS), the JSON files managed by AdsurdJS would be directly applied as layout and style values for anything rendered by the 2D context of the Canvas. You could say that the JSON (without conversion to CSS) would then act as a memento or snapshot of the state of the 2D context. Such a snapshot could be used to set the 2D context differently and according to the need of each possible thing rendered on the Canvas. </p>
<p>One way to use this is by fetching a given SVG glyph from a pre-loaded webfont and then applying a JSON snaphot configuration to the 2D context and then on step three drawing the glyph (which could also be scaled, etc by the snapshot too) to the Canvas. </p>
<p>In this way AbsurdJS would allow the JSON to act as a new type/form of CSS for the Canvas. And with the extra step you already do, the JSON can also be converted to true CSS for use on a HTML or a SVG partial. The popular D3.js library is an example of something that produces SVG partials, in most cases these partials are produced dynamically right on the client.</p>

				</div></div>
			 </li></li>
<li data-comment="62905" data-avatar="//gravatar.com/avatar.php?gravatar_id=9779218d78fbc610ec08c6cfd2919cf1&size=48&rating=G&default=http://davidwalsh.name/wp-content/themes/jack/images/anon.png">
				<a name="comment-62905"></a>
				<div class="arrow"></div>
				<div class="detail"><div class="detailContent">
					<div class="meta">
						<span class="author">Artur</span>
						<a href="#comment-62905" class="time">October 1, 2013</a>
					</div>
					<p>JavaScript will rule us all.</p>
<p>AbsurdJS joined with DOMO.js can transform the way we all construct code in the web right now.</p>

				</div></div>
			 </li></li>
		</ol>

		<h2 class="noprint">Be Heard</h2>
		<p class="noprint"><span class="protip">Tip:</span>  Wrap your code in &lt;pre&gt; tags or link to a GitHub Gist!</p>
		<div id="commentFormHolder">
			<div id="commentForm">
				<form action="/wp-comments-post.php" id="cForm" method="post">
										<label>
						<span class="label">Name:</span>
						<input placeholder="Name" name="author" tabindex="1" maxlength="50" required="required" />
					</label>
					<label>
						<span class="label">Email:</span>
						<input placeholder="Email" name="email" type="email" tabindex="2" required="required" />
					</label>
					<label>
						<span class="label">Website:</span>
						<input placeholder="Website" name="url" tabindex="3" />
					</label>
									<textarea id="comment" name="comment" tabindex="4" required="required"></textarea>
					<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="e6e72ad2b3" /></p>

	<p style="clear: both;" class="subscribe-to-comments">
	<input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" />
	<label for="subscribe">Notify me of followup comments via e-mail</label>
	</p>


					<input type="hidden" id="comment_parent" name="comment_parent" />
					<input type="hidden" name="comment_post_ID" value="11990" />
					<input type="submit" name="submit" value="Post Comment!">
					<a href="javascript:;" id="commentUseEditor">Use Code Editor</a>
				</form>
			</div>
		</div>
	
	
			<!-- get the older post -->
					<a href="git-hooks" class="nextPrevLink" id="prevLink"><div class="relative">
				<span class="arrow"></span>
				<span class="label">Older</span>
				<div class="detail"><span>
					Git Hooks and CSS Preprocessors				<span></div>
			</div></a>
		
		<!-- get the newer post -->
					<a href="eliminating-distractions" class="nextPrevLink" id="nextLink">
				<span class="arrow"></span>
				<span class="label">Newer</span>
				<div class="detail"><span>
					Eliminating Distractions				<span></div>
			</a>
			

<!--/CONTENT-->
	
	<!-- end the left section -->
	</section>

		
	<!-- ends "contentHolder" -->
	</div>

	<!-- footer -->
	<footer><div class="centerSite">
		&copy; 
					<a href="/">David Walsh</a>&nbsp;&nbsp;2007-2013. <a href="/contact">Feedback</a>
			</div></footer>

			<script src="//google.com/jsapi?key=ABQIAAAAMt9YZQaG_wbfmb2826e_wBTPUDO5TVHJS-HZdrhJpqnB5yZcfRQFObTd1-bPphEIY11228Z78VhA6A"></script>
		<script>
			google.load("search", "1");
			function googleCallback() {
				z.searchLoaded = 1;
			};
			google.setOnLoadCallback(googleCallback);
			z.d.documentElement.className = "";
		</script>
		<script src="/wp-content/themes/jack/js/lib/curl/src/curl.js?v1377886924147" onload="curl(z,['site'])" async></script>

		<!-- Google RM Code-->
		<!-- Remarketing tags may not be associated with personally identifiable information or placed on pages related to sensitive categories. For instructions on adding this tag and more information on the above requirements, read the setup guide: google.com/ads/remarketingsetup -->
		<script type="text/javascript">
		/* <![CDATA[ */
		var google_conversion_id = 1017883234;
		var google_conversion_label = "J2JfCPa5ygMQ4tSu5QM";
		var google_custom_params = window.google_tag_params;
		var google_remarketing_only = true;
		/* ]]> */
		</script>
		<script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js"></script>
		<noscript>
			<div style="display:inline;">
			<img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/1017883234/?value=0&amp;label=J2JfCPa5ygMQ4tSu5QM&amp;guid=ON&amp;script=0"/>
			</div>
		</noscript>
	<!--[if lt IE 9]>
	<script>window.curl && curl(z,['site'])</script>
<![endif]--></div></body></html>
<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Page Caching using disk: enhanced

 Served from: davidwalsh.name @ 2013-10-01 15:44:33 by W3 Total Cache -->