<!DOCTYPE html>
<script>var __pbpa = true;</script><script>var translated_warning_string = 'Warning: Never enter your Tumblr password unless \u201chttps://www.tumblr.com/login\u201d\x0ais the address in your web browser.\x0a\x0aYou should also see a green \u201cTumblr, Inc.\u201d identification in the address bar.\x0a\x0aSpammers and other bad guys use fake forms to steal passwords.\x0a\x0aTumblr will never ask you to log in from a user\u2019s blog.\x0a\x0aAre you absolutely sure you want to continue?';</script><script type="text/javascript" language="javascript" src="http://assets.tumblr.com/assets/scripts/pre_tumblelog.js?_v=90496f22ffd4b193ff4f3aa39d43d2af"></script>
<html>
    <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# blog: http://ogp.me/ns/blog#">
        <title>python sweetness â€” Thoughts on a better memory abstraction for Python (2)</title>

        <meta charset="utf-8">
        <meta name="description" content="Thoughts on a better memory abstraction for Python (2)" />

        <meta name="color:Accent" content="#4EA3D0"/>
        <meta name="font:Body" content="'Helvetica Neue', Helvetica, Arial, sans-serif"/>
        <meta name="if:Two column posts" content="1"/>

        <!-- Appearance option -->
        <meta name="if:Show bar on top" content="1"/>
        <meta name="if:Show blog title" content="1"/>
        <meta name="if:Show blog description" content="1"/>
        <meta name="if:Show profile photo" content="1"/>
        <meta name="if:Use endless scrolling" content="1"/>


        <meta name="if:Show right column" content="1"/>
        <meta name="if:Place timestamp in left column" content="1"/>
        <meta name="if:Use larger font for quotes" content="0"/>
        <meta name="if:Show image shadows" content="1"/>
        <meta name="if:Show tags" content="1"/>
        <meta name="if:Show post notes" content="1"/>
        <meta name="if:Show copyright in footer" content="1"/>
        <meta name="text:Disqus Shortname" content="" />
        <meta name="text:Google Analytics ID" content=""/>

        <link rel="shortcut icon" href="http://assets.tumblr.com/images/default_avatar_128.png" />
        <link rel="alternate" type="application/rss+xml" title="RSS" href="http://pythonsweetness.tumblr.com/rss"/>

        <!-- HTML5 Shiv -->
        <!--[if lt IE 9]>
                <script src="http://static.tumblr.com/hriofhd/Qj0m8pn7q/html5shiv.js"></script>
        <![endif]-->

        <!-- Reset CSS -->
        <link rel="stylesheet" href="http://static.tumblr.com/thpaaos/DIcklyl4z/reset.css" type="text/css">

        <!-- Theme CSS -->
        <style type="text/css" media="screen">
            body {
                -webkit-font-smoothing: antialiased;
                font-size: 15px;
                font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
                line-height: 24px;
                margin: 0;
                padding: 0;
            }

            *:active, *:focus { outline-width: 0px; }
            img { max-width: 100% }
            .post .top.media img { width: 100%; }
            a { text-decoration: none; color: #4EA3D0; }
            a img { border-width: 0px; }
            strong { font-weight: bold; }
            em { font-style: italic; }

            .group:after {
                visibility: hidden;
                display: block;
                content: "";
                clear: both;
                height: 0;
                }
            * html .group             { zoom: 1; } /* IE6 */
            *:first-child+html .group { zoom: 1; } /* IE7 */

            iframe#tumblr_controls {
                top: 12px !important;
            }

            #color_bar {
                height: 12px;
                background: #4EA3D0;
            }

            #container {
                width: 950px;
                margin: 0 auto;
                padding: 60px 20px;
            }

            #header {
                height: 48px;
                margin: 0 0 60px 0;
            }

            #blog_info {
                width: 700px;
                margin: 0 60px 0 0;
                float: left;
            }

            #blog_info h1 {
                font-size: 36px;
                font-weight: bold;
                letter-spacing: -1px;
                line-height: 36px;
                margin: 8px 0 0 0;
            }

            #blog_info h1 a {
                color: #333333;
            }
                            
            #blog_info h1 a:hover {
                color: #000;
            }

            #blog_info h1 a:active {
                position: relative;
                top: 1px;
            }

            #blog_info p, #blog_info .cont {
                color: #646464;
                margin-top: 7px;
            }

            .cont {
                margin-bottom: 7px;
            }

            #blog_avatar {
                width: 188px;
                position: relative;
                float: right;
                
            }

            #blog_avatar a {
                width: 48px;
                height: 48px;
                  
                position: absolute;
                top: 0;
                left: 0;
                display: block;
            }

            #blog_avatar img {
                width: 48px;
                -webkit-border-radius: 2px;
                -moz-border-radius: 2px;
                border-radius: 2px;
            }

            #blog_avatar a::before {
                content: " ";
                width: 46px;
                height: 46px;
                -webkit-border-radius: 2px;
                -moz-border-radius: 2px;
                border-radius: 2px;
                border: 1px solid rgba(0,0,0,.1);
                position: absolute;
                top: 0px;
                left: 0px;
                z-index: 999;
                display: block;
            }

            #blog_avatar:hover a {
                width: 64px;
                height: 64px;
                top: -8px;
                left: -8px;
            }

            #blog_avatar:hover a img {
                width: 64px;
            }

            #blog_avatar:hover a::before {
                width: 62px;
                height: 62px;
            }

            #blog_avatar:active a {
                top: -7px;
                -webkit-box-shadow: 0px 0px 1px rgba(0, 0, 0, .21);
                box-shadow: 0px 0px 1px rgba(0, 0, 0, .21);
            }

            #posts {
                width: 700px;
                color: #4C4C4C;
                margin: 0 60px 0 0;
                float: left;
            }

            #posts .post {
                list-style-type: none;
                border-bottom: 1px solid #E6E6E6;
                margin: 0 0 45px 0;
                padding: 0 0 45px 0;
            }



            .top.audio * {
                width: 700px;
                height: 91px
            }

            .top.media {
                line-height: 0;
                
                position: relative;
                display: inline-block;
            }

            .top.media.photoset {
                line-height: 0;
                
                position: relative;
                display: inline-block;
            }

            .media img {
                -webkit-border-radius: 2px;
                -moz-border-radius: 2px;
                border-radius: 2px;
            }

            .link_post .link {
                color: #4EA3D0;
                font-size: 21px;
                font-weight: bold;
                border: 1px solid rgba(78,163,208, 0.13);
                background: rgba(78,163,208, 0.13);
                -webkit-border-radius: 2px;
                -moz-border-radius: 2px;
                border-radius: 2px;
                padding: 15px 53px 15px 20px;
                position: relative;
                display: block;
            }

            .link .arrow {
                width: 0; 
                height: 0; 
                border-top: 8px solid transparent;
                border-bottom: 8px solid transparent;
                border-left: 12px solid #4EA3D0;
                position: absolute;
                top: 50%;
                right: 20px;
                margin-top: -8px;
                display: block;
            }

            .link_post .link:hover {
                border: 1px solid rgba(78,163,208, 0.2);
                background: rgba(78,163,208, 0.2);
            }

            .link_post .link:active {
                position: relative;
                top: 1px;
            }

            #posts .post .caption_and_post_info.after_top_part {
                border-top: 0;
                margin: 30px auto auto auto;
                padding-top: 0;
            }

            .post .caption {
                width: auto;
                float: none;
            }

            
            .post .caption {
                width: 513px;
                float: right;
            }
            

            .content_source {
                margin-bottom: 20px;
            }

            .content_source img {
                margin: 0 0 0 4px !important;
                opacity: 0.7;
                vertical-align: middle;
            }

            .caption a, .description a {
                color: #4EA3D0;
                padding: 0 1px;
            }

            .caption a:hover, .description a:hover {
                background: rgba(78,163,208, 0.13);
            }

            .caption a:active, .description a:active {
                background: rgba(78,163,208, 0.2);
            }

            .caption h2 {
                font-size: 32px;
                line-height: 33px;
                margin: 0 0 18px 0;
            }

            .caption h2 a {
                color: #333;
                font-weight: bold;
                letter-spacing: -1px;
            }

            .caption h2 a:hover {
                color: #4EA3D0;
                background: transparent;
            }
                                
            .caption blockquote {
                border-left: 2px solid #E6E6E6;
                padding: 1px 0 1px 20px;
            }

            .caption pre {
                background: #eee;
                font-family: Consolas, Menlo, Monaco, "Lucida Console", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Anonymous Pro", "Courier New", monospace, serif;
                overflow: scroll;
                padding: 10px;
                border-radius: 3px;
                font-size: 13px;
                line-height: 19px;
            }

            .caption p,
            .caption ol,
            .caption ul,
            .caption pre,
            .caption h1,
            .caption h2,
            .post h3,
            .caption h4,
            .caption h5,
            .caption blockquote,
            .caption img,
            .caption embed,
            .caption object {
                margin: 0 0 20px 0;
            }

            .caption p:empty {
                display: none;
            }

            .caption iframe {
                display: block !important;
            }

            .post .caption ul,
            .post .caption ol {
                margin-left: 18px;
            }

            .caption .question {
                display: block;
                padding: 15px;
                font-size: 15px;
            }

            .caption .answer {
                margin-top: 20px;
            }

            .caption .asker {
                line-height: 24px;
                margin: 25px 20px 0 23px;
            }

            .caption .asker img {
                float: left;
                margin: 0 7px 0 0;
            }

            .caption .asker a {
                margin-left: 0;
            }

            .caption .quote {
                color: #333;
                font-weight: bold;
            }

            .quote span {
                display: inline-block;
            }

            .quote.short_text {
                font-size: 50px;
                letter-spacing: -2px;
                line-height: 48px;
                margin: 0 0 18px 0;
            }

            .quote.short_text span {
                margin: 0 0 0 -22px;
            }

            .quote.medium_text {
                font-size: 36px;
                letter-spacing: -1px;
                line-height: 36px;
                margin: 0 0 20px 0;
            }

            .quote.medium_text span {
                margin: 0 0 0 -13px;
            }

            .quote.long_text,
            .quote.text {
                font-size: 24px;
                line-height: 27px;
                margin: 0 0 20px 0;
            }

            .quote.long_text span {
                margin: 0 0 0 -9px;
            }

            .quote.larger_text {
                font-size: 50px !important;
                letter-spacing: -2px !important;
                line-height: 48px !important;
                margin: 0 0 18px 0 !important;
            }

            .quote.larger_text span {
                margin: 0 0 0 -22px !important;
            }

            .quote_source {
                margin: 0 0 20px 0 !important;
            }

            .caption .conversation {
                margin-left: 0 !important;
                margin-bottom: 30px;
                list-style-type: none;
            }

            .conversation .chat_line {
                padding: 10px 16px;
            }

            .conversation .chat_line.user1 {
                background: #f5f5f5;
            }

            .conversation .chat_line.user2 {
                background: #fff;
            }

            .conversation .chat_line.user3 {
                background: #ddd;
            }

            .conversation .chat_line.user4 {
                background: #ccc;
            }

            .post .post_info {
                width: auto;
                font-size: 12px;
                font-family: 'Times New Roman', Times, serif;
                letter-spacing: 2px;
                text-transform: uppercase;
                list-style-type: none;
                -webkit-font-smoothing: subpixel-antialiased;
                margin: 1px 0 0 -3px;
                overflow: hidden;
            }

            .post_info li {
                line-height: 14px;
                margin-bottom: 10px;
                float: left;
            }

            .post_info li a {
                margin: 0 10px 0 0;
                padding: 0 2px 0 5px;
            }

            .post_info .timestamp {
                color: #4c4c4c;
                padding: 0 2px 0 5px;
                display: inline-block;
            }

            .post_info .timestamp:hover {
                background: rgba(0,0,0,.08);
            }

            .post_info .timestamp:active {
                background: rgba(0,0,0,.1);
            }

            .post_info .notecount {
                color: #4c4c4c;
                padding: 0 2px 0 5px;
                display: inline-block;
            }

            .post_info .notecount:hover {
                background: rgba(0,0,0,.08);
            }

            .post_info .notecount:active {
                background: rgba(0,0,0,.1);
            }

            /* Baselines */

            
            .timestamp.has_caption {
                margin-top: 6px;
            }

            .timestamp.has_caption.with_title {
                margin-top: 18px
            }
            

            .tag {
                color: #4EA3D0;
                display: table;
            }

            .tag span {
                color: #4c4c4c;
                display: table-cell;
            }

            .tag:hover {
                background: rgba(78,163,208, 0.13);
            }

            .tag:hover span {
                color: #4EA3D0;
            }

            .tag:active {
                background: rgba(78,163,208, 0.2);
            }

            .post .post_info.floating {
                width: 157px;
                float: left;
            }

            .post .post_info.floating li {
                float: none;
            }

            .post_notes {
                clear: both;
            }

            ol.notes {
                color: #4C4C4C;
                font-size: 13px;
                text-shadow: 0px 1px 0px rgba(255,255,255,.7);
                text-align: left;
                list-style-type: none;
                border-top: solid 1px #E6E6E6;
                -webkit-font-smoothing: subpixel-antialiased !important;
                margin: 40px auto auto auto;
            }

            ol.notes li.note {
                border-bottom: solid 1px #E6E6E6;
                padding: 9px 0 10px 0;
            }

            ol.notes li.note img.avatar {
                width: 16px;
                height: 16px;
                border-radius: 3px;
                vertical-align: -4px;
                margin-right: 6px;
            }

            ol.notes a {
                color: #4C4C4C;
                text-decoration: underline;
            }

                ol.notes a:hover {
                    color: #4C4C4C;
                }

            ol.notes li.note blockquote {
                border-color: #eee;
                padding: 4px 10px;
                margin: 10px 0px 0px 25px;
            }

            ol.notes li.note blockquote a {
                text-decoration: none;
            }

            ol.notes li.note:last-child {
                border-width: 0px;
            }

            #sidebar {
                width: 188px;
                color: #4c4c4c;
                font-size: 14px;
                margin: -8px 0 0 0;
                float: right;
            }

            #sidebar .description {
                line-height: 21px;
                border-bottom: 1px solid #E6E6E6;
                margin: 3px 0 20px 0;
                padding: 0 0 20px 0;
            }

            #sidebar .links {
                font-size: 12px;
                font-family: 'Times New Roman', Times, serif;
                letter-spacing: 2px;
                text-transform: uppercase;
                list-style-type: none;
                -webkit-font-smoothing: subpixel-antialiased;
                margin: 0 0 20px 0;
                line-height: 20px;
            }

            #sidebar .links a {
                color: #4c4c4c;
            }

            #sidebar .links a:hover {
                color: #4EA3D0;
            }

            .links .icon {
                width: 12px;
                height: 12px;
                background: #383838 url('http://static.tumblr.com/thpaaos/1xRm66voi/icons_sprite.png');
                margin: 0 8px 0 0;
                display: inline-block;
            }

            .links a:hover .icon {
                background-color: #4EA3D0;
            }

            .ask .icon { background-position: 0 0; margin-bottom: -2px; }
            .submit .icon { background-position: 0 -12px; margin-bottom: -1px; }
            .rss .icon { background-position: 0 -24px; }
            .archive .icon { background-position: 0 -36px; }

            .bubble {
                color: #6f6f6f;
                font-size: 13px;
                line-height: 20px;
                background: #f5f5f5;
                border: 1px solid #d5d5d5;
                -webkit-border-radius: 4px;
                -moz-border-radius: 4px;
                border-radius: 4px;
                padding: 8px 12px;
                position: relative;
                display: none;
            }

            #twitter_container .bubble:first-child {
                display: block;
            }

            .bubble .arrow {
                width: 0; 
                height: 0; 
                position: absolute;
                display: block;
            }

            .bubble .arrow.fill {
                border-left: 8px solid transparent;
                border-right: 8px solid transparent;
                border-top: 8px solid #f5f5f5;
                bottom: -8px;
                left: 25px;
            }

            .bubble .arrow.border {
                border-left: 10px solid transparent;
                border-right: 10px solid transparent;
                border-top: 10px solid #d5d5d5;
                bottom: -10px;
                left: 23px;
            }

            .bubble:hover {
                background: #f2f2f2;
                border-color: #CFCFCF;
            }

            .bubble:hover .arrow.fill {
                border-top-color: #F1F1F1;
            }

            .bubble:hover .arrow.border {
                border-top-color: #d5d5d5;
            }

            .twitter_username {
                max-width: 166px;
                color: #4c4c4c;
                font-size: 12px;
                font-family: 'Times New Roman', Times, serif;
                letter-spacing: 0.4em;
                text-transform: uppercase;
                text-overflow: ellipsis;
                -webkit-font-smoothing: subpixel-antialiased;
                margin: 11px 0 0 22px;
                overflow: hidden;
                display: inline-block;
                opacity: 1;
            }

            .twitter_username:hover {
                color: #4EA3D0;
            }

            #footer {
                width: 700px;
                color: #4C4C4C;
                font-size: 12px;
                font-family: 'Times New Roman', Times, serif;
                letter-spacing: 2px;
                text-transform: uppercase;
                -webkit-font-smoothing: subpixel-antialiased;
            }

            #footer .copyright {
                width: 50%;
                float: left;
            }

            #footer .pagination {
                width: 230px;
                text-align: right;
                float: right;
                position: relative;
            }

            .pagination .count {
                float: left;
            }

            .pagination .buttons {
                width: 113px;
                height: 30px;
                margin: -2px 0 0 30px;
                float: right;
                position: absolute;
                top: 0;
                right: 0;
                z-index: 10;
            }

            .pagination .buttons.disabled {
                z-index: 9;
            }

            .buttons a,
            .buttons li {
                width: 56px;
                height: 28px;
                line-height: 999px;
                text-align: center;
                border: 1px solid #C8C8C8;
                -webkit-box-shadow: inset 0px 1px 0px 0px rgba(255, 255, 255, 1);
                box-shadow: inset 0px 1px 0px 0px rgba(255, 255, 255, 1);
                background: #f1f1f1; /* Old browsers */
                background: -moz-linear-gradient(top,  #f1f1f1 0%, #e8e8e8 100%); /* FF3.6+ */
                background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f1f1f1), color-stop(100%,#e8e8e8)); /* Chrome,Safari4+ */
                background: -webkit-linear-gradient(top,  #f1f1f1 0%,#e8e8e8 100%); /* Chrome10+,Safari5.1+ */
                background: -o-linear-gradient(top,  #f1f1f1 0%,#e8e8e8 100%); /* Opera 11.10+ */
                background: -ms-linear-gradient(top,  #f1f1f1 0%,#e8e8e8 100%); /* IE10+ */
                background: linear-gradient(top,  #f1f1f1 0%,#e8e8e8 100%); /* W3C */
                filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f1f1f1', endColorstr='#e8e8e8',GradientType=0 );/* IE6-9 */
                list-style-type: none;
                overflow: hidden;
                position: relative;
                display: block;
            }

            .buttons.disabled li {
                background: #f5f5f5;
            }

            .buttons a:active {
                -webkit-box-shadow: none;
                box-shadow: none;
                background: #E6E6E6;
            }

            .buttons .arrow {
                width: 10px;
                height: 14px;
                position: absolute;
                top: 50%;
                display: block;
                background-image: url(http://static.tumblr.com/ogedyaw/xu1m8jxnf/arrow_sprite.png);
            }

            .buttons .left {
                -webkit-border-top-left-radius: 2px;
                -webkit-border-bottom-left-radius: 2px;
                -moz-border-radius-topleft: 2px;
                -moz-border-radius-bottomleft: 2px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                position: absolute;
                left: 0;
            }

            .left .arrow {
                background-position: 0 15px;
                margin: -7px auto auto 20px;
            }
                
            .disabled .left .arrow {
                background-position: 0 0;
            }

            .buttons .right {
                border-left-width: 1px;
                -webkit-border-top-right-radius: 2px;
                -webkit-border-bottom-right-radius: 2px;
                -moz-border-radius-topright: 2px;
                -moz-border-radius-bottomright: 2px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                position: absolute;
                right: 0;
            }

            .right .arrow {
                background-position: 10px -71px;
                margin: -7px auto auto 24px;
            }

            .disabled .right .arrow {
                background-position: 10px -56px;
            }

            /* Protection for parents that have floating children */
            #header:after,
            #container:after,
            .caption_and_post_info:after,
            #footer:after
            .buttons:after {
                content: ".";
                display: block;
                height: 0;
                clear: both;
                visibility: hidden;
            }
        </style>

        
            <!-- Simplified permalink pages (Hides right column) -->
            <style type="text/css" media="screen">
                #container {
                    width: 700px;
                }

                #header {
                    width: 700px;
                }

                #blog_info {
                    width: 513px;
                    margin: 0;
                }

                #blog_avatar {
                    width: 48px;
                    height: 48px;
                    backround-color: red;
                }

                #blog_avatar a {
                    position: absolute;
                    left: auto;
                    right: 0;
                }

                #blog_avatar:hover a {
                    left: auto;
                    right: -8px;
                }

                #sidebar {
                    display: none;
                }

                #blog_info {
                    
                }

                #blog_info .description {
                    margin-bottom: 60px;
                }

                .post .post_info,
                .post .post_info.floating,
                .post .caption {
                    width: auto !important;
                    float: none;
                }

                .post .post_info {
                    margin-top: 45px;
                }

                .post .post_info li,
                .post .post_info.floating li {
                    line-height: 14px;
                    margin-bottom: 10px;
                    float: left;
                }

                .post .post_info li a,
                .post .post_info.floating li a {
                    margin: 0 10px 0 0;
                    padding: 0 2px 0 5px;
                }
            </style>
        

        

        <!-- Custom CSS -->
        <style type="text/css" media="screen">
            
        </style>

    
<!-- BEGIN TUMBLR FACEBOOK OPENGRAPH TAGS -->
<!-- If you'd like to specify your own Open Graph tags, define the og:url and og:title tags in your theme's HTML. -->
<!-- Read more: http://ogp.me/ -->
<meta property="fb:app_id" content="48119224995" />
<meta property="og:site_name" content="python sweetness" />
<meta property="og:title" content="Thoughts on a better memory abstraction for Python (2)" />
<meta property="og:url" content="http://pythonsweetness.tumblr.com/post/62321291712/thoughts-on-a-better-memory-abstraction-for-python-2" />
<meta property="og:description" content="[This is a followup to Thoughts on a better memory abstraction for Python. I&rsquo;ll aim to keep this post better structured and to the point compared to last, however such traits don&rsquo;t quite come..." />
<meta property="og:determiner" content="a" />
<meta property="og:type" content="tumblr-feed:entry" />
<meta property="og:image" content="http://assets.tumblr.com/images/og/text_200.png" />
<!-- END TUMBLR FACEBOOK OPENGRAPH TAGS -->


<!-- TWITTER TAGS -->
<meta charset="utf-8">
            <meta name="twitter:card" content="summary" />
            <meta name="twitter:description" content="[This is a followup to Thoughts on a better memory abstraction for Python. I&amp;#8217;ll aim to keep this post better structured and to the point compared to last, however such traits don&amp;#8217;t quite come naturally!]
 Acid&nbsp;is a prototype design for a Python library that sits on top of a key/value store to provide important high-level primitives from a traditional database, that typically drive developers to use more complex database systems.
 Its raison d&amp;#8217;&ecirc;tre is a magical bytestring&harr;tuple encoding used to provide intuitive secondary index management (thus immediately covering 90% of common DBMS use), however also included are a grab-bag of features applicable to any program consuming a key/value store: an ORM-alike that transparently manages its record encoding, a novel transparent batch compression scheme, subdivision of storage into distinct collections (aka &amp;#8220;tables&amp;#8221;), event listeners, and so on, all while obviating the need for a query language, stored procedures, 40kLOC ORM or 400kLOC server, heuristics-driven query planner, or a restrictive data model.
 A particular emphasis is being made on performance, with many parts of the library implemented in C, and being designed from the ground up to minimize redundant work common to basically every existing ORM/DBMS solution. Two sources of redundant work are memory copies and unnecessary deserialization; in the current design, both are closely related and the fundamental problem to be discussed in these posts.
 The focus on efficiency is motivated in large part by dissatisfaction with the current state of the Python tooling universe, where it is commonplace to be content in squeezing ~100 requests/sec out of a &#36;5,000 server. High level interpreted languages are not inherently &amp;#8220;slow&amp;#8221;, and a Python-based solution need not be so excessively wasteful: there is no reason why 40kLOC of boilerplate Python code should exist for an ORM, when the majority of its users will never dare venture beneath its covers. An HTTP parser or WSGI library need not be written in bytecode, and there is little benefit in doing so, when their corresponding specifications haven&amp;#8217;t changed meaningfully in decades.
 Many motivating examples of high performance bytecode are in use every day, including quite probably between your reading this post and the machine it was served from: iptables. Here we have network filtering programs represented as linked lists of individual instructions(!), and yet few would argue that this dinosaur of Linux networking were overly slow, inflexible or unproductive. It succeeds because the right primitives were provided, allowing high level business logic to express arbitrary domain rules yet execute at Gbit/sec filtering rates. And so Acid is an exploration of how a Python storage primitive might look from this seemingly contrarian and increasingly underappreciated perspective.
 There are farther reaching motivations to explore this area: we are somewhere between 5 and 20 years away from seeing machines with L4 cache (RAM) and mass storage (hard disk/SSD) becoming unified. When &amp;#8220;hitting disk&amp;#8221; is no longer a source of latency, inefficiencies will increasingly be identified in the ever-shortening path between a consumer and the data store: system call overhead, context switches, cache pollution due to copies, unnecessary serialization. When such a day comes, and if CPU designs, OS designs, or the laws of physics don&amp;#8217;t change radically beforehand, the order of magnitude architectural performance differences may cause the traditional barrier between DBMS and application to look increasingly untenable.
 The goal of developing this library is not to produce a standalone solution that will replace every DBMS for every use case tomorrow, but to form the basis for experimenting with a new set of principles for designing software, that might be made palatable to even the most novice of programmers. The ultimate goal is to write interesting network software that doesn&amp;#8217;t suck; for illustration&amp;#8217;s sake I&amp;#8217;ll define the standard unit of Doesn&amp;#8217;t Suck (DSU) as multiples of 100 HTTP requests/second capable of being served over Ethernet by a perfectly conventional looking CPython 2.7 transactional database/web application&nbsp;running on an 800Mhz Raspberry Pi. As of a few weeks ago Acid was somewhere around 1.46 DSUs, however recent changes have pushed it back to 0.6-0.8.
 Since the last post I&amp;#8217;ve more or less been working full-time on trying to bring Acid into a functional state. It&amp;#8217;s beginning to look like I&amp;#8217;m not going to get everything I want completed before the dawn of 2014, since reality is beckoning, and in the coming weeks I must focus on picking up contract work, so it is going on the back-burner yet again.
 Despite that, what I have is starting to feel useful and increasingly solid. For testing I&amp;#8217;ve moved from random data to something more practical, focusing on a real database of 15.5 million Reddit comments scraped over a 15 day period at the end of August. Importing this dump using the (incomplete) redcache demo produces a 41 million entry 5.4GiB LMDB database, containing Comment, Link, User, and Subreddit records (presently encoded as JSON) along with a plethora of secondary indices.
 Despite its unoptimized state, performance is already quite reasonable: an index scan from this database, including the index range scan itself, and one random lookup and full JSON decode for each target record value, already yields &amp;gt;55k records/sec on a single Core i7 thread, while key-only index scans yield over 750k keys/sec.
 The itertools abuse mess from the previous post was cleaned up, with the core iterator logic now expressed as two easily maintained Python classes, although more work is needed. The new implementation is testable, defers the aforementioned bytestring/tuple domain dilemma to Key/KeyList classes, and is modular enough to be replaced with C code when the time comes (which itself promises at least a doubling in throughput).
 The unintentional topic of the previous post, immediate decoding of key tuples, has all but been addressed. Acid now includes a Key type&nbsp;that behaves just like a tuple, except in the C implementation elements are lazily decoded as __getitem__ is invoked, and comparisons occur uniformly in the bytestring domain. The remaining work is to finish KeyList, a bigger brother to Key which will repeat the lazy decode process except for sequences of keys. This is used to realize index entries and batch keys.
 I intend to massage the redcache demo into some lightweight clone of the Reddit site, since while not a perfect demonstration, the hierarchical layout of a thread is particularly amenable to clustering and range scans, and the localized redundancy of context-specific discussion compresses well. This makes a reasonable example of how Acid&amp;#8217;s batch compression could be applied in a real world application: scanning any sub-thread requires a minimal set of decompressions, so throughput remains impressive, while realizing a 3-5x storage (i.e. RAM) savings over a traditional DBMS.
 A better demonstration of the benefits of compression requires a dataset with even more redundancy: system logs and financial time series both demonstrate these traits, but getting hold of a reasonable chunk of free, public data in either domain is much more difficult.
 Now that the scene is set, finally memory sharing can be described. It&amp;#8217;s worth repeating why such an interface is useful to begin with: the primary storage engine Acid is being designed for, LMDB, is implemented as a read-only memory mapping exposed directly to consumer code, such that performing a lookup or a scan requires zero copies. Complementing this, py-lmdb&nbsp;has been designed from scratch to ensure these properties are preserved even from within Python code.
 One fabulous trait of LMDB is that all pointers returned to the user are guaranteed to remain stable until the end of a read transaction, or within a write transaction until the next mutation occurs. This means that given the right primitives surrounding LMDB, it need never be necessary to explicitly copy data while performing lookups or scans. This is interesting since from within CPython using py-lmdb, random lookup rates exceeding 1 million keys/sec are possible along with scan rates exceeding 11 millions keys/sec (assuming a hot-cached database, of course).
 To save time and space, it is enough to say that the C implementation of Key, KeyList (and eventually Struct) optionally manage their own buffer, but what they really want to do is *borrow* that buffer until they are forced to copy it, since the original bytes are already sitting there in memory up for grabs. With lazy decoding, borrowed buffers and a set of freelists for Key, KeyList, and Struct, joins, range scans and lookups could be translated into little more than pointer manipulation.
 Given today&amp;#8217;s index scan rate of 750k keys/second, already providing powerful query tools such as hash joins&nbsp;look possible, but with the promise of at least a further doubling of this rate I&amp;#8217;m certain large joins will be practical on a per-request basis directly from Python code.
 The problem with exposing raw pointers in Python is the single abstraction available for them, the buffer interface, is simultaneously too liberating and too restrictive. On the one hand a freestanding buffer object may be created, whose lifetime is uncontrolled and unobservable. On the other hand using the &amp;#8220;locking buffers&amp;#8221; interface, the ability for the producer object to change state in any way is utterly prohibited while any buffer exists.
 Using the standard buffer interface, a choice must be made between requiring the developer to *know* (as if we ever do) not to modify or abort a transaction while holding any live object dependent on a buffer, or use the locking interface and cause the developer deep surprise and indignation to discover s/he *can&amp;#8217;t abort or write to the database* since somewhere in memory is a live reference to a locked buffer, and s/he hasn&amp;#8217;t a clue where it is.
 Even if the standard interface could somehow communicate lifetimes, more problems rear their heads: for each bytestring yielded from LMDB, a 90ish byte heap allocated buffer object needs to exist, simply to contain a 16 byte (ptr, length) pair, for yet another type (our Key, KeyList and Struct) to indirectly point into them. Finally we&amp;#8217;re not just interested in exposing crash/corruption-safe buffers, the result should also be &amp;#8220;pythonic&amp;#8221; (ugh) in that memory management, including the sudden disappearence of a buffer, should be made transparent to the user.
 What we really want is some kind of &amp;#8220;reverse buffer protocol&amp;#8221;, one where instead of the consumers informing the producer when it is okay to die, the producer informs consumers of their imminent demise. This way distinct C object implementations could secretly conspire to manage buffers on the developer&amp;#8217;s behalf, meanwhile the developer remaining innocent to the duplicitous schemes of the seemingly innocent Python objects s/he is freely manipulating.
 Of course using some custom package-internal type these affairs could managed privately, but the consumer of the buffer is Acid, and the producer of the buffer is py-lmdb. Even if we make both packages depend on a third library providing some magical new UberBuffer type, the utterly abhorrent (IMHO) type leakage&nbsp;occurs, since now any consumer of py-lmdb might possibly be forced or encouraged to consume some custom type designed only for internal use by the C implementation.
 Ideally py-lmdb and Acid could communicate somehow, and in such a way as no novel types are introduced, thus preventing further downstream pollution (I wish more people would understand this while designing libraries!). Since almost the entirety of the Python C-API and its dependents support buffer objects anywhere a string is accepted, ideally the buffer object interface to py-lmdb should be preserved, since it already has excellent compatibility with the existing ecosystem, and ideally communication of buffer lifetimes need not involve a separate heap allocation for every buffer shared (using an object that in all likelihood is double or more the size of the string being shared).
 Enter the MemSink protocol&nbsp;(described here).
 This is basically where I&amp;#8217;m at today, and I hate it, even though it ticks the boxes: buffers are transported across the Python interface as a pair of (plain old buffer object, source object), where &amp;#8220;source object&amp;#8221; is any type (in this case a py-lmdb Transaction object) that sports a magical __memsource__ class attribute. That attribute contains a PyCapsule wrapping a struct that describes the location of a doubly-linked list head in the source object&amp;#8217;s PyObject.
 When a C type (in this case Key.from_raw(buf, source)) receives one of these pairs, it asks the memsink module&amp;#8217;s C API to hook it up to the source&amp;#8217; notification list. The memsink module in turn looks up a __memsink__ class attribute on the consumer type, which describes the location of a doubly-linked list node in the sink&amp;#8217;s PyObject structure along with a (C) invalidation callback function.
 The memsink C implementation then stiches the sink object onto the source&amp;#8217;s invalidation list. Now if the sink dies first, it asks the memsink module to unlink it. If the source wants to die first (e.g. due to transaction commit or mutation), the memsink module instead walks the source&amp;#8217;s invalidation list, invoking the C invalidation callback for each sink. In the case of Key, KeyList, and Struct, the invalidation callback will attempt to copy the borrowed buffer into their own PyObject, or if it won&amp;#8217;t fit, allocate a new heap buffer and copy it there instead.
 This way within a transaction, no memory copies occur, large scans and joins are as close to free as they&amp;#8217;ll ever be, and if the user decides to keep a huge list of dependent objects around while terminating the transaction, those objects will transparently be preserved after the transaction ends.
 Key and py-lmdb&nbsp;are the first entities to get an experimental implementation of this protocol, disabled when the memsink module isn&amp;#8217;t installed. Basically it sucks and I hate it, not least because some intermediary Python code needs to introduce the producer to the consumer, but yet again I&amp;#8217;ve run out of time to explain all the problems with this scheme, just that so far it&amp;#8217;s the best one I&amp;#8217;ve got.
 [To be continued]
 Comments on a postcard to @edeadlk. " />
            <meta name="twitter:title" content="Thoughts on a better memory abstraction for Python (2)" />
            <meta name="twitter:url" content="http://pythonsweetness.tumblr.com/post/62321291712/thoughts-on-a-better-memory-abstraction-for-python-2" />
            <meta name="twitter:site" content="tumblr" />
            <meta name="twitter:app:name:iphone" content="Tumblr" />
            <meta name="twitter:app:name:ipad" content="Tumblr" />
            <meta name="twitter:app:name:googleplay" content="Tumblr" />
            <meta name="twitter:app:id:iphone" content="305343404" />
            <meta name="twitter:app:id:ipad" content="305343404" />
            <meta name="twitter:app:id:googleplay" content="com.tumblr" />
            <meta name="twitter:app:url:iphone" content="tumblr://x-callback-url/blog?blogName=pythonsweetness&amp;postID=62321291712&amp;referrer=twitter-cards" />
            <meta name="twitter:app:url:ipad" content="tumblr://x-callback-url/blog?blogName=pythonsweetness&amp;postID=62321291712&amp;referrer=twitter-cards" />
            <meta name="twitter:app:url:googleplay" content="tumblr://x-callback-url/blog?blogName=pythonsweetness&amp;postID=62321291712&amp;referrer=twitter-cards" />
    

<script type="text/javascript" src="http://assets.tumblr.com/assets/scripts/tumblelog.js?_v=530b76c3ccad06e5b7d907a6c515b841"></script>
<meta http-equiv="x-dns-prefetch-control" content="off"/>
</head>
    <body>
        

        <section id="container" class="group">            
            <header id="header">
                <section id="blog_info">
                    <h1><a href="/">python sweetness</a></h1>
                    
                    
                </section>

                
            </header>

            <aside id="sidebar">
                

                

                <ul class="links" style="display:none; display:block;">
                    <li><a href="/ask" class="ask"><span class="icon"></span>ask me anything</a></li>
                    
                </ul>

                <ul class="links">
                    <li><a href="http://pythonsweetness.tumblr.com/rss" class="rss"><span class="icon"></span>rss</a></li>
                    <li><a href="/archive" class="archive"><span class="icon"></span>archive</a></li>
                </ul>

                
            </aside>

            <ul id="posts">
                <!-- START POSTS -->
                

                        <li class="post group"   >  

                        

                        

                        

                        

                        

                        <section class="group caption_and_post_info
                            
                            
                            
                            
                            
                        ">
                            
                                <section class="caption group">
                                    <h2><a href="http://pythonsweetness.tumblr.com/post/62321291712/thoughts-on-a-better-memory-abstraction-for-python-2">Thoughts on a better memory abstraction for Python (2)</a></h2>
                                    <div class="cont group"><p><em>[This is a followup to <a href="http://pythonsweetness.tumblr.com/post/58148801190/thoughts-on-a-better-memory-abstraction-for-python">Thoughts on a better memory abstraction for Python</a>. I&#8217;ll aim to keep this post better structured and to the point compared to last, however such traits don&#8217;t quite come naturally!]</em></p>
<p><a href="http://acid.readthedocs.org/">Acid</a>Â is a prototype design for a Python library that sits on top of a key/value store to provide important high-level primitives from a traditional database, that typically drive developers to use more complex database systems.</p>
<p>Its raison d&#8217;Ãªtre is a magical bytestringâ†”tuple encoding used to provide intuitive secondary index management (thus immediately covering 90% of common DBMS use), however also included are a grab-bag of features applicable to any program consuming a key/value store: an <a href="http://acid.readthedocs.org/en/latest/meta.html">ORM-alike</a> that transparently <a href="https://github.com/dw/acid/issues/41">manages its record encoding</a>, a novel <a href="http://acid.readthedocs.org/en/latest/intro.html#batch-compression">transparent batch compression scheme</a>, subdivision of storage into distinct collections (aka &#8220;tables&#8221;), <a href="http://acid.readthedocs.org/en/latest/events.html">event listeners</a>, and so on, all while obviating the need for a query language, stored procedures, <a href="http://www.sqlalchemy.org/">40kLOC ORM</a> or <a href="http://www.mongodb.org/">400kLOC server</a>, heuristics-driven query planner, or a <a href="http://www.sqlite.org/">restrictive data model</a>.</p>
<p>A particular emphasis is being made on performance, with many parts of the library implemented in C, and being designed from the ground up to minimize redundant work common to basically every existing ORM/DBMS solution. Two sources of redundant work are memory copies and unnecessary deserialization; in the current design, both are closely related and the fundamental problem to be discussed in these posts.</p>
<p>The focus on efficiency is motivated in large part by dissatisfaction with the current state of the Python tooling universe, where it is commonplace to be content in squeezing ~100 requests/sec out of a $5,000 server. High level interpreted languages are not inherently &#8220;slow&#8221;, and a Python-based solution need not be so excessively wasteful: there is no reason why 40kLOC of boilerplate Python code should exist for an ORM, when the majority of its users will never dare venture beneath its covers. An HTTP parser or WSGI library need not be written in bytecode, and there is little benefit in doing so, when their corresponding specifications haven&#8217;t changed meaningfully in decades.</p>
<p>Many motivating examples of high performance bytecode are in use every day, including quite probably between your reading this post and the machine it was served from: iptables. Here we have network filtering programs represented as linked lists of individual instructions(!), and yet few would argue that this dinosaur of Linux networking were overly slow, inflexible or unproductive. It succeeds because the right primitives were provided, allowing high level business logic to express arbitrary domain rules yet execute at Gbit/sec filtering rates. And so Acid is an exploration of how a Python storage primitive might look from this seemingly contrarian and increasingly underappreciated perspective.</p>
<p>There are farther reaching motivations to explore this area: we are somewhere between 5 and 20 years away from seeing machines with L4 cache (RAM) and mass storage (hard disk/SSD) becoming unified. When &#8220;hitting disk&#8221; is no longer a source of latency, inefficiencies will increasingly be identified in the ever-shortening path between a consumer and the data store: system call overhead, context switches, cache pollution due to copies, unnecessary serialization. When such a day comes, and if CPU designs, OS designs, or the laws of physics don&#8217;t change radically beforehand, the order of magnitude architectural performance differences may cause the traditional barrier between DBMS and application to look increasingly untenable.</p>
<p>The goal of developing this library is not to produce a standalone solution that will replace every DBMS for every use case tomorrow, but to form the basis for experimenting with a new set of principles for designing software, that might be made palatable to even the most novice of programmers. The ultimate goal is to write interesting network software that doesn&#8217;t suck; for illustration&#8217;s sake I&#8217;ll define the standard unit of Doesn&#8217;t Suck (DSU) as multiples of 100 HTTP requests/second capable of being served over Ethernet by a <a href="https://github.com/dw/acid/tree/master/demo/cheeseboard/">perfectly conventional looking CPython 2.7 transactional database/web application</a>Â running on an 800Mhz Raspberry Pi. As of a few weeks ago Acid was somewhere around 1.46 DSUs, however recent changes have pushed it back to 0.6-0.8.</p>
<hr><p>Since the last post I&#8217;ve more or less been working full-time on trying to bring Acid into a functional state. It&#8217;s beginning to look like I&#8217;m not going to get everything I want completed before the dawn of 2014, since reality is beckoning, and in the coming weeks I must focus on picking up contract work, so it is going on the back-burner yet again.</p>
<p>Despite that, what I have is starting to feel useful and increasingly solid. For testing I&#8217;ve moved from random data to something more practical, focusing on a real database of <a href="https://mega.co.nz/#F!VxoGVCKJ!ZKmwSR4VU3sXBxibGBvtRg">15.5 million Reddit comments</a> scraped over a 15 day period at the end of August. Importing this dump using the (incomplete) <a href="https://github.com/dw/acid/tree/master/demo/redcache/">redcache demo</a> produces a 41 million entry 5.4GiB <a href="http://symas.com/mdb/">LMDB database</a>, containing Comment, Link, User, and Subreddit records (presently encoded as JSON) along with a plethora of secondary indices.</p>
<p>Despite its unoptimized state, performance is already quite reasonable: an index scan from this database, including the index range scan itself, and one random lookup and full JSON decode for each target record value, already yields &gt;55k records/sec on a single Core i7 thread, while key-only index scans yield over 750k keys/sec.</p>
<p>The itertools abuse mess from the previous post <a href="https://github.com/dw/acid/commit/f53dde2993b1fe5866749fc4092d590d24339b2f">was cleaned up</a>, with the core iterator logic now expressed as two easily maintained <a href="https://github.com/dw/acid/blob/master/acid/iterators.py#L27">Python classes</a>, although more work is needed. The new implementation is testable, defers the aforementioned bytestring/tuple domain dilemma to Key/KeyList classes, and is modular enough to be replaced with C code when the time comes (which itself promises at least a doubling in throughput).</p>
<p>The unintentional topic of the previous post, immediate decoding of key tuples, has all but been addressed. Acid now includes a <a href="http://acid.readthedocs.org/en/latest/core.html#acid.keylib.Key">Key type</a>Â that behaves just like a tuple, except in the C implementation elements are lazily decoded as __getitem__ is invoked, and comparisons occur uniformly in the bytestring domain. The remaining work is to finish KeyList, a bigger brother to Key which will repeat the lazy decode process except for sequences of keys. This is used to realize index entries and batch keys.</p>
<p>I intend to massage the redcache demo into some lightweight clone of the Reddit site, since while not a perfect demonstration, the hierarchical layout of a thread is particularly amenable to clustering and range scans, and the localized redundancy of context-specific discussion compresses well. This makes a reasonable example of how Acid&#8217;s batch compression could be applied in a real world application: scanning any sub-thread requires a minimal set of decompressions, so throughput remains impressive, while realizing a 3-5x storage (i.e. RAM) savings over a traditional DBMS.</p>
<p>A better demonstration of the benefits of compression requires a dataset with even more redundancy: system logs and financial time series both demonstrate these traits, but getting hold of a reasonable chunk of free, public data in either domain is much more difficult.</p>
<hr><p>Now that the scene is set, finally memory sharing can be described. It&#8217;s worth repeating why such an interface is useful to begin with: the primary storage engine Acid is being designed for, <a href="http://symas.com/mdb/">LMDB</a>, is implemented as a read-only memory mapping exposed directly to consumer code, such that performing a lookup or a scan requires zero copies. Complementing this, <a href="http://lmdb.readthedocs.org/">py-lmdb</a>Â has been designed from scratch to ensure these properties are preserved even from within Python code.</p>
<p>One fabulous trait of LMDB is that all pointers returned to the user are guaranteed to remain stable until the end of a read transaction, or within a write transaction until the next mutation occurs. This means that given the right primitives surrounding LMDB, it need never be necessary to explicitly copy data while performing lookups or scans. This is interesting since from within CPython using py-lmdb, random lookup rates exceeding 1 million keys/sec are possible along with scan rates exceeding 11 millions keys/sec (assuming a hot-cached database, of course).</p>
<p>To save time and space, it is enough to say that the C implementation of Key, KeyList (and eventually Struct) optionally manage their own buffer, but what they really want to do is *borrow* that buffer until they are forced to copy it, since the original bytes are already sitting there in memory up for grabs. With lazy decoding, borrowed buffers and a set of freelists for Key, KeyList, and <a href="https://github.com/dw/acid/issues/41">Struct</a>, joins, range scans and lookups could be translated into little more than pointer manipulation.</p>
<p>Given today&#8217;s index scan rate of 750k keys/second, already providing powerful query tools such as <a href="http://en.wikipedia.org/wiki/Hash_join">hash joins</a>Â look possible, but with the promise of at least a further doubling of this rate I&#8217;m certain large joins will be practical on a per-request basis directly from Python code.</p>
<p>The problem with exposing raw pointers in Python is the single abstraction available for them, the <a href="http://docs.python.org/2/library/functions.html#buffer">buffer interface</a>, is simultaneously too liberating and too restrictive. On the one hand a freestanding buffer object may be created, whose lifetime is uncontrolled and unobservable. On the other hand using the &#8220;locking buffers&#8221; interface, the ability for the producer object to change state in any way is utterly prohibited while any buffer exists.</p>
<p>Using the standard buffer interface, a choice must be made between requiring the developer to *know* (as if we ever do) not to modify or abort a transaction while holding any live object dependent on a buffer, or use the locking interface and cause the developer deep surprise and indignation to discover s/he *can&#8217;t abort or write to the database* since somewhere in memory is a live reference to a locked buffer, and s/he hasn&#8217;t a clue where it is.</p>
<p>Even if the standard interface could somehow communicate lifetimes, more problems rear their heads: for each bytestring yielded from LMDB, a 90ish byte heap allocated buffer object needs to exist, simply to contain a 16 byte (ptr, length) pair, for yet another type (our Key, KeyList and Struct) to indirectly point into them. Finally we&#8217;re not just interested in exposing crash/corruption-safe buffers, the result should also be &#8220;pythonic&#8221; (ugh) in that memory management, including the sudden disappearence of a buffer, should be made transparent to the user.</p>
<p>What we really want is some kind of &#8220;reverse buffer protocol&#8221;, one where instead of the consumers informing the producer when it is okay to die, the producer informs consumers of their imminent demise. This way distinct C object implementations could secretly conspire to manage buffers on the developer&#8217;s behalf, meanwhile the developer remaining innocent to the duplicitous schemes of the seemingly innocent Python objects s/he is freely manipulating.</p>
<p>Of course using some custom package-internal type these affairs could managed privately, but the consumer of the buffer is Acid, and the producer of the buffer is py-lmdb. Even if we make both packages depend on a third library providing some magical new UberBuffer type, the utterly abhorrent (IMHO) <em>type leakage</em>Â occurs, since now any consumer of py-lmdb might possibly be forced or encouraged to consume some custom type designed only for internal use by the C implementation.</p>
<p>Ideally py-lmdb and Acid could communicate somehow, and in such a way as no novel types are introduced, thus preventing further downstream pollution (I wish more people would understand this while designing libraries!). Since almost the entirety of the Python C-API and its dependents support buffer objects anywhere a string is accepted, ideally the buffer object interface to py-lmdb should be preserved, since it already has excellent compatibility with the existing ecosystem, and ideally communication of buffer lifetimes need not involve a separate heap allocation for every buffer shared (using an object that in all likelihood is double or more the size of the string being shared).</p>
<p>Enter the <a href="http://github.com/dw/memsink/">MemSink protocol</a>Â (<a href="https://github.com/dw/acid/issues/23">described here</a>).</p>
<p>This is basically where I&#8217;m at today, and I hate it, even though it ticks the boxes: buffers are transported across the Python interface as a pair of (plain old buffer object, <em>source object</em>), where &#8220;source object&#8221; is any type (in this case a py-lmdb Transaction object) that sports a magical __memsource__ class attribute. That attribute contains a PyCapsule wrapping a struct that describes the location of a doubly-linked list head in the source object&#8217;s PyObject.</p>
<p>When a C type (in this case Key.from_raw(buf, source)) receives one of these pairs, it asks the memsink module&#8217;s C API to hook it up to the source&#8217; notification list. The memsink module in turn looks up a __memsink__ class attribute on the consumer type, which describes the location of a doubly-linked list node in the sink&#8217;s PyObject structure along with a (C) invalidation callback function.</p>
<p>The memsink C implementation then stiches the sink object onto the source&#8217;s invalidation list. Now if the sink dies first, it asks the memsink module to unlink it. If the source wants to die first (e.g. due to transaction commit or mutation), the memsink module instead walks the source&#8217;s invalidation list, invoking the C invalidation callback for each sink. In the case of Key, KeyList, and Struct, the invalidation callback will attempt to copy the borrowed buffer into their own PyObject, or if it won&#8217;t fit, allocate a new heap buffer and copy it there instead.</p>
<p>This way within a transaction, no memory copies occur, large scans and joins are as close to free as they&#8217;ll ever be, and if the user decides to keep a huge list of dependent objects around while terminating the transaction, those objects will transparently be preserved after the transaction ends.</p>
<p>Key and <a href="http://lmdb.readthedocs.org/">py-lmdb</a>Â are the first entities to get an experimental implementation of this protocol, disabled when the memsink module isn&#8217;t installed. Basically it sucks and I hate it, not least because some intermediary Python code needs to introduce the producer to the consumer, but yet again I&#8217;ve run out of time to explain all the problems with this scheme, just that so far it&#8217;s the best one I&#8217;ve got.</p>
<p><em>[To be continued]</em></p>
<hr><p><em>Comments on a postcard to <a href="http://twitter.com/edeadlk">@edeadlk</a>. </em></p></div>
                                    
                                </section>
                            

                            
                            
                            

                            
                            
                            
                            
                            
                            
                            

                            
                            
                            

                            <ul class="
                                post_info
                                
                                     floating
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                
                            ">
                                <li><a href="http://pythonsweetness.tumblr.com/post/62321291712/thoughts-on-a-better-memory-abstraction-for-python-2" class="
                                    timestamp
                                    has_caption with_title
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                ">September 26, 2013 (6:18 am)</a></li>

                                
                                    
                                

                                
                                    
                                
                                </ul>
                                

                                
                                

                                </section>
                    </li>

                
                <!-- END POSTS -->
            </ul>
            
            

            <footer id="footer">
                
                
            </footer>
        </section>

        


<!-- Piwik -->
<script type="text/javascript">
  var _paq = _paq || [];
  _paq.push(["trackPageView"]);
  _paq.push(["enableLinkTracking"]);

  (function() {
    var u=(("https:" == document.location.protocol) ? "https" : "http") + "://k1.botanicus.net/piwik/";
    _paq.push(["setTrackerUrl", u+"piwik.php"]);
    _paq.push(["setSiteId", "3"]);
    var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
    g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Piwik Code -->


    

<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/highlight.min.js"></script>
 <script>
  hljs.tabReplace = '    ';
  hljs.initHighlightingOnLoad();
  </script>

<script src="//static.getclicky.com/js" type="text/javascript"></script>
<script type="text/javascript">try{ clicky.init(100590008); }catch(e){}</script>
    <!-- BEGIN TUMBLR CODE -->
        
    
        <iframe id="tumblr_controls" width="1" height="1" frameborder="0" scrolling="no" style="position:absolute; z-index:2147483647; top:0; right:0; border:0; background-color:transparent; overflow:hidden; " src="http://assets.tumblr.com/assets/html/iframe/o.html?_v=0f8339d83792f50916ca29c1a64ddfa0#src=http%3A%2F%2Fpythonsweetness.tumblr.com%2Fpost%2F62321291712%2Fthoughts-on-a-better-memory-abstraction-for-python-2&amp;pid=62321291712&amp;rk=aNSrdFzz&amp;lang=en_US&amp;name=pythonsweetness&amp;brag=false&amp;avatar=http%3A%2F%2Fassets.tumblr.com%2Fimages%2Fdefault_avatar_64.png&amp;title=python+sweetness&amp;url=http%3A%2F%2Fpythonsweetness.tumblr.com%2F&amp;page_slide=slide"></iframe>    <div id="teaser_iframe_container" style="display:none;"><iframe scrolling="no" frameborder="0" src="http://www.tumblr.com/assets/html/iframe/teaser.html#src=http%3A%2F%2Fpythonsweetness.tumblr.com%2Fpost%2F62321291712%2Fthoughts-on-a-better-memory-abstraction-for-python-2&amp;pid=62321291712&amp;rk=aNSrdFzz&amp;lang=en_US&amp;name=pythonsweetness&amp;brag=false&amp;avatar=http%3A%2F%2Fassets.tumblr.com%2Fimages%2Fdefault_avatar_64.png&amp;title=python+sweetness&amp;url=http%3A%2F%2Fpythonsweetness.tumblr.com%2F&amp;page_slide=slide" id="teaser_iframe" width="1" height="1"></iframe></div>

<script type="text/javascript">
    (function(Tumblr){
        var follow_iframe_initialized = false;
        if (Tumblr.FollowTeaser && Tumblr.PostMessageListener) {
            // Don't do anything until the first initialize event
            Tumblr.PostMessageListener.initialize(function(message, origin) {
                if (follow_iframe_initialized || message.length < 2) return;

                if (message[0] === 'follow_iframe' && message[1] === 'enable') {
                    Tumblr.FollowTeaser.current_page = 1;
                    Tumblr.FollowTeaser.infer_infinite_scroll = true;
                    Tumblr.FollowTeaser.create_from_tumblr_controls('http://assets.tumblr.com/assets/html/iframe/follow.html?_v=0a154d6dc1bbb72ed95291d64cf96d0e');
                    Tumblr.FollowTeaser.scroll_listener(true);
                    follow_iframe_initialized = true;
                }
            });
        }
    })(this.Tumblr || (this.Tumblr = {}));
</script>
    
    <!--[if IE]><script type="text/javascript">document.getElementById('tumblr_controls').allowTransparency=true;</script><![endif]-->
    
        
<iframe src="http://assets.tumblr.com/analytics.html?63fae489732da54993e4a941e42dcf5e" scrolling="no" width="1" height="1" frameborder="0" style="background-color:transparent; overflow:hidden; position:absolute; top:0; left:0 z-index:9999;" id="ga_target"></iframe>

    <script>
        var COMSCORE = true;
        window.setTimeout(function() {
            var analytics_frame = document.getElementById('ga_target');
            analytics_frame.contentWindow.postMessage('enable_comscore;' + window.location, analytics_frame.src.split('/analytics.html')[0]);
        }, 1000);
    </script>



    <script type="text/javascript">
      var _qevents = _qevents || [];

      (function() {
       var elem = document.createElement('script');

       elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
       elem.async = true;
       elem.type = "text/javascript";
       var scpt = document.getElementsByTagName('script')[0];
       scpt.parentNode.insertBefore(elem, scpt);
      })();
    </script>
    <script type="text/javascript">
        _qevents.push( { qacct: 'p-19UtqE8ngoZbM' } );
    </script>
    <noscript>
        <div style="display: none;"><img src="//pixel.quantserve.com/pixel/'p-19UtqE8ngoZbM'.gif" height="1" width="1" alt="Quantcast"/></div>
    </noscript>


    <script type="text/javascript">!function(s){s.src='http://www.tumblr.com/impixu?T=1380681901&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvcHl0aG9uc3dlZXRuZXNzLnR1bWJsci5jb21cL3Bvc3RcLzYyMzIxMjkxNzEyXC90aG91Z2h0cy1vbi1hLWJldHRlci1tZW1vcnktYWJzdHJhY3Rpb24tZm9yLXB5dGhvbi0yIiwicmVxdHlwZSI6MCwicm91dGUiOiJcL3Bvc3RcLzppZFwvOnN1bW1hcnkifQ==&U=BEFNBDHJIM&K=7e1b784c9199f17e41a25c9c239b5c168dcd8b9aad380b221086dd4135144db7&R='.replace(/&R=[^&$]*/,'').concat('&R='+escape(document.referrer)).slice(0,2000).replace(/%.?.?$/,'');}(new Image());</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="http://www.tumblr.com/impixu?T=1380681901&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvcHl0aG9uc3dlZXRuZXNzLnR1bWJsci5jb21cL3Bvc3RcLzYyMzIxMjkxNzEyXC90aG91Z2h0cy1vbi1hLWJldHRlci1tZW1vcnktYWJzdHJhY3Rpb24tZm9yLXB5dGhvbi0yIiwicmVxdHlwZSI6MCwicm91dGUiOiJcL3Bvc3RcLzppZFwvOnN1bW1hcnkiLCJub3NjcmlwdCI6MX0=&U=BEFNBDHJIM&K=dcbc401b341284e03de66ded31f77543b920fd62c8cc0f7e1bf8739b8e6f1c77&R="></noscript><script type="text/javascript">!function(s){s.src='http://www.tumblr.com/impixu?T=1380681901&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL3B5dGhvbnN3ZWV0bmVzcy50dW1ibHIuY29tXC9wb3N0XC82MjMyMTI5MTcxMlwvdGhvdWdodHMtb24tYS1iZXR0ZXItbWVtb3J5LWFic3RyYWN0aW9uLWZvci1weXRob24tMiIsInJlcXR5cGUiOjAsInJvdXRlIjoiXC9wb3N0XC86aWRcLzpzdW1tYXJ5IiwicG9zdHMiOlt7InBvc3RpZCI6NjIzMjEyOTE3MTIsImJsb2dpZCI6Ijk3ODkzOTczIiwic291cmNlIjozM31dfQ==&U=CDGJOJLMIE&K=21c5991485a2bb1187eee244da0a583d014a53397d466b1ffe1ea3258aa79fc8&R='.replace(/&R=[^&$]*/,'').concat('&R='+escape(document.referrer)).slice(0,2000).replace(/%.?.?$/,'');}(new Image());</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="http://www.tumblr.com/impixu?T=1380681901&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL3B5dGhvbnN3ZWV0bmVzcy50dW1ibHIuY29tXC9wb3N0XC82MjMyMTI5MTcxMlwvdGhvdWdodHMtb24tYS1iZXR0ZXItbWVtb3J5LWFic3RyYWN0aW9uLWZvci1weXRob24tMiIsInJlcXR5cGUiOjAsInJvdXRlIjoiXC9wb3N0XC86aWRcLzpzdW1tYXJ5IiwicG9zdHMiOlt7InBvc3RpZCI6NjIzMjEyOTE3MTIsImJsb2dpZCI6Ijk3ODkzOTczIiwic291cmNlIjozM31dLCJub3NjcmlwdCI6MX0=&U=CDGJOJLMIE&K=10027458c393baef08d1a17436fcf26617275f63cd8dd3f2f646f44daf1a4857&R="></noscript><!-- END TUMBLR CODE -->
</body>
</html>