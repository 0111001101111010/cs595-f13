



<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>
    Understanding Threads in Python -  Agiliq Blog | Django web app development 
</title>
<link rel="stylesheet" href="/static/CACHE/css/8953dd35a5b8.css" type="text/css" />
<link href='http://fonts.googleapis.com/css?family=Droid+Serif:regular,bold&subset=latin' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Lobster' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Molengo&subset=latin' rel='stylesheet' type='text/css'>


    <link rel="alternate" type="application/rss+xml" title="The Agiliq Blog - Django Web Development RSS Feed" href="/blog/rss/latest/" />


    <link rel="canonical" href='http://agiliq.com/blog/2013/09/understanding-threads-in-python/?utm_content=bufferf0f2d&amp;utm_source=buffer&amp;utm_medium=twitter&amp;utm_campaign=Buffer' />


<link rel="pingback" href="http://agiliq.com/blog/xmlrpc/" />

</head>
<body onload="pretty_print()">
<!--BASE CONTAINER STARTS-->
<div id="mainpage_bg">
  <!--PAGE CONTAINER STARTS-->
  <div id="page_container">
    <!-- HEADER STARTS HERE -->
    <div id="header">
      <a href="/">
        <img src="/static/blogango/images/agiliq_blog_logo.png" width="206" height="67" alt="Agiliq Solutions" />
      </a>
      <h2 class="message">
        We are a small, intelligent App development studio. We love "Building Amazing Apps", solving problems and cultivating strong relationships with our clients.
      </h2>
    </div>
    <!-- HEADER ENDS HERE -->
    <!-- BREADCRUMBS STARTS HERE -->
    <div id="breadcrumbs">
      <ul id="crumbs">
        <li><a href="/" rel="nofollow">Home</a></li>
        
    <li><a href="/blog/" rel="nofollow">Blog</a></li>
    <li><a href="/blog/archive/2013/sep/" rel="nofollow"> Sept. 2013</a></li>
	<li>Understanding Threads in Python</li>

      </ul>
    </div>
    <!-- BREADCRUMBS STARTS HERE -->
    <!-- CONTENT BLOCK STARTS HERE -->
    <div id="content_block">
      <div class="leftpanel">
        


    



<article itemscope itemtype="http://schema.org/BlogPosting">
<div class="comment_block">
  <div class="left_panel">
    <div class="frame_bg">
        
          
            <img src="/media/cache/bd/c7/bdc71d46e22e948d42cbeea1e29cabae.png" height="72" alt="akshar" />
          
        
    </div>
    <div class="italics">
      <a href='/blog/archive/2013/sep/'>
        17th Sept., 2013
      </a>
    </div>

    <div class="comment_bg"><a href="/blog/2013/09/understanding-threads-in-python/#comments">4</a></div>
    <div class="italics">Comments</div>
    
    
      <div class="addthis">

     <!-- AddThis Button BEGIN -->
    <div class="addthis_toolbox addthis_floating_style addthis_counter_style" style="left:50px;top:50px;">
    <a class="addthis_button_facebook_like" fb:like:layout="box_count"></a>
    <a class="addthis_button_tweet" tw:count="vertical"></a>
    <a class="addthis_button_google_plusone" g:plusone:size="tall"></a>
    <a class="addthis_counter"></a>
    </div>
    <script type="text/javascript" src="http://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-50b359cc38629101"></script>
    <!-- AddThis Button END -->

</div>

    
  </div>

  <div class="right_panel">
    <a href="/blog/2013/09/understanding-threads-in-python/" class='noline'><h1 class="post_title" itemprop="headline">Understanding Threads in Python</h1></a>
    <h6 class="posted_by">By : <a href="/blog/author/akshar/">Akshar Raaj</a></h6>
    
      <p><p>We will see some examples of using threads in Python and how to avoid race conditions:</p>
<p>You should run each example several times to notice that threads are unpredictable and that your results differ every time.</p>
<p>Disclaimer: Forget anything you heard about GIL for now, because GIL is not going to mess up with scenarios I want to show.</p>
<h3>Example 1:</h3>
<p>We want to fetch five different urls:</p>
<h4>Single threaded way:</h4>
<pre><code>def get_responses():
    urls = ['http://www.google.com', 'http://www.amazon.com', 'http://www.ebay.com', 'http://www.alibaba.com', 'http://www.reddit.com']
    start = time.time()
    for url in urls:
        print url
        resp = urllib2.urlopen(url)
        print resp.getcode()
    print "Elapsed time: %s" % (time.time()-start)

get_response()
</code></pre>
<p>Output is:</p>
<pre><code>http://www.google.com 200
http://www.amazon.com 200
http://www.ebay.com 200
http://www.alibaba.com 200
http://www.reddit.com 200
Elapsed time: 3.0814409256
</code></pre>
<h5>Explanation:</h5>
<ul>
<li>All the urls are fetched in sequence.</li>
<li>Unless the processor got response from a url, it didn't fetch the next url.</li>
<li>Network operations are time taking, so processor was idle during the time it was expecting the response from a url.</li>
</ul>
<p>Even in a single threaded program, there is one thread of execution. Let's call it <strong>main thread</strong>. So, last example had only one thread, i.e main thread.</p>
<h4>Multi threaded way:</h4>
<p>You need to create a class which subclasses Thread:</p>
<pre><code>from threading import Thread

class GetUrlThread(Thread):
    def __init__(self, url):
        self.url = url 
        super(GetUrlThread, self).__init__()

    def run(self):
        resp = urllib2.urlopen(self.url)
        print self.url, resp.getcode()

def get_responses():
    urls = ['http://www.google.com', 'http://www.amazon.com', 'http://www.ebay.com', 'http://www.alibaba.com', 'http://www.reddit.com']
    start = time.time()
    threads = []
    for url in urls:
        t = GetUrlThread(url)
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    print "Elapsed time: %s" % (time.time()-start)

get_responses()
</code></pre>
<p>Output is:</p>
<pre><code>http://www.reddit.com 200
http://www.google.com 200
http://www.amazon.com 200
http://www.alibaba.com 200
http://www.ebay.com 200
Elapsed time: 0.689890861511
</code></pre>
<h5>Explanation:</h5>
<ul>
<li>Appreciate the improvement in running time of this program.</li>
<li>We wrote a multi threaded program to decrease processor's idle time. While waiting for response of a particular thread's url, processor can work on some other thread and fetch the other thread's url.</li>
<li>We wanted one thread to act on one url, so overridden the constructor of thread class to pass it a url.</li>
<li>Execution of a thread means execution of a thread's <strong>run()</strong>.</li>
<li>So, whatever we want the thread to do must go in its <strong>run()</strong>.</li>
<li>Created one thread for each url and called <strong>start()</strong> on it. This tells the processor that it can execute the particular thread i.e the <strong>run()</strong> of thread.</li>
<li>We don't want the elapsed time to be evaluated until all the threads have executed, <strong>join()</strong> comes in picture here.</li>
<li>Calling <strong>join()</strong> on a thread tells the <strong>main thread</strong> to wait for this particular thread to finish before the main thread can execute the next instruction.</li>
<li>We call join() on all the threads, so elapsed time will be printed only after all the threads have run.</li>
</ul>
<h5>Few things about threads</h5>
<ul>
<li>Processor might not execute run() of a thread immediately after <strong>start()</strong>.</li>
<li>You can't say in which order run() of different threads will be called.</li>
<li>For a specific thread, it's guaranteed that the statements inside run() will be executed sequentially.</li>
<li>It means that first the the url associated with the thread will be fetched and only then the recieved response will be printed.</li>
</ul>
<h3>Example 2:</h3>
<p>We will demonstrate race condition with a program and then fix it:</p>
<p>Read <a href="http://en.wikipedia.org/wiki/Race_condition#Example">wikipedia example</a> to understand what race condition means.</p>
<pre><code>#define a global variable
some_var = 0

class IncrementThread(Thread):
    def run(self):
        #we want to read a global variable
        #and then increment it
        global some_var
        read_value = some_var
        print "some_var in %s is %d" % (self.name, read_value)
        some_var = read_value + 1 
        print "some_var in %s after increment is %d" % (self.name, some_var)

def use_increment_thread():
    threads = []
    for i in range(50):
        t = IncrementThread()
        threads.append(t)
        t.start()
    for t in threads:
        t.join()
    print "After 50 modifications, some_var should have become 50"
    print "After 50 modifications, some_var is %d" % (some_var,)

use_increment_thread()
</code></pre>
<p>Run this and you will find different result every time.</p>
<h5>Explanation:</h5>
<ul>
<li>There is a global variable and all the threads will modify it.</li>
<li>All threads should add 1 to the existing value of the variable.</li>
<li>There are 50 threads, so at end the value of some_var should become 50, but it doesn't.</li>
</ul>
<h5>Why some_var didn't reach 50?</h5>
<ul>
<li>At some point thread <strong>t1</strong> read the value of some_var as 15 and then processor took the control from this thread and gave it to thread <strong>t2</strong>.</li>
<li>t2 also reads some_var as 15.</li>
<li>Both t1 and t2 reset the value of some_var to <strong>15+1</strong> i.e 16.</li>
<li>But when two threads act on some_var we expected it's value to be increased by 2.</li>
<li>So, we have a race condition here.</li>
<li>A similar race condition might have occurred few more times and so value of <strong>some_var</strong> at end remains something like 41 or 42 or anything less than 50.</li>
</ul>
<h4>Fix this race condition</h4>
<p>Change the <strong>run()</strong> of IncrementThread to:</p>
<pre><code>from threading import Lock
lock = Lock()

class IncrementThread(Thread):
    def run(self):
        #we want to read a global variable
        #and then increment it
        global some_var
        lock.acquire()
        read_value = some_var
        print "some_var in %s is %d" % (self.name, read_value)
        some_var = read_value + 1
        print "some_var in %s after increment is %d" % (self.name, some_var)
        lock.release()
</code></pre>
<p>You should run use_increment_thread again and the result will match your expectation.</p>
<h5>Explanation:</h5>
<ul>
<li>Lock is used to guard against race condition.</li>
<li>If thread t1 has acquired the lock before performing a set of operations, no other thread can perform the same set of operation until t1 releases the lock.</li>
<li>We want to make sure that once t1 has read some_var, no other thread can read some_var until t1 is done with modifying the value of some_var.</li>
<li>So reading some_var and modifying it are logically related operations here.</li>
<li>And that is why we keep read and modify part of some_var guarded by a Lock instance.</li>
<li>Lock is a separate object and it will be acquired by the thread from whose context it is called.</li>
</ul>
<h3>Example 3</h3>
<p>In last example we saw how a global variable gets affected in multithreading. Let's see an example to verify that one thread cannot affect the instance variable of some other thread.</p>
<p>Let's introduce <strong>time.sleep()</strong> in this example. It will make sure that a thread goes in suspended state and hence enforces thread switching to occur.</p>
<pre><code>import time

class CreateListThread(Thread):
    def run(self):
        self.entries = []
        for i in range(10):
            time.sleep(1)
            self.entries.append(i)
        print self.entries

def use_create_list_thread():
    for i in range(3):
        t = CreateListThread()
        t.start()

use_create_list_thread()
</code></pre>
<p>Run it few times and you will notice that the list do not get printed properly.</p>
<p>Possibly the entries of one thread was getting printed and during this operation, processor switched to some other thread and started printing the entries for other thread. We want to ensure that entries get printed one after another for separate threads.</p>
<p>Change run() of CreateListThread to use lock.</p>
<pre><code>class CreateListThread(Thread):
    def run(self):
        self.entries = []
        for i in range(10):
            time.sleep(1)
            self.entries.append(i)
        lock.acquire()
        print self.entries
        lock.release()
</code></pre>
<p>So, we put the print operation inside a lock. When one thread has acquired the lock and printing its <strong>entries</strong>, no other thread can print its entries. And so you will see entries of different threads printed on separate lines.</p>
<p>This will show that all threads' <strong>entries</strong>, which is an instance variable, is a list with numbers from 0 to 9. So, thread switching doesn't affect the instance variable of a thread.</p></p>

    
    
      <h4>Related Posts</h4>
      <ul>

      
          <li>
              <a href="/blog/2013/07/basics-wsgi/">Basics of WSGI</a>
          </li>
      
          <li>
              <a href="/blog/2013/07/accept-bitcoins-using-python/">Accept bitcoins using python</a>
          </li>
      
          <li>
              <a href="/blog/2013/08/writing-thread-safe-django-code/">Writing thread-safe django - get_or_create</a>
          </li>
      
          <li>
              <a href="/blog/2013/09/process-and-threads-for-beginners/">Process and Threads for Beginners</a>
          </li>
      
      </ul>
    

      <hr />
      <p>Can we help you build amazing apps? <a href="/contactus">Contact us today.</a>
    
    
    <div class="topics">
    
      Topics : 
      <a href="/blog/tag/python/">python</a>
    
      
      <a href="/blog/tag/threads/">threads</a>
    
    </div>
  </div>
</div>
</article>





<!--COMMENT BLOCK STARTS-->
<h2 style="clear:both;">Comments</h2>

    <a name="comment-241489">
    <div id="comments" class="commentor_block">
	    <div class="leftnpanel">
	        <span class="commentor">
	           
	               <a href='http://milocast.com/' rel='nofollow' target='_blank'>Shawn Milochik</a>
	           
	        </span>
            <span class="postdate">
                <a href="#comment-241489">19th Sept., 2013</a>
            </span><br/>
	        <div class="comment_post">
	            <p><p>Thanks for the great introduction. It was very easy to follow.</p></p>
	        </div>
	    </div>
	    <div class="rightnpanel">
	        <img src="http://www.gravatar.com/avatar/84b86f7e739f0826554499cef9e5862b?default=http%3A%2F%2Fwww.gravatar.com%2Favatar&size=50" width="50" height="50" alt="commmenttor" class="picborder"/>
	    </div>
	    <div class="clear"></div>
    </div>

    <a name="comment-244293">
    <div id="comments" class="commentor_block">
	    <div class="leftnpanel">
	        <span class="commentor">
	           
	               Kiss György
	           
	        </span>
            <span class="postdate">
                <a href="#comment-244293">22nd Sept., 2013</a>
            </span><br/>
	        <div class="comment_post">
	            <p><p>Nice article, thanks!</p></p>
	        </div>
	    </div>
	    <div class="rightnpanel">
	        <img src="http://www.gravatar.com/avatar/af6bdd9a160b093348ce9c09b84babdc?default=http%3A%2F%2Fwww.gravatar.com%2Favatar&size=50" width="50" height="50" alt="commmenttor" class="picborder"/>
	    </div>
	    <div class="clear"></div>
    </div>

    <a name="comment-246445">
    <div id="comments" class="commentor_block">
	    <div class="leftnpanel">
	        <span class="commentor">
	           
	               Ilias
	           
	        </span>
            <span class="postdate">
                <a href="#comment-246445">24th Sept., 2013</a>
            </span><br/>
	        <div class="comment_post">
	            <p><p>I think you have a bug on your last example. This is what works for me synchronizing the threads:</p>

<p>lock=Lock()<br />class CreateListThread(Thread):<br />    def run(self):<br />        global lock<br />        self.entries = []<br />        for i in range(10):<br />            time.sleep(.01)<br />            self.entries.append(i)<br />        lock.acquire()<br />        print self.entries<br />        lock.release()<br /></p></p>
	        </div>
	    </div>
	    <div class="rightnpanel">
	        <img src="http://www.gravatar.com/avatar/d449e7991a78763eb75c038a780177f0?default=http%3A%2F%2Fwww.gravatar.com%2Favatar&size=50" width="50" height="50" alt="commmenttor" class="picborder"/>
	    </div>
	    <div class="clear"></div>
    </div>

    <a name="comment-249872">
    <div id="comments" class="commentor_block">
	    <div class="leftnpanel">
	        <span class="commentor">
	           
	               Akshar Raaj
	           
	        </span>
            <span class="postdate">
                <a href="#comment-249872">28th Sept., 2013</a>
            </span><br/>
	        <div class="comment_post">
	            <p><p>@Ilias:<br />Can you be more specific about the bug, the example works fine for me.</p></p>
	        </div>
	    </div>
	    <div class="rightnpanel">
	        <img src="http://www.gravatar.com/avatar/5615eeafa1531a66275f74bd0ebb7ef7?default=http%3A%2F%2Fwww.gravatar.com%2Favatar&size=50" width="50" height="50" alt="commmenttor" class="picborder"/>
	    </div>
	    <div class="clear"></div>
    </div>

<!--COMMENT BLOCK ENDS-->

<div class="clear"></div>


<!--  Ping Backs starts -->



    
        <div class="comment_block">
            <span class="commentor">
                <!-- <a name='pingback-129' href='/blog/2013/09/understanding-threads-in-python/#pingback-129'>permalink</a>  -->
            </span>
            <span class="postdate">20th Sept., 2013, pingback from <a href="http://www.scoop.it/t/python-es/p/4007942773/understanding-threads-in-python-agiliq-blog-django-web-app-development" rel="nofollow">http://www.scoop.it/t/python-es/p/400...</a></span>
            <div class="comment_post"></div>
        </div>
    
        <div class="comment_block">
            <span class="commentor">
                <!-- <a name='pingback-128' href='/blog/2013/09/understanding-threads-in-python/#pingback-128'>permalink</a>  -->
            </span>
            <span class="postdate">20th Sept., 2013, pingback from <a href="http://www.scoop.it/t/opexxx/p/4007937475/understanding-threads-in-python-agiliq-blog-django-web-app-development" rel="nofollow">http://www.scoop.it/t/opexxx/p/400793...</a></span>
            <div class="comment_post"></div>
        </div>
    

<!--  Ping Backs ends -->

<!--COMMENT FORM BLOCK STARTS-->
<div class="general_block">
    
        <form action="." method="post">
            <input type='hidden' name='csrfmiddlewaretoken' value='HSVC993mMfNzObg9iV2DFzkQK71qHRG2' />
            <fieldset>
                <legend>Post a comment</legend>
                Name : <br/> <input class="textfield" id="id_name" maxlength="100" name="name" type="text" /> <br/>
	            Email :  <br/> <input class="textfield" id="id_email" name="email" type="text" /> <br/>
	            Your site url:  <br/> <input class="textfield" id="id_url" name="url" type="text" /> <br/>
                Comment :  <br/> <textarea class="textarea" cols="40" id="id_text" name="text" rows="10">
</textarea> <br/>
                <input name="button" type="submit"  id="button" value="Comment"  class="but_right"/>
	        </fieldset>
	    </form>
    
</div>
<!--COMMENT FORM BLOCK ENDS-->


      </div>
      <div class="rightpanel">
        
        <div id="blogposts_block">
          <div class="block_title">Recent Articles</div>
          <ul class="list">
            
                <li><a href="/blog/2013/09/understanding-threads-in-python/" title='Understanding Threads in Python'>Understanding Threads in Python</a></li>
            
                <li><a href="/blog/2013/09/process-and-threads-for-beginners/" title='Process and Threads for Beginners'>Process and Threads for Beginners</a></li>
            
                <li><a href="/blog/2013/08/minimal-nginx-and-gunicorn-configuration-for-djang/" title='Minimal Nginx and Gunicorn configuration for Django projects'>Minimal Nginx and Gunicorn configuration for Django projects</a></li>
            
                <li><a href="/blog/2013/08/writing-thread-safe-django-code/" title='Writing thread-safe django - get_or_create'>Writing thread-safe django - get_or_create</a></li>
            
                <li><a href="/blog/2013/07/accept-bitcoins-using-python/" title='Accept bitcoins using python'>Accept bitcoins using python</a></li>
            
                <li><a href="/blog/2013/07/basics-wsgi/" title='Basics of WSGI'>Basics of WSGI</a></li>
            
                <li><a href="/blog/2013/06/self-testing-fabfile-using-docker/" title='Self-testing fabfile using docker'>Self-testing fabfile using docker</a></li>
            
                <li><a href="/blog/2013/06/deploying-django-using-docker/" title='Deploying django using docker'>Deploying django using docker</a></li>
            
                <li><a href="/blog/2013/04/common-testing-scenarios-for-django-app/" title='Common testing scenarios for Django app.'>Common testing scenarios for Django app.</a></li>
            
                <li><a href="/blog/2013/03/logging-in-django/" title='Logging in Django'>Logging in Django</a></li>
            
          </ul>
        </div>
        
        
        <!--BLOGROLL STARTS HERE-->
        <div id="archives_block">
          <div class="block_title">About Agiliq</div>
          <ul class="list_left">
            
                <li><a href="http://agiliq.com/" rel="nofollow">Agiliq - Building Amazing Apps</a></li>
            
                <li><a href="https://github.com/agiliq" rel="nofollow">Our Open Source Code</a></li>
            
                <li><a href="http://agiliq.com/contactus" rel="nofollow">Contact Us</a></li>
            
          </ul>
          <div class="clear"></div>
        </div>
        <!--BLOGROLL ENDS HERE-->
        


        
        <div id="categories_block">
          <div class="block_title">Topics</div>
          <ul class="list_left">
              
                  <li><a href="/blog/tag/rails/" class='left' rel="nofollow">rails</a></li>
              
                  <li><a href="/blog/tag/django/" class='right' rel="nofollow">django</a></li>
              
                  <li><a href="/blog/tag/linkroundup/" class='left' rel="nofollow">linkroundup</a></li>
              
                  <li><a href="/blog/tag/api/" class='right' rel="nofollow">API</a></li>
              
                  <li><a href="/blog/tag/appengine/" class='left' rel="nofollow">appengine</a></li>
              
                  <li><a href="/blog/tag/python/" class='right' rel="nofollow">python</a></li>
              
                  <li><a href="/blog/tag/startup/" class='left' rel="nofollow">startup</a></li>
              
                  <li><a href="/blog/tag/uncategorized/" class='right' rel="nofollow">Uncategorized</a></li>
              
                  <li><a href="/blog/tag/google/" class='left' rel="nofollow">google</a></li>
              
                  <li><a href="/blog/tag/marketing/" class='right' rel="nofollow">marketing</a></li>
              
                  <li><a href="/blog/tag/rambling/" class='left' rel="nofollow">rambling</a></li>
              
                  <li><a href="/blog/tag/search/" class='right' rel="nofollow">search</a></li>
              
                  <li><a href="/blog/tag/interviews/" class='left' rel="nofollow">interviews</a></li>
              
                  <li><a href="/blog/tag/5startupideas/" class='right' rel="nofollow">5startupideas</a></li>
              
                  <li><a href="/blog/tag/ideas/" class='left' rel="nofollow">ideas</a></li>
              
                  <li><a href="/blog/tag/seo/" class='right' rel="nofollow">seo</a></li>
              
                  <li><a href="/blog/tag/tips/" class='left' rel="nofollow">tips</a></li>
              
                  <li><a href="/blog/tag/forms/" class='right' rel="nofollow">forms</a></li>
              
                  <li><a href="/blog/tag/utilities/" class='left' rel="nofollow">utilities</a></li>
              
                  <li><a href="/blog/tag/web20/" class='right' rel="nofollow">web2.0</a></li>
              
                  <li><a href="/blog/tag/algorithms/" class='left' rel="nofollow">algorithms</a></li>
              
                  <li><a href="/blog/tag/presentations/" class='right' rel="nofollow">presentations</a></li>
              
                  <li><a href="/blog/tag/book/" class='left' rel="nofollow">book</a></li>
              
                  <li><a href="/blog/tag/tutorial/" class='right' rel="nofollow">tutorial</a></li>
              
                  <li><a href="/blog/tag/meta/" class='left' rel="nofollow">meta</a></li>
              
                  <li><a href="/blog/tag/apps/" class='right' rel="nofollow">apps</a></li>
              
                  <li><a href="/blog/tag/reviews/" class='left' rel="nofollow">reviews</a></li>
              
                  <li><a href="/blog/tag/iphone/" class='right' rel="nofollow">iphone</a></li>
              
                  <li><a href="/blog/tag/android/" class='left' rel="nofollow">android</a></li>
              
                  <li><a href="/blog/tag/mobile/" class='right' rel="nofollow">mobile</a></li>
              
                  <li><a href="/blog/tag/deploy/" class='left' rel="nofollow">deploy</a></li>
              
                  <li><a href="/blog/tag/mysql/" class='right' rel="nofollow">mysql</a></li>
              
                  <li><a href="/blog/tag/java/" class='left' rel="nofollow">java</a></li>
              
                  <li><a href="/blog/tag/open-source/" class='right' rel="nofollow">open-source</a></li>
              
                  <li><a href="/blog/tag/threads/" class='left' rel="nofollow">threads</a></li>
              
          </ul>
          <div class="clear"></div>
        </div>
        
        
        <!--ARCHIEVES STARTS HERE-->
        <div id="archives_block">
          <div class="block_title">Archives</div>
          <ul class="list_left">
            
                <li><a href="/blog/archive/2013/sep/" class='left' rel="nofollow">September 2013</a></li>
            
                <li><a href="/blog/archive/2013/aug/" class='right' rel="nofollow">August 2013</a></li>
            
                <li><a href="/blog/archive/2013/jul/" class='left' rel="nofollow">July 2013</a></li>
            
                <li><a href="/blog/archive/2013/jun/" class='right' rel="nofollow">June 2013</a></li>
            
                <li><a href="/blog/archive/2013/apr/" class='left' rel="nofollow">April 2013</a></li>
            
                <li><a href="/blog/archive/2013/mar/" class='right' rel="nofollow">March 2013</a></li>
            
                <li><a href="/blog/archive/2013/feb/" class='left' rel="nofollow">February 2013</a></li>
            
                <li><a href="/blog/archive/2013/jan/" class='right' rel="nofollow">January 2013</a></li>
            
                <li><a href="/blog/archive/2012/nov/" class='left' rel="nofollow">November 2012</a></li>
            
                <li><a href="/blog/archive/2012/oct/" class='right' rel="nofollow">October 2012</a></li>
            
                <li><a href="/blog/archive/2012/sep/" class='left' rel="nofollow">September 2012</a></li>
            
                <li><a href="/blog/archive/2012/jul/" class='right' rel="nofollow">July 2012</a></li>
            
                <li><a href="/blog/archive/2012/jun/" class='left' rel="nofollow">June 2012</a></li>
            
                <li><a href="/blog/archive/2012/may/" class='right' rel="nofollow">May 2012</a></li>
            
                <li><a href="/blog/archive/2012/apr/" class='left' rel="nofollow">April 2012</a></li>
            
                <li><a href="/blog/archive/2012/mar/" class='right' rel="nofollow">March 2012</a></li>
            
                <li><a href="/blog/archive/2012/feb/" class='left' rel="nofollow">February 2012</a></li>
            
                <li><a href="/blog/archive/2012/jan/" class='right' rel="nofollow">January 2012</a></li>
            
                <li><a href="/blog/archive/2011/dec/" class='left' rel="nofollow">December 2011</a></li>
            
                <li><a href="/blog/archive/2011/oct/" class='right' rel="nofollow">October 2011</a></li>
            
                <li><a href="/blog/archive/2011/sep/" class='left' rel="nofollow">September 2011</a></li>
            
                <li><a href="/blog/archive/2011/jul/" class='right' rel="nofollow">July 2011</a></li>
            
                <li><a href="/blog/archive/2011/jun/" class='left' rel="nofollow">June 2011</a></li>
            
                <li><a href="/blog/archive/2011/apr/" class='right' rel="nofollow">April 2011</a></li>
            
                <li><a href="/blog/archive/2011/feb/" class='left' rel="nofollow">February 2011</a></li>
            
                <li><a href="/blog/archive/2011/jan/" class='right' rel="nofollow">January 2011</a></li>
            
                <li><a href="/blog/archive/2010/dec/" class='left' rel="nofollow">December 2010</a></li>
            
                <li><a href="/blog/archive/2010/nov/" class='right' rel="nofollow">November 2010</a></li>
            
                <li><a href="/blog/archive/2010/oct/" class='left' rel="nofollow">October 2010</a></li>
            
                <li><a href="/blog/archive/2010/sep/" class='right' rel="nofollow">September 2010</a></li>
            
                <li><a href="/blog/archive/2010/jun/" class='left' rel="nofollow">June 2010</a></li>
            
                <li><a href="/blog/archive/2010/apr/" class='right' rel="nofollow">April 2010</a></li>
            
                <li><a href="/blog/archive/2010/mar/" class='left' rel="nofollow">March 2010</a></li>
            
                <li><a href="/blog/archive/2010/jan/" class='right' rel="nofollow">January 2010</a></li>
            
                <li><a href="/blog/archive/2009/dec/" class='left' rel="nofollow">December 2009</a></li>
            
                <li><a href="/blog/archive/2009/nov/" class='right' rel="nofollow">November 2009</a></li>
            
                <li><a href="/blog/archive/2009/oct/" class='left' rel="nofollow">October 2009</a></li>
            
                <li><a href="/blog/archive/2009/sep/" class='right' rel="nofollow">September 2009</a></li>
            
                <li><a href="/blog/archive/2009/aug/" class='left' rel="nofollow">August 2009</a></li>
            
                <li><a href="/blog/archive/2009/jul/" class='right' rel="nofollow">July 2009</a></li>
            
                <li><a href="/blog/archive/2009/jun/" class='left' rel="nofollow">June 2009</a></li>
            
                <li><a href="/blog/archive/2009/apr/" class='right' rel="nofollow">April 2009</a></li>
            
                <li><a href="/blog/archive/2009/mar/" class='left' rel="nofollow">March 2009</a></li>
            
                <li><a href="/blog/archive/2009/feb/" class='right' rel="nofollow">February 2009</a></li>
            
                <li><a href="/blog/archive/2008/nov/" class='left' rel="nofollow">November 2008</a></li>
            
                <li><a href="/blog/archive/2008/oct/" class='right' rel="nofollow">October 2008</a></li>
            
                <li><a href="/blog/archive/2008/jun/" class='left' rel="nofollow">June 2008</a></li>
            
                <li><a href="/blog/archive/2008/may/" class='right' rel="nofollow">May 2008</a></li>
            
                <li><a href="/blog/archive/2008/apr/" class='left' rel="nofollow">April 2008</a></li>
            
          </ul>
          <div class="clear"></div>
        </div>
        <!--ARCHIEVES ENDS HERE-->
        

      </div>
      <div class="clear"></div>
    </div>
    <!--  CONTENT BLOCK STARTS HERE -->
  </div>
  <!--PAGE CONTAINER ENDS-->
  <!--FOOTER CONTAINER STARTS-->
  <div id="footerbg">
    <span class='footertext'>&copy; Agiliq, 2009-2012</span>
  </div>
  <!--FOOTER CONTAINER ENDS-->
</div>
<script type="text/javascript" src="/static/CACHE/js/3a7ac86d2b0d.js"></script>
<script type="text/javascript">
    function pretty_print(){
        $(document).ready(function() {

    // add prettyprint class to all <pre></pre> blocks
    var prettify = false;
    $("pre").each(function() {
        $(this).addClass('prettyprint');
        prettify = true;
    });

    // if code blocks were found, bring in the prettifier ...
    if ( prettify ) {
        $.getScript("/static/blogango/js/prettify.js", function() { prettyPrint() });
    }
});
}
</script>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-367368-15']);
  _gaq.push(['_trackPageview']);
  _gaq.push(['_setCustomVar',1, 'Section', 'blog', 3 ]);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
