
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="description" content="">
    <meta name="keywords" content="python,proc,">
    <title>A python netstat in less than 100 lines of code</title>

    <link href='http://fonts.googleapis.com/css?family=Merienda' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Snowburst+One' rel='stylesheet' type='text/css'>

    <script src="/static/js/prettify.js" type="text/javascript"></script>
    <link rel="stylesheet" href="/static/css/prettify.css" type="text/css">

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    
    <!-- Optional theme -->
    <link rel="stylesheet" href="/static/css/bootstrap-theme.min.css">
    
    <!-- Latest compiled and minified JavaScript -->
    <script src="/static/js/bootstrap.min.js"></script>

    <style>
        .fill { min-width:100%;}
        .sidebar a {color:rgb(99, 15, 21); font-size:1.2em; font-family:"Trebuchet MS",Arial,"Bitstream Vera Sans",sans-serif}
    </style>

    
    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-26745182-3']);
      _gaq.push(['_trackPageview']);
    
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
    

</head>

<body onload="prettyPrint();">
   <div class="container fill">
        <div class="row">
            <div class="col-md-2">
                <h3> About Me </h3
                <p> My name is Ricardo Pascal and I'm a developer and sysadmin who lives in 
                Florianopolis/Brazil. I enjoy work with projects related to Linux, Python, 
                Science, Web, Django and Network.</p>
                <p>
                If I can help you in any of those subjects or about any content in this site,
                drop-me a line at voorloop _at_ gmail.com 
                </p>




<!-- Place this tag after the last widget tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>


            </div>
            <div class="col-md-7">
                
<div id="content">

<!-- Place this tag where you want the share button to render. -->
<div class="g-plus" data-action="share" data-annotation="bubble" data-height="24"></div>

<!-- Place this tag after the last share tag. -->
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>

<a href="https://twitter.com/share" class="twitter-share-button" data-size="large" data-dnt="true">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
<h1>A python netstat in less than 100 lines of code</h1>
<p>Do a python netstat in linux is not really hard, if you know where to look for informations on how to use it. That is the tip: <strong>basically any information you could need to clone a system tool, can be retrieved from the system itself.</strong> At this particular case what i did was follow these six steps:</p>
<ul>
<li>type ‘man netstat’</li>
<li>Read</li>
<li>type ‘man proc’</li>
<li>Read</li>
<li>Code</li>
<li>Back to step one</li>
</ul>
<p>Here is the result:</p>
<pre class="prettyprint">
#!/usr/bin/python

import pwd
import os
import re
import glob

PROC_TCP = "/proc/net/tcp"
STATE = {
        '01':'ESTABLISHED',
        '02':'SYN_SENT',
        '03':'SYN_RECV',
        '04':'FIN_WAIT1',
        '05':'FIN_WAIT2',
        '06':'TIME_WAIT',
        '07':'CLOSE',
        '08':'CLOSE_WAIT',
        '09':'LAST_ACK',
        '0A':'LISTEN',
        '0B':'CLOSING'
        }

def _load():
    ''' Read the table of tcp connections & remove header  '''
    with open(PROC_TCP,'r') as f:
        content = f.readlines()
        content.pop(0)
    return content

def _hex2dec(s):
    return str(int(s,16))

def _ip(s):
    ip = [(_hex2dec(s[6:8])),(_hex2dec(s[4:6])),(_hex2dec(s[2:4])),(_hex2dec(s[0:2]))]
    return '.'.join(ip)

def _remove_empty(array):
    return [x for x in array if x !='']

def _convert_ip_port(array):
    host,port = array.split(':')
    return _ip(host),_hex2dec(port)

def netstat():
    '''
    Function to return a list with status of tcp connections at linux systems
    To get pid of all network process running on system, you must run this script
    as superuser
    '''

    content=_load()
    result = []
    for line in content:
        line_array = _remove_empty(line.split(' '))     # Split lines and remove empty spaces.
        l_host,l_port = _convert_ip_port(line_array[1]) # Convert ipaddress and port from hex to decimal.
        r_host,r_port = _convert_ip_port(line_array[2]) 
        tcp_id = line_array[0]
        state = STATE[line_array[3]]
        uid = pwd.getpwuid(int(line_array[7]))[0]       # Get user from UID.
        inode = line_array[9]                           # Need the inode to get process pid.
        pid = _get_pid_of_inode(inode)                  # Get pid prom inode.
        try:                                            # try read the process name.
            exe = os.readlink('/proc/'+pid+'/exe')
        except:
            exe = None

        nline = [tcp_id, uid, l_host+':'+l_port, r_host+':'+r_port, state, pid, exe]
        result.append(nline)
    return result

def _get_pid_of_inode(inode):
    '''
    To retrieve the process pid, check every running process and look for one using
    the given inode.
    '''
    for item in glob.glob('/proc/[0-9]*/fd/[0-9]*'):
        try:
            if re.search(inode,os.readlink(item)):
                return item.split('/')[2]
        except:
            pass
    return None

if __name__ == '__main__':
    for conn in netstat():
        print conn
</pre>
</br>
<center>Ricardo Pascal wrote this on Jun 27, 2011</center>
</br>
</div>


                
                    <script src="https://apis.google.com/js/plusone.js">
                    </script>
                    <div id="comments"></div>
                    <script>
                    gapi.comments.render('comments', {
                        href: window.location,
                        width: '624',
                        first_party_property: 'BLOGGER',
                        view_type: 'FILTERED_POSTMOD'
                    });
                    </script>
                
            </div>
            <div class="col-md-3 sidebar">
                <a href="/">
                    <h1 style="text-align:center; font-family: 'Snowburst One', cursive; font-weight:900;">voorloopnul</h1>
                </a>
                <div class="text-right">
                    <h3>Recent posts</h3>
                    
                        <p>
                            <a href='/blog/setup-a-mail-server-with-ubuntu-and-postfix'>Setup a mail server with Ubuntu and Postfix</a></br> <small><i>March 2, 2013</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/setting-up-django-with-apache-and-uwsgi-ubuntu-12-10'>Setting up Django with Apache and uwsgi on Ubuntu 12.10</a></br> <small><i>Feb. 21, 2013</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/controlling-a-motor-using-wifi-connection-and-a-gamepad'>Controlling a motor using a wifi connection and a gamepad</a></br> <small><i>Dec. 16, 2012</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/real-time-plotting-of-android-accelerometer-data'>Real-time plotting of android accelerometer data</a></br> <small><i>Oct. 25, 2012</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/how-not-to-create-a-network-game'>How (not) to create a network game</a></br> <small><i>Sept. 10, 2012</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/a-python-proxy-in-less-than-100-lines-of-code'>A python proxy in less than 100 lines of code</a></br> <small><i>Aug. 29, 2012</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/setting-up-django-with-nginx-and-uwsgi-ubuntu-12-04'>Setting up Django with Nginx and uwsgi on Ubuntu 12.04</a></br> <small><i>June 9, 2012</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/spamassassin-how-to-increase-spam-detection-rate-up-to-40-and-avoid-false-positive'>Spamassassin; how to increase spam detection rate up to 40% and avoid false-positive</a></br> <small><i>Sept. 25, 2011</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/a-python-netstat-in-less-than-100-lines-of-code'>A python netstat in less than 100 lines of code</a></br> <small><i>June 27, 2011</i></small>
                        </p>
                    
                        <p>
                            <a href='/blog/generating-nmap-reports-in-html'>Generating nmap reports in html</a></br> <small><i>June 18, 2011</i></small>
                        </p>
                    
                    
                    <g:person href="https://plus.google.com/107392845141307984355" data-rel="author"></g:person>
                    

                </div>
            </div>
        </div>
    </div>
    <!-- Place this tag in your head or just before your close body tag. -->
    <script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
</body>
</html>

